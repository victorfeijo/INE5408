<beginning of page>
getustack, setustack <-> retrieve or change the address of per-LWP stack boundary information
#include <ucontext.h>
int getustack(stack_t **spp);
int setustack(stack_t *sp);
The getustack() function retrieves the address of per-LWP stack boundary information. The address is stored at the
location pointed to by spp. If this address has not been defined using a previous call to setustack(), NULL is stored
at the location pointed to by spp.
The setustack() function changes the address of the current thread's stack boundary information to the value of sp.
Upon successful completion, these functions return 0. Otherwise, <mi>1 is returned and errno is set to indicate the er<hy>
ror.
These functions will fail if:
EFAULT The spp or sp argument does not refer to a valid address.
Only implementors of custom threading libraries should use these functions to get and set the address of the stack
bound to an internal per-thread data structure. Other users should use stack_getbounds(3C) and stack_set<hy>
bounds(3C).
See attributes(5) for descriptions of the following attributes:
tab() box; cw(5.5i) |cw(0i) lw(5.5i) |lw(0i) ATTRIBUTE TYPEATTRIBUTE VALUE _ Interface StabilityEvolving
_ MT-LevelAsync-Signal-Safe
_stack_grow(3C), stack_getbounds(3C), stack_inbounds(3C), stack_setbounds(3C), stack_violation(3C), at<hy>
tributes(5)
