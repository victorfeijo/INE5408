<beginning of page>
pthread_barrier_destroy, pthread_barrier_init <-> destroy and initialize a barrier object
cc -mt [ flag... ] file... [ library... ]
#include <pthread.h>
int pthread_barrier_destroy(pthread_barrier_t *barrier);
int pthread_barrier_init(pthread_barrier_t *barrier,
 const pthread_barrierattr_t *restrict attr, unsigned count);
The pthread_barrier_destroy() function destroys the barrier referenced by barrier and releases any resources used
by the barrier. The effect of subsequent use of the barrier is undefined until the barrier is reinitialized by another call
to pthread_barrier_init(). An implementation can use this function to set barrier to an invalid value. The results are
undefined if pthread_barrier_destroy() is called when any thread is blocked on the barrier, or if this function is
called with an uninitialized barrier.
The pthread_barrier_init() function allocates any resources required to use the barrier referenced by barrier and
initializes the barrier with attributes referenced by attr. If attr is NULL, the default barrier attributes are used; the ef<hy>
fect is the same as passing the address of a default barrier attributes object. The results are undefined if
pthread_barrier_init() is called when any thread is blocked on the barrier (that is, has not returned from the
pthread_barrier_wait(3C) call). The results are undefined if a barrier is used without first being initialized. The re<hy>
sults are undefined if pthread_barrier_init() is called specifying an already initialized barrier.
The count argument specifies the number of threads that must call pthread_barrier_wait() before any of them suc<hy>
cessfully return from the call. The value specified by count must be greater than 0.
If the pthread_barrier_init() function fails, the barrier is not initialized and the contents of barrier are undefined.
Only the object referenced by barrier can be used for performing synchronization. The result of referring to copies of
that object in calls to pthread_barrier_destroy() or pthread_barrier_wait() is undefined.
Upon successful completion, these functions returns 0. Otherwise, an error number is returned to indicate the error.
The pthread_barrier_init() function will fail if:
EAGAIN The system lacks the necessary resources to initialize another barrier.
EINVAL The value specified by count is equal to 0.
ENOMEM Insufficient memory exists to initialize the barrier.
The pthread_barrier_init() function may fail if:
EBUSY The implementation has detected an attempt to destroy a barrier while it is in use (for example, while being
used in a pthread_barrier_wait() call) by another thread.
EINVAL The value specified by attr is invalid.
The pthread_barrier_destroy() function may fail if:
EBUSY The implementation has detected an attempt to destroy a barrier while it is in use (for example, while being
used in a pthread_barrier_wait() call) by another thread.
EINVAL The value specified by barrier is invalid.
See attributes(5) for descriptions of the following attributes:
<beginning of page>
tab() box; cw(2.75i) |cw(2.75i) lw(2.75i) |lw(2.75i) ATTRIBUTE TYPEATTRIBUTE VALUE _ Interface Stability<hy>
Standard _ MT-LevelMT-Safe
pthread_barrier_wait(3C), attributes(5), standards(5)
