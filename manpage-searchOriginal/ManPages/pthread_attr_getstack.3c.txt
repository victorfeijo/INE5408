<beginning of page>
pthread_attr_getstack, pthread_attr_setstack <-> get or set stack attributes
cc -mt [ flag... ] file... -lpthread [ library... ]
#include <pthread.h>
int pthread_attr_getstack(const pthread_attr_t *restrict attr,
 void **restrict stackaddr, size_t *restrict stacksize);
int pthread_attr_setstack(pthread_attr_t * attr, void *stackaddr,
 size_t stacksize);
The pthread_attr_getstack() and pthread_attr_setstack() functions, respectively, get and set the thread creation
stack attributes stackaddr and stacksize in the attr object.
The stack attributes specify the area of storage to be used for the created thread's stack. The base (lowest addressable
byte) of the storage is stackaddr, and the size of the storage is stacksize bytes. The stacksize argument must be at
least {PTHREAD_STACK_MIN}. The stackaddr argument must be aligned appropriately to be used as a stack; for
example, pthread_attr_setstack() might fail with EINVAL if (stackaddr & 0x7) is not 0. All pages within the stack
described by stackaddr and stacksize are both readable and writable by the thread.
Upon successful completion, these functions return a 0; otherwise, an error number is returned to indicate the error.
The pthread_attr_getstack() function stores the stack attribute values in stackaddr and stacksize if successful.
The pthread_attr_setstack() function will fail if:
EINVAL The value of stacksize is less than {PTHREAD_STACK_MIN}.
The pthread_attr_setstack() function may fail if:
EACCES The stack page(s) described by stackaddr and stacksize are not both readable and writable by the thread.
EINVAL The value of stackaddr does not have proper alignment to be used as a stack, or (stackaddr + stacksize)
lacks proper alignment.
These functions are appropriate for use by applications in an environment where the stack for a thread must be
placed in some particular region of memory.
See attributes(5) for descriptions of the following attributes:
tab() box; cw(2.75i) |cw(2.75i) lw(2.75i) |lw(2.75i) ATTRIBUTE TYPEATTRIBUTE VALUE _ Interface Stability<hy>
Standard _ MT-LevelAsync-Signal-Safe
pthread_attr_init(3C), pthread_attr_setdetachstate(3C), pthread_attr_setstacksize(3C), pthread_create(3C),
attributes(5)
