<beginning of page>
scalbln, scalblnf, scalblnl, scalbn, scalbnf, scalbnl <-> compute exponent using FLT_RADIX
c99 [ flag... ] file... -lm [ library... ]
#include <math.h>
double scalbln(double x, long n);
float scalblnf(float x, long n);
long double scalblnl(long double x, long n);
double scalbn(double x, int n);
float scalbnf(float x, int n);
long double scalbnl(long double x, int n);
These functions compute x * FLT_RADIX^n efficiently, not normally by computing FLT_RADIX^n explicitly.
Upon successful completion, these functions return x * FLT_RADIX^n>.
If the result would cause overflow, a range error occurs and these functions return <+->HUGE_VAL, <+->HUGE_VALF,
and <+->HUGE_VALL (according to the sign of x) as appropriate for the return type of the function.
If x is NaN, a NaN is returned.
If x is <+->0 or <+->Inf, x is returned.
If x is 0, x is returned.
These functions will fail if:
Range Error The result overflows.
If the integer expression (math_errhandling & MATH_ERREXCEPT) is non-zero, then the overflow floating-
point exception is raised.
An application wanting to check for exceptions should call feclearexcept(FE_ALL_EXCEPT) before calling these
functions. On return, if fetestexcept(FE_INVALID | FE_DIVBYZERO | FE_OVERFLOW | FE_UNDER<hy>
FLOW) is non-zero, an exception has been raised. An application should either examine the return value or check
the floating point exception flags to detect exceptions.
See attributes(5) for descriptions of the following attributes:
tab() box; cw(2.75i) |cw(2.75i) lw(2.75i) |lw(2.75i) ATTRIBUTE TYPEATTRIBUTE VALUE _ Interface Stability<hy>
Standard _ MT-LevelMT-Safe
feclearexcept(3M), fetestexcept(3M), math.h(3HEAD), scalb(3M), attributes(5), standards(5)
