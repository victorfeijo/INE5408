<beginning of page>
remquo, remquof, remquol <-> remainder functions
c99 [ flag... ] file... -lm [ library... ]
#include <math.h>
double remquo(double x, double y, int *quo);
float remquof(float x, float y, int *quo);
long double remquol(long double x, long double y, int *quo);
The remquo(), remquof(), and remquol() functions compute the same remainder as the remainder(), remain<hy>
derf(), and remainderl() functions, respectively. See remainder(3M). In the object pointed to by quo, they store a
value whose sign is the sign of x/y and whose magnitude is congruent modulo 2^n to the magnitude of the integral
quotient of x/y, where n is an integer greater than or equal to 3.
These functions return x REM y.
If x or y is NaN, a NaN is returned.
If x is <+->Inf or y is 0 and the other argument is non-NaN, a domain error occurs and a NaN is returned.
These functions will fail if:
Domain Error The x argument is Inf or the y argument is 0 and the other argument is non-NaN.
If the integer expression (math_errhandling & MATH_ERREXCEPT) is non-zero, then the invalid floating-point
exception is raised.
An application wanting to check for exceptions should call feclearexcept(FE_ALL_EXCEPT) before calling these
functions. On return, if fetestexcept(FE_INVALID | FE_DIVBYZERO | FE_OVERFLOW | FE_UNDER<hy>
FLOW) is non-zero, an exception has been raised. An application should either examine the return value or check
the floating point exception flags to detect exceptions.
See attributes(5) for descriptions of the following attributes:
tab() box; cw(2.75i) |cw(2.75i) lw(2.75i) |lw(2.75i) ATTRIBUTE TYPEATTRIBUTE VALUE _ Interface Stability<hy>
Standard _ MT-LevelMT-Safe
feclearexcept(3M), fetestexcept(3M), math.h(3HEAD), remainder(3M), attributes(5), standards(5)
