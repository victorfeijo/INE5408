<beginning of page>
mlib_ImageScale <-> linear scaling
cc [ flag... ] file... -lmlib [ library... ]
#include <mlib.h>
mlib_status mlib_ImageScale(mlib_image *dst,
 const mlib_image *src, const mlib_s32 *alpha, const mlib_s32 *beta,
 mlib_s32 shift);
The mlib_ImageScale() function performs a linear scaling on the pixels of the source image by multiplying the data
by a scale factor, shifting, and then adding an offset.
The following equation is used:
 dst[x][y][i] = src[x][y][i] * alpha[i] * 2**(-shift) +
  beta[i]
If the result of the operation underflows/overflows the minimum/maximum value supported by the destination im<hy>
age, then it will be clamped to the minimum/maximum value respectively.
See the following table for available variations of this linear scaling function.
tab(); cw(1.38i) cw(0i) cw(0i) cw(1.38i) cw(1.38i) cw(0i) cw(1.38i) lw(1.38i) lw(0i) lw(0i) lw(1.38i) lw(1.38i)
lw(0i) lw(1.38i) Type [*]BYTESHORTUSHORTINTFLOATDOUBLE _ MLIB_BYTEYYYYYY _
MLIB_SHORTYYYYYY _ MLIB_USHORTYYYYYY _ MLIB_INTYYYYYY
[*] Each row represents a source data type. Each column represents a destination data type.
The function takes the following arguments:
dst Pointer to destination image.
src Pointer to source image.
alpha Scaling factor. alpha[i] contains the scaling factor for channel i.
beta Offset value. beta[i] contains the offset for channel i.
shift Right shifting factor.
The function returns MLIB_SUCCESS if successful. Otherwise it returns MLIB_FAILURE.
See attributes(5) for descriptions of the following attributes:
tab() box; cw(2.75i) |cw(2.75i) lw(2.75i) |lw(2.75i) ATTRIBUTE TYPEATTRIBUTE VALUE _ Interface Stability<hy>
Committed _ MT-LevelMT-Safe
mlib_ImageScale_Fp(3MLIB), mlib_ImageScale_Fp_Inp(3MLIB), mlib_ImageScale_Inp(3MLIB), mlib_Im<hy>
ageScale2(3MLIB), mlib_ImageScale2_Inp(3MLIB), attributes(5)
