<beginning of page>
llseek <-> move extended read/write file pointer
#include <sys/types.h>
#include <unistd.h>
offset_t llseek(int fildes, offset_t offset, int whence);
The llseek() function sets the 64-bit extended file pointer associated with the open file descriptor specified by fildes
as follows: <bu> If whence is SEEK_SET, the pointer is set to offset bytes. <bu> If whence is SEEK_CUR, the pointer is
set to its current location plus offset. <bu> If whence is SEEK_END, the pointer is set to the size of the file plus offset.
<bu> If whence is SEEK_HOLE, the offset of the start of the next hole greater than or equal to the supplied offset is re<hy>
turned. The definition of a hole immediately follows this list. <bu> If whence is SEEK_DATA, the file pointer is set to
the start of the next non-hole file region greater than or equal to the supplied offset.
A "hole" is defined as a contiguous range of bytes in a file, all having the value of zero, but not all zeros in a file are
guaranteed to be represented as holes returned with SEEK_HOLE. Filesystems are allowed to expose ranges of ze<hy>
ros with SEEK_HOLE, but not required to. Applications can use SEEK_HOLE to optimise their behavior for
ranges of zeros, but must not depend on it to find all such ranges in a file. The existence of a hole at the end of every
data region allows for easy programming and implies that a virtual hole exists at the end of the file.
For filesystems that do not supply information about holes, the file will be represented as one entire data region.
Although each file has a 64-bit file pointer associated with it, some existing file system types (such as tmpfs) do not
support the full range of 64-bit offsets. In particular, on such file systems, non-device files remain limited to offsets
of less than two gigabytes. Device drivers may support offsets of up to 1024 gigabytes for device special files.
Some devices are incapable of seeking. The value of the file pointer associated with such a device is undefined.
Upon successful completion, llseek() returns the resulting pointer location as measured in bytes from the beginning
of the file. Remote file descriptors are the only ones that allow negative file pointers. Otherwise, <mi>1 is returned, the
file pointer remains unchanged, and errno is set to indicate the error.
The llseek() function will fail if:
EBADF The fildes argument is not an open file descriptor.
EINVAL The whence argument is not SEEK_SET, SEEK_CUR, or SEEK_END; the offset argument is not a valid
offset for this file system type; or the fildes argument is not a remote file descriptor and the resulting file pointer
would be negative.
ENXIO For SEEK_DATA, there are no more data regions past the supplied offset. For SEEK_HOLE, there are no
more holes past the supplied offset.
ESPIPE The fildes argument is associated with a pipe or FIFO.
creat(2), dup(2), fcntl(2), lseek(2), open(2)
