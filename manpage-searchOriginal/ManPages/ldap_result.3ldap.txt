<beginning of page>
ldap_result, ldap_msgfree <-> wait for and return LDAP operation result
cc[ flag... ] file... -lldap[ library... ]
#include <lber.h>
#include <ldap.h>
int ldap_result(LDAP *ld, int msgid, int all,
 struct timeval *timeout, LDAPMessage **result);
int ldap_msgfree(LDAPMessage *msg);
The ldap_result() function is used to wait for and return the result of an operation previously initiated by one of the
LDAP asynchronous operation functions , for example, ldap_search(3LDAP), and ldap_modify(3LDAP). Those
functions all return <mi>1 in case of error, and an invocation identifier upon successful initiation of the operation. The
invocation identifier is picked by the library and is guaranteed to be unique across the LDAP session. It can be used
to request the result of a specific operation from ldap_result() through the msgid parameter.
The ldap_result() function will block or not, depending upon the setting of the timeout parameter. If timeout is not a
null pointer, it specifies a maximum interval to wait for the selection to complete. If timeout is a null pointer, the se<hy>
lect blocks indefinitely. To effect a poll, the timeout argument should be a non-null pointer, pointing to a zero-valued
timeval structure. See select(3C) for further details.
If the result of a specific operation is required, msgid should be set to the invocation identifier returned when the op<hy>
eration was initiated, otherwise LDAP_RES_ANY should be supplied. The all parameter only has meaning for
search responses and is used to select whether a single entry of the search response should be returned, or all results
of the search should be returned.
A search response is made up of zero or more search entries followed by a search result. If all is set to 0, search en<hy>
tries will be returned one at a time as they come in, by means of separate calls to ldap_result(). If it is set to a non-
zero value, the search response will only be returned in its entirety, that is, after all entries and the final search result
have been received.
Upon success, the type of the result received is returned and the result parameter will contain the result of the opera<hy>
tion. This result should be passed to the LDAP parsing functions, (see ldap_first_entry(3LDAP)) for interpretation.
The possible result types returned are:
 #define LDAP_RES_BIND 0x61L
 #define LDAP_RES_SEARCH_ENTRY 0x64L
 #define LDAP_RES_SEARCH_RESULT 0x65L
 #define LDAP_RES_MODIFY 0x67L
 #define LDAP_RES_ADD 0x69L
 #define LDAP_RES_DELETE 0x6bL
 #define LDAP_RES_MODRDN 0x6dL
 #define LDAP_RES_COMPARE 0x6fL
The ldap_msgfree() function is used to free the memory allocated for a result by ldap_result() or
ldap_search_s(3LDAP) functions. It takes a pointer to the result to be freed and returns the type of the message it
freed.
The ldap_result() function returns <mi>1 on error and 0 if the specified timeout was exceeded.
See attributes(5) for a description of the following attributes:
tab() box; cw(2.75i) |cw(2.75i) lw(2.75i) |lw(2.75i) ATTRIBUTE TYPEATTRIBUTE VALUE AvailabilitySUNWcsl
(32-bit) SUNWcslx (64-bit) Interface StabilityCommitted
select(1), ldap(3LDAP), ldap_search(3LDAP) , attributes(5)
The ldap_result() function allocates memory for results that it receives. The memory can be freed by calling
ldap_msgfree(3LDAP).
