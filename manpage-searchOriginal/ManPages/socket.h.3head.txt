<beginning of page>
socket.h, socket <-> Internet Protocol family
#include <sys/socket.h>
The <sys/socket.h> header defines the unsigned integral type sa_family_t through typedef.
The <sys/socket.h> header defines the sockaddr structure that includes the following members:
 sa_family_t sa_family /* address family */
 char sa_data[] /* socket address (variable-length
  data) */
The <sys/socket.h> header defines the msghdr structure for libxnet interfaces that includes the following members:
 void *msg_name /* optional address */
 socklen_t msg_namelen /* size of address */
 struct iovec *msg_iov /* scatter/gather array */
 int msg_iovlen /* members in msg_iov */
 void *msg_control /* ancillary data, see below */
 socklen_t msg_controllen /* ancillary data buffer len */
 int msg_flags /* flags on received message */
The <sys/socket.h> header defines the cmsghdr structure for libxnet that includes the following members:
 socklen_t cmsg_len /* data byte count, including hdr */
 int cmsg_level /* originating protocol */
 int cmsg_type /* protocol-specific type */
Ancillary data consists of a sequence of pairs, each consisting of a cmsghdr structure followed by a data array. The
data array contains the ancillary data message, and the cmsghdr structure contains descriptive information that al<hy>
lows an application to correctly parse the data.
The values for cmsg_level will be legal values for the level argument to the getsockopt() and setsockopt() func<hy>
tions. The SCM_RIGHTS type is supported for level SOL_SOCKET.
Ancillary data is also possible at the socket level. The <sys/socket.h> header defines the following macros for use as
the cmsg_type values when cmsg_level is SOL_SOCKET.
SCM_RIGHTS Indicates that the data array contains the access rights to be sent or received.
SCM_UCRED Indicates that the data array contains a ucred_t to be received. The ucred_t is the credential of the
sending process at the time the message was sent. This is a Sun-specific, Evolving interface. See ucred_get(3C).
The IPv4 data formats generally use the same values for data passed back in cmsghdr as for setsockopt() to enable
the feature. The IPv4 data formats are listed below with the associated payload for each.
IPPROTO_IP
IP_RECVDSTADDR
ipaddr_t, IP address
IPPROTO_IP
IP_RECVOPTS
variable-length IP options, up to 40 bytes
IPPROTO_IP
IP_RECVIF
uint_t, ifIndex number
<beginning of page>
IPPROTO_IP
IP_RECVSLLA
struct sockaddr_dl, link layer address
IPPROTO_IP
IP_RECVTTL
uint8_t
SOL_SOCKET
SO_RECVUCRED
ucred_t <em> cmsghdr.cmsg_type is SCM_UCRED, not SO_RECVUCRED
The IPv6 data formats use different values for enabling the option and for passing the value back to the application.
The IPv6 data formats are listed below with the associated payload for each.
IPPROTO_IPV6
IPV6_RECVPKTINFO
in_pktinfo, cmsg_type IPV6_PKTINFO
IPPROTO_IPV6
IPV6_RECVTCLASS
uint_t, cmsg_type IPV6_TCLASS
IPPROTO_IPV6
IPV6_RECVPATHMTU
ip6_mtuinfo, cmsg_type IPV6_PATHMTU
IPPROTO_IPV6
IPV6_RECVHOPLIMIT
uint_t, cmsg_type IPV6_HOPLIMIT
IPPROTO_IPV6
IPV6_RECVHOPOPTS
variable-length IPv6 options, cmsg_type IPV6_HOPOPTS
IPPROTO_IPV6
IPV6_RECVDSTOPTS
variable-length IPv6 options, cmsg_type IPV6_DSTOPTS
IPPROTO_IPV6
IPV6_RECVRTHDR
variable-length IPv6 options, cmsg_type IPV6_RTHDR
IPPROTO_IPV6
IPV6_RECVRTHDRDSTOPTS
variable-length IPv6 options, cmsg_type IPV6_DSTOPTS
The <sys/socket.h> header defines the following macros to gain access to the data arrays in the ancillary data associ<hy>
<beginning of page>
ated with a message header:
CMSG_DATA(cmsg)
If the argument is a pointer to a cmsghdr structure, this macro returns an unsigned character pointer to the data array
associated with the cmsghdr structure.
CMSG_NXTHDR(mhdr, cmsg)
If the first argument is a pointer to a msghdr structure and the second argument is a pointer to a cmsghdr structure
in the ancillary data, pointed to by the msg_control field of that msghdr structure, this macro returns a pointer to
the next cmsghdr structure, or a null pointer if this structure is the last cmsghdr in the ancillary data.
CMSG_FIRSTHDR(mhdr)
If the argument is a pointer to a msghdr structure, this macro returns a pointer to the first cmsghdr structure in the
ancillary data associated with this msghdr structure, or a null pointer if there is no ancillary data associated with the
msghdr structure.
CMSG_SPACE(len)
Given the length of an ancillary data object, CMSG_SPACE() returns the space required by the object and its cms<hy>
ghdr structure, including any padding needed to satisfy alignment requirements. This macro can be used, for exam<hy>
ple, to allocate space dynamically for the ancillary data. This macro should not be used to initialize the cmsg_len
member of a cmsghdr structure. Use the CMSG_LEN() macro instead.
CMSG_LEN(len)
Given the length of an ancillary data object, CMSG_LEN() returns the value to store in the cmsg_len member of the
cmsghdr structure, taking into account any padding needed to satisfy alignment requirements.
The <sys/socket.h> header defines the linger structure that includes the following members:
 int l_onoff /* indicates whether linger option is enabled */
 int l_linger /* linger time, in seconds */
The <sys/socket.h> header defines the following macros:
SOCK_DGRAM Datagram socket
SOCK_STREAM Byte-stream socket
SOCK_SEQPACKET Sequenced-packet socket
The <sys/socket.h> header defines the following macros for use as the level argument of setsockopt() and getsock<hy>
opt().
SOL_SOCKET Options to be accessed at the socket level, not the protocol level.
SOL_ROUTE Options to be accessed at the routing socket level, not the protocol level.
The <sys/socket.h> header defines the following macros for use as the option_name argument of getsockopt() or
setsockopt() calls:
SO_DEBUG Debugging information is being recorded.
<beginning of page>
SO_ACCEPTCONN Socket is accepting connections.
SO_BROADCAST Transmission of broadcast messages is supported.
SO_REUSEADDR Reuse of local addresses is supported.
SO_KEEPALIVE Connections are kept alive with periodic messages.
SO_LINGER Socket lingers on close.
SO_OOBINLINE Out-of-band data is transmitted in line.
SO_SNDBUF Send buffer size.
SO_RCVBUF Receive buffer size.
SO_ERROR Socket error status.
SO_TYPE Socket type.
SO_RECVUCRED Request the reception of user credential ancillary data. This is a Sun-specific, Evolving inter<hy>
face. See ucred_get(3C).
SO_MAC_EXEMPT Mandatory Access Control (MAC) exemption for unlabeled peers. This option is available
only if the system is configured with Trusted Extensions.
SO_ALLZONES Bypass zone boundaries (privileged).
The <sys/socket.h> header defines the following macros for use as the valid values for the msg_flags field in the
msghdr structure, or the flags parameter in recvfrom(), recvmsg(), sendto(), or sendmsg() calls:
MSG_CTRUNC Control data truncated.
MSG_EOR Terminates a record (if supported by the protocol).
MSG_OOB Out-of-band data.
MSG_PEEK Leave received data in queue.
MSG_TRUNC Normal data truncated.
MSG_WAITALL Wait for complete message.
The <sys/socket.h> header defines the following macros:
AF_UNIX UNIX domain sockets
<beginning of page>
AF_INET Internet domain sockets
The <sys/socket.h> header defines the following macros:
SHUT_RD Disables further receive operations.
SHUT_WR Disables further send operations.
SHUT_RDWR Disables further send and receive operations.
The <sys/socket.h> header defines the msghdr structure for libsocket interfaces that includes the following mem<hy>
bers:
 void *msg_name /* optional address */
 socklen_t msg_namelen /* size of address */
 struct iovec *msg_iov /* scatter/gather array */
 int msg_iovlen /* # elements in msg_iov */
 caddr_t msg_accrights /* access rights sent/received */
The msg_name and msg_namelen parameters specify the destination address when the socket is unconnected The
msg_name can be specified as a NULL pointer if no names are desired or required. The msg_iov and msg_iovlen pa<hy>
rameters describe the scatter-gather locations, as described in read(2). The msg_accrights parameter specifies the
buffer in which access rights sent along with the message are received. The msg_accrightslen specifies the length of
the buffer.
See attributes(5) for descriptions of the following attributes:
tab() box; cw(2.75i) |cw(2.75i) lw(2.75i) |lw(2.75i) ATTRIBUTE TYPEATTRIBUTE VALUE _ Interface Stability<hy>
Standard
accept(3SOCKET), accept(3XNET), bind(3SOCKET), bind(3XNET), connect(3SOCKET), connect(3XNET),
getpeername(3SOCKET), getpeername(3XNET), getpeerucred(3C), getsockname(3SOCKET), getsock<hy>
name(3XNET), getsockopt(3SOCKET), getsockopt(3XNET), libsocket(3LIB), listen(3SOCKET), lis<hy>
ten(3XNET), recv(3SOCKET), recv(3XNET), recvfrom(3SOCKET), recvfrom(3XNET), recvmsg(3SOCKET),
recvmsg(3XNET), send(3SOCKET), send(3XNET), sendmsg(3SOCKET), sendmsg(3XNET), sendto(3SOCK<hy>
ET), sendto(3XNET), setsockopt(3SOCKET), setsockopt(3XNET), shutdown(3SOCKET), shutdown(3XNET),
socket(3SOCKET), socket(3XNET), socketpair(3SOCKET), socketpair(3XNET), ucred_get(3C), attributes(5),
standards(5)
