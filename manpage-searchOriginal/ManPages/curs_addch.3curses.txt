<beginning of page>
curs_addch, addch, waddch, mvaddch, mvwaddch, echochar, wechochar <-> add a character (with attributes) to a curs<hy>
es window and advance cursor
cc [ flag ... ] file ... -lcurses [ library .. ]
#include <curses.h>
int addch(chtype ch);
int waddch(WINDOW *win, chtype ch);
int mvaddch(int y, int x, chtype ch);
int mvwaddch(WINDOW *win, int y, int x, chtype ch);
int echochar(chtype ch);
int wechochar(WINDOW *win, chtype ch);
With the addch(), waddch(), mvaddch(), and mvwaddch() routines, the character ch is put into the window at the
current cursor position of the window and the position of the window cursor is advanced. Its function is similar to
that of putchar(). At the right margin, an automatic newline is performed. At the bottom of the scrolling region, if
scrollok() is enabled, the scrolling region is scrolled up one line.
If ch is a tab, newline, or backspace, the cursor is moved appropriately within the window. A newline also does a clr<hy>
toeol() before moving. Tabs are considered to be at every eighth column. If ch is another control character, it is
drawn in the ^X notation. Calling winch() after adding a control character does not return the control character, but
instead returns the representation of the control character. See curs_inch(3CURSES).
Video attributes can be combined with a character by OR-ing them into the parameter. This results in these attributes
also being set. (The intent here is that text, including attributes, can be copied from one place to another using inch()
and addch().) (see standout(), predefined video attribute constants, on the curs_attr(3CURSES) page).
The echochar() and wechochar() routines are functionally equivalent to a call to addch() followed by a call to re<hy>
fresh(), or a call to waddch followed by a call to wrefresh(). The knowledge that only a single character is being
output is taken into consideration and, for non-control characters, a considerable performance gain might be seen by
using these routines instead of their equivalents.
The following variables may be used to add line drawing characters to the screen with routines of the addch() fami<hy>
ly. When variables are defined for the terminal, the A_ALTCHARSET bit is turned on (see curs_attr(3CURSES)).
Otherwise, the default character listed below is stored in the variable. The names chosen are consistent with the
VT100 nomenclature.
tab() box; cw(1.83i) |cw(1.25i) |cw(2.42i) lw(1.83i) |lw(1.25i) |lw(2.42i) NameDefaultGlyph Description _
ACS_ULCORNER+upper left-hand corner _ ACS_LLCORNER+lower left-hand corner _ ACS_URCORNER+up<hy>
per right-hand corner _ ACS_LRCORNER+lower right-hand corner _ ACS_RTEE+right tee _ ACS_LTEE+left tee
_ ACS_BTEE+bottom tee _ ACS_TTEE+top tee _ ACS_HLINE-horizontal line _ ACS_VLINE|vertical line _
ACS_PLUS+plus _ ACS_S1-scan line 1 _ ACS_S9-scan line 9 _ ACS_DIAMOND+diamond _ ACS_CK<hy>
BOARD:checker board (stipple) _ ACS_DEGREE'degree symbol _ ACS_PLMINUS#plus/minus _ ACS_BUL<hy>
LETobullet _ ACS_LARROW<arrow pointing left _ ACS_RARROW>arrow pointing right _ ACS_DARROWvar<hy>
row pointing down _ ACS_UARROW^arrow pointing up _ ACS_BOARD#board of squares _
ACS_LANTERN#lantern symbol _ ACS_BLOCK #solid square block
All routines return the integer ERR upon failure and an integer value other than ERR upon successful completion.
See attributes(5) for descriptions of the following attributes:
tab() box; cw(2.75i) |cw(2.75i) lw(2.75i) |lw(2.75i) ATTRIBUTE TYPEATTRIBUTE VALUE _ MT-LevelUnsafe
curs_attr(3CURSES), curs_clear(3CURSES), curs_inch(3CURSES), curs_outopts(3CURSES), curs_re<hy>
fresh(3CURSES), curses(3CURSES), putc(3C), attributes(5)
<beginning of page>
The header <curses.h> automatically includes the headers <stdio.h> and <unctrl.h>.
Note that addch(), mvaddch(), mvwaddch(), and echochar() may be macros.
