<beginning of page>
fdim, fdimf, fdiml <-> compute positive difference between two floating-point numbers
c99 [ flag... ] file... -lm [ library... ]
#include <math.h>
double fdim(double x, double y);
float fdimf(float x, float y);
long double fdiml(long double x, long double y);
These functions determine the positive difference between their arguments. If x is greater than y, x<mi>y is returned. If x
is less than or equal to y, +0 is returned.
Upon successful completion, these functions return the positive difference value.
If x<mi>y is positive and overflows, a range error occurs and fdim(), fdimf(), and fdiml() returns the value of the macro
HUGE_VAL, HUGE_VALF, and HUGE_VALL, respectively.
If x or y is NaN, a NaN is returned.
These functions will fail if:
Range Error The result overflows.
If the integer expression (math_errhandling & MATH_ERREXCEPT) is non-zero, the overflow floating-point ex<hy>
ception will be raised.
An application wanting to check for exceptions should call feclearexcept(FE_ALL_EXCEPT) before calling these
functions. On return, if fetestexcept(FE_INVALID | FE_DIVBYZERO | FE_OVERFLOW | FE_UNDER<hy>
FLOW) is non-zero, an exception has been raised. An application should either examine the return value or check
the floating point exception flags to detect exceptions.
See attributes(5) for descriptions of the following attributes:
tab() box; cw(2.75i) |cw(2.75i) lw(2.75i) |lw(2.75i) ATTRIBUTE TYPEATTRIBUTE VALUE _ Interface Stability<hy>
Standard _ MT-LevelMT-Safe
feclearexcept(3M), fetestexcept(3M), fmax(3M), fmin(3M), math.h(3HEAD), attributes(5), standards(5)
