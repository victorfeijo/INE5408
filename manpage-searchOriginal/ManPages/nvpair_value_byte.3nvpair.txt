<beginning of page>
nvpair_value_byte, nvpair_value_boolean_value, nvpair_value_int8, nvpair_value_uint8, nvpair_value_int16,
nvpair_value_uint16, nvpair_value_int32, nvpair_value_uint32, nvpair_value_int64, nvpair_value_uint64,
nvpair_value_double, nvpair_value_string, nvpair_value_nvlist, nvpair_value_boolean_array, nvpair_value_byte_ar<hy>
ray, nvpair_value_int8_array, nvpair_value_uint8_array, nvpair_value_int16_array, nvpair_value_uint16_array,
nvpair_value_int32_array, nvpair_value_uint32_array, nvpair_value_int64_array, nvpair_value_uint64_array,
nvpair_value_string_array, nvpair_value_nvlist_array <-> retrieve value from a name-value pair
cc [ flag... ] file... -lnvpair [ library... ]
#include <libnvpair.h>
int nvpair_value_byte(nvpair_t *nvpair, uchar_t *val);
int nvpair_value_boolean_value(nvpair_t *nvpair,
 boolean_t *val);
int nvpair_value_int8(nvpair_t *nvpair, int8_t *val);
int nvpair_value_uint8(nvpair_t *nvpair, uint8_t *val);
int nvpair_value_int16(nvpair_t *nvpair, int16_t *val);
int nvpair_value_uint16(nvpair_t *nvpair, uint16_t *val);
int nvpair_value_int32(nvpair_t *nvpair, int32_t *val);
int nvpair_value_uint32(nvpair_t *nvpair, uint32_t *val);
int nvpair_value_int64(nvpair_t *nvpair, int64_t *val);
int nvpair_value_uint64(nvpair_t *nvpair, uint64_t *val);
int nvpair_value_double(nvpair_t *nvpair, double *val);
int nvpair_value_string(nvpair_t *nvpair, char **val);
int nvpair_value_nvlist(nvpair_t *nvpair, nvlist_t **val);
int nvpair_value_boolean_array(nvpair_t *nvpair,
 boolean_t **val, uint_t *nelem);
int nvpair_value_byte_array(nvpair_t *nvpair, uchar_t **val,
 uint_t *nelem);
int nvpair_value_int8_array(nvpair_t *nvpair, int8_t **val,
 uint_t *nelem);
int nvpair_value_uint8_array(nvpair_t *nvpair, uint8_t **val,
 uint_t *nelem);
int nvpair_value_int16_array(nvpair_t *nvpair, int16_t **val,
 uint_t *nelem);
int nvpair_value_uint16_array(nvpair_t *nvpair,
 uint16_t **val, uint_t *nelem);
int nvpair_value_int32_array(nvpair_t *nvpair,
 int32_t **val, uint_t *nelem);
int nvpair_value_uint32_array(nvpair_t *nvpair,
 uint32_t **val, uint_t *nelem);
int nvpair_value_int64_array(nvpair_t *nvpair,
 int64_t **val, uint_t *nelem);
int nvpair_value_uint64_array(nvpair_t *nvpair,
 uint64_t **val, uint_t *nelem);
<beginning of page>
int nvpair_value_string_array(nvpair_t *nvpair,
 char ***val, uint_t *nelem);
int nvpair_value_nvlist_array(nvpair_t *nvpair,
 nvlist_t ***val, uint_t *nelem);
nvpair Name-value pair to be processed.
nelem Address to store the number of elements in value.
val Address to store the value or the starting address of the array value.
These functions retrieve the value of nvpair. The data type of nvpair must match the interface name for the call to be
successful.
There is no nvpair_value_boolean(); the existence of the name implies the value is true.
For array data types, including string, the memory containing the data is managed by the library and references to
the value remains valid until nvlist_free() is called on the nvlist_t from which nvpair is obtained. See
nvlist_free(3NVPAIR).
The value of an nvpair may not be retrieved after the nvpair has been removed from or replaced in an nvlist. Re<hy>
placement can occur during pair additions to nvlists created with NV_UNIQUE_NAME_TYPE and
NV_UNIQUE_NAME. See nvlist_alloc(3NVPAIR).
These functions return 0 on success and an error value on failure.
These functions will fail if:
EINVAL Either one of the arguments is NULL or the type of nvpair does not match the function name.
See attributes(5) for descriptions of the following attributes:
tab() box; cw(2.69i) |cw(2.81i) lw(2.69i) |lw(2.81i) ATTRIBUTE TYPEATTRIBUTE VALUE _ Interface Stability<hy>
Committed _ MT-LevelMT-Safe
libnvpair(3LIB), nvlist_alloc(3NVPAIR), attributes(5)
