<beginning of page>
getpass, getpassphrase <-> read a string of characters without echo
#include <stdlib.h>
char *getpass(const char *prompt);
char *getpassphrase(const char *prompt);
#include <unistd.h>
char *getpass(const char *prompt);
The getpass() function opens the process's controlling terminal, writes to that device the null-terminated string
prompt, disables echoing, reads a string of characters up to the next newline character or EOF, restores the terminal
state and closes the terminal.
The getpassphrase() function is identical to getpass(), except that it reads and returns a string of up to 257 charac<hy>
ters in length.
Upon successful completion, getpass() returns a pointer to a null-terminated string of at most 9 bytes that were read
from the terminal device. If an error is encountered, the terminal state is restored and a null pointer is returned.
The getpass() and getpassphrase() functions may fail if:
EINTR The function was interrupted by a signal.
EIO The process is a member of a background process attempting to read from its controlling terminal, the process
is ignoring or blocking the SIGTTIN signal or the process group is orphaned.
EMFILE OPEN_MAX file descriptors are currently open in the calling process.
ENFILE The maximum allowable number of files is currently open in the system.
ENXIO The process does not have a controlling terminal.
The return value points to static data whose content may be overwritten by each call.
See attributes(5) for descriptions of the following attributes:
tab() box; cw(2.75i) |cw(2.75i) lw(2.75i) |lw(2.75i) ATTRIBUTE TYPEATTRIBUTE VALUE _ Interface Stabili<hy>
tygetpass() is Standard. _ MT-LevelUnsafe
attributes(5), standards(5)
