<beginning of page>
rsm_memseg_import_put, rsm_memseg_import_put8, rsm_memseg_import_put16, rsm_memseg_import_put32,
rsm_memseg_import_put64 <-> write to a segment
cc [ flag... ] file... -lrsm [ library... ]
#include <rsmapi.h>
int rsm_memseg_import_put(rsm_memseg_import_handle_t im_memseg,
 off_t offset, void *src_addr, size_t length);
int rsm_memseg_import_put8(rsm_memseg_import_handle_t im_memseg,
 off_t offset, uint8_t datap, ulong_t rep_cnt);
int rsm_memseg_import_put16(rsm_memseg_import_handle_t im_memseg,
 off_t offset, uint16_t datap, ulong_t rep_cnt);
int rsm_memseg_import_put32(rsm_memseg_import_handle_t im_memseg,
 off_t offset, uint32_t datap, ulong_t rep_cnt);
int rsm_memseg_import_put64(rsm_memseg_import_handle_t im_memseg,
 off_t offset, uint64_t datap, ulong_t rep_cnt);
When using interconnects that allow memory mapping (see rsm_memseg_import_map(3RSM)), standard CPU
memory operations may be used for accessing memory of a segment. If, however, a mapping is not provided, then
explicitly calling these functions facilitates writing to a segment. Depending on the attributes of the extension library
for the interconnect, these functions may involve doing an implicit mapping before performing the data transfer. Ap<hy>
plications can be made interconnect-independent with respect to segment writes by using these functions. The data
access error detection is performed through the use of barriers (see rsm_memseg_import_open_barrier(3RSM)).
The default barrier operation mode is RSM_BARRIER_MODE_IMPLICIT, which means that around every put
operation open and close barrier operations are performed automatically. Explicit error handling may also be set up
for these functions (see rsm_memseg_import_set_mode(3RSM)).
The rsm_memseg_import_put() function copies length bytes from local memory with start address src_addr to
the imported segment im_memseg beginning at location offset from the start of the segment.
The rsm_memseg_import_put8() function copies rep_cnt number of 8-bit quantities from successive local memory
locations pointed to by datap to successive locations starting from offset in the imported segment.
The rsm_memseg_import_put16() function copies rep_cnt number of 16-bit quantities from successive local mem<hy>
ory locations pointed to by datap to successive locations starting from offset in the imported segment. The offset
must be aligned at half-word address boundary.
The rsm_memseg_import_put32() function copies rep_cnt number of 32-bit quantities from successive local mem<hy>
ory locations pointed to by datap to successive locations starting from offset in the imported segment. The offset
must be aligned at word address boundary.
The rsm_memseg_import_put64() function copies rep_cnt number of 64-bit quantities from successive local mem<hy>
ory locations pointed to by datap to successive locations starting from offset in the imported segment. The offset
must be aligned at double-word address boundary.
The data transfer functions that transfer small quantities of data (that is, 8-, 16-, 32-, and 64-bit quantities) perform
byte swapping prior to the data transfer, in the event that the source and destination have incompatible endian char<hy>
acteristics.
Upon successful completion, these functions return 0. Otherwise, an error value is returned to indicate the error.
These functions can return the following errors:
RSMERR_BAD_SEG_HNDL
Invalid segment handle.
RSMERR_BAD_ADDR
Bad address.
<beginning of page>
RSMERR_BAD_MEM_ALIGNMENT
Invalid memory alignment for pointer.
RSMERR_BAD_OFFSET
Invalid offset.
RSMERR_BAD_LENGTH
Invalid length.
RSMERR_PERM_DENIED
Permission denied.
RSMERR_INSUFFICIENT_RESOURCES
Insufficient resources.
RSMERR_BARRIER_UNINITIALIZED
Barrier not initialized.
RSMERR_BARRIER_FAILURE
I/O completion error.
RSMERR_CONN_ABORTED
Connection aborted.
See attributes(5) for descriptions of the following attributes:
tab() box; lw(2.75i) |lw(2.75i) lw(2.75i) |lw(2.75i) ATTRIBUTE TYPE ATTRIBUTE VALUE _ Interface Stabili<hy>
tyEvolving _ MT-LevelMT-Safe
rsm_memseg_import_get(3RSM), rsm_memseg_import_init_barrier(3RSM), rsm_memseg_im<hy>
port_open_barrier(3RSM), rsm_memseg_import_set_mode(3RSM), attributes(5)
