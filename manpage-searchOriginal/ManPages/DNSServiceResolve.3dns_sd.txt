<beginning of page>
DNSServiceResolve <-> resolve service instances with DNS
cc [ flag ... ] file ... -ldns_sd [ library ... ]
#include <dns_sd.h>
DNSServiceErrorType DNSServiceResolve(DNSServiceRef *sdRef,
 DNSServiceFlags flags, uint32_t interfaceIndex, const char *name,
 const char *regtype, const char *domain,
 DNSServiceServiceResolveReply callBack, void *context);
typedef void(*DNSServiceResolveReply)(DNSServiceRef sdRef,
 DNSServiceFlags flags, uint32_t interfaceIndex,
 DNSServiceErrorType errorCode, const char *fullname,
 const char *hosttarget, uint16_t port, uint16_t txtLen,
 const char *txtRecord, void *context);
The DNSServiceResolve() function is used to resolve a service name returned by DNSServiceBrowse() to host IP
address, port number, and TXT record. The DNSServiceResolve() function returns results asynchronously. A
DNSServiceResolve() call to resolve service name can be ended by calling DNSServiceRefDeallocate(). The call<hy>
back argument points to a function of type DNSServiceResolveReply as listed above. The callback function is in<hy>
voked on finding a result or when the asynch resolve call fails. The sdRef argument to DNSServiceResolve() points
to an uninitialized DNSServiceRef. If the call to DNSServiceResolve() succeeds, sdRef is initialized and kDNSSer<hy>
viceErr_NoError is returned.
The flags argument to DNSServiceResolve() is currently unused and reserved for future use. The interfaceIndex ar<hy>
gument indicates the interface on which to resolve the service. If the DNSServiceResolve() call is the result of an
earlier DNSServiceBrowse() operation, pass the interfaceIndex to perform a resolve on all interfaces. See the sec<hy>
tion "Constants for specifying an interface index" in <dns_sd.h> for more details. The name parameter is the service
instance name to be resolved, as returned from a DNSServiceBrowse() call. The regtype holds the service type and
the domain parameter indicates the domain in which the service instance was found. The context parameter points to
a value that is passed to the callback function.
The sdRef argument passed to the callback function is initialized by DNSServiceResolve() call. The flags parameter
in the callback function is currently unused and reserved for future use. The errorCode parameter is kDNSSer<hy>
viceErr_NoError on success. Otherwise, it will hold the error defined in <dns_sd.h> and other parameters are un<hy>
defined when errorCode is nonzero. The fullname parameter in the callback holds the full service domain name in
the format <servicename>.<protocol>.<domain>. The full service domain name is escaped to follow standard DNS
rules. The hosttarget parameter holds the target hostname of the machine providing the service. The port parameter
indicates the port in network byte order on which the service accepts connections. The txtLen and txtRecord parame<hy>
ters hold the length and the TXT record of the service's primary TXT record. The context parameter points to the
value that was passed as context to the DNSServiceResolve() call.
The DNSServiceResolve function returns kDNSServiceErr_NoError on success. Otherwise, an error code defined
in <dns_sd.h> is returned to indicate an error has occurred. When an error is returned by DNSServiceResolve, the
callback function is not invoked and the DNSServiceRef argument is not initialized.
See attributes(5) for description of the following attributes:
tab() box; cw(2.75i) |cw(2.75i) lw(2.75i) |lw(2.75i) ATTRIBUTE TYPEATTRIBUTE VALUE _ Interface Stability<hy>
Committed _ MT-LevelSafe
DNSServiceBrowse(3DNS_SD), DNSServiceRefDeallocate(3DNS_SD), attributes(5)
