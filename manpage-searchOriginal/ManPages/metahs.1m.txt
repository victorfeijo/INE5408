<beginning of page>
metahs <-> manage hot spares and hot spare pools
/usr/sbin/metahs [-s setname] -a all component
/usr/sbin/metahs [-s setname] -a hot_spare_pool [component]
/usr/sbin/metahs [-s setname] -d hot_spare_pool [component]
/usr/sbin/metahs [-s setname] -d all component
/usr/sbin/metahs [-s setname] -e component
/usr/sbin/metahs [-s setname] -r hot_spare_pool component-old
/usr/sbin/metahs [-s setname] -r all component-old component-new
/usr/sbin/metahs [-s setname] -i [hot_spare_pool]...
The metahs command manages existing hot spares and hot spare pools. It is used to add, delete, enable, and replace
components (slices) in hot spare pools. Like the metainit command, the metahs command can also create an initial
hot spare pool. The metahs command does not replace a component of a metadevice. This function is performed by
the metareplace command.
Hot spares are always in one of three states: available, in-use, or broken. Available hot spares are running and ready
to accept data, but are not currently being written to or read from. In-use hot spares are currently being written to
and read from. Broken hot spares are out of service and should be repaired. The status of hot spares is displayed
when metahs is invoked with the -i option.
Solaris Volume Manager supports storage devices and logical volumes, including hot spares, greater than 1 terabyte
(TB) when Solaris 10 is running a 64-bit kernel.
If a system with large volumes or hot spares is rebooted under a 32-bit Solaris 10 kernel, the large volumes are visi<hy>
ble through metastat output, but they cannot be accessed, modified or deleted, and no new large volumes can be cre<hy>
ated. Any volumes or file systems on a large volume in this situation are also unavailable. If a system with large vol<hy>
umes is rebooted under a version of Solaris prior to Solaris 10, Solaris Volume Manager will not start. All large vol<hy>
umes must be removed before Solaris Volume Manager runs under another version of the Solaris Operating Environ<hy>
ment.
Root privileges are required for any of the following options except -i.
The following options are supported:
-a all component
Add component to all hot spare pools. all is not case sensitive.
-a hot_spare_pool [component]
Add the component to the specified hot_spare_pool. hot_spare_pool is created if it does not already exist.
-d all component
Delete component from all the hot spare pools. The component cannot be deleted if it is in the in-use state.
-d hot_spare_pool [component]
Delete hot_spare_pool, if the hot_spare_pool is both empty and not referenced by a metadevice. If component is
specified, it is deleted from the hot_spare_pool. Hot spares in the in-use state cannot be deleted.
-e component
Enable component to be available for use as a hot spare. The component can be enabled if it is in the broken state
and has been repaired.
<beginning of page>
-i [hot_spare_pool...]
Display the status of the specified hot_spare_pool or for all hot spare pools if one is not specified.
-r all component-old component-new
Replace component-old with component-new in all hot spare pools which have the component associated. Compo<hy>
nents cannot be replaced from any hot spare pool if the old hot spare is in the in-use state.
-r hot_spare_pool component-old component-new
Replace component-old with component-new in the specified hot_spare_pool. Components cannot be replaced from
a hot spare pool if the old hot spare is in the in-use state.
-s setname
Specify the name of the diskset on which metahs works. Using the -s option causes the command to perform its ad<hy>
ministrative function within the specified diskset. Without this option, the command performs its function on local
hot spare pools.
The following operands are supported:
component The logical name for the physical slice (partition) on a disk drive, such as /dev/dsk/c0t0d0s2.
hot_spare_pool Names for hot spare pools can be any legal file name that is composed of alphanumeric characters, a
dash ("-"), an underscore ("_"), or a period ("."). Names must begin with a letter. The words "all" and "none" are re<hy>
served and cannot be used.
Example 1 Adding a Hot Spare to a Hot Spare Pool
The following example adds a hot spare /dev/dsk/c0t0d0s7 to a hot spare pool mirror1_pool:
 # metahs -a mirror1_pool c0t0d0s7
When the hot spare is added to the pool, the existing order of the hot spares already in the pool is preserved. The
new hot spare is added at the end of the list of hot spares in the hot spare pool specified.
Example 2 Adding a Hot Spare to All Currently Defined Pools
This example adds a hot spare to the hot spare pools that are currently defined:
 # metahs -a all c0t0d0s7
The keyword all in this example specifies adding the hot spare, /dev/dsk/c0t0d0s7, to all the hot spare pools.
Example 3 Deleting a Hot Spare
This example deletes a hot spare, /dev/dsk/c0t0d0s7, from a hot spare pool, hsp003:
 # metahs -d hsp003 c0t0d0s7
When you delete a hot spare, the position of the remaining hot spares in the pool changes to reflect the new order.
For instance, if in this example /dev/dsk/c0t0d0s7 were the second of three hot spares, after deletion the third hot
<beginning of page>
spare would move to the second position.
Example 4 Replacing a Hot Spare
This example replaces a hot spare that was previously defined:
 # metahs -r hsp001 c0t1d0s0 c0t3d0s0
In this example, the hot spare /dev/dsk/c0t1d0s0 is replaced by /dev/dsk/c0t3d0s0. The order of the hot spares does
not change.
The following exit values are returned:
0 Successful completion.
>0 An error occurred.
See attributes(5) for descriptions of the following attributes:
tab() box; cw(2.75i) |cw(2.75i) lw(2.75i) |lw(2.75i) ATTRIBUTE TYPEATTRIBUTE VALUE _ AvailabilitySUN<hy>
Wmdu _ Interface StabilityStable
mdmonitord(1M), metaclear(1M), metadb(1M), metadetach(1M), metainit(1M), metaoffline(1M), metaon<hy>
line(1M), metaparam(1M), metarecover(1M), metarename(1M), metareplace(1M), metaroot(1M),
metaset(1M), metassist(1M), metastat(1M), metasync(1M), metattach(1M), md.tab(4), md.cf(4), mddb.cf(4),
md.tab(4), attributes(5), md(7D)

Do not create large (>1 TB) volumes if you expect to run the Solaris Operating Environment with a 32-bit kernel or
if you expect to use a version of the Solaris Operating Environment prior to Solaris 10.
