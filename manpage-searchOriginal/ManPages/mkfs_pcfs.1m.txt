<beginning of page>
mkfs_pcfs <-> construct a FAT file system
mkfs -F pcfs [generic_options] [-o FSType_specific_options] raw_device_file
The pcfs-specific module of mkfs constructs a File Allocation Table (FAT) on removable media (diskette, JAZ disk,
ZIP disk, PCMCIA card), a hard disk, or a file (see NOTES). FATs are the standard MS-DOS and Windows file sys<hy>
tem format. Note that you can use fdformat(1) to construct a FAT file system only on a diskette or PCMCIA card.
mkfs for pcfs determines an appropriate FAT size for the medium, then it installs an initial boot sector and an empty
FAT. A sector size of 512 bytes is used. mkfs for pcfs can also install the initial file in the file system (see the pcfs-
specific -o i option). This first file can optionally be marked as read-only, system, and/or hidden.
If you want to construct a FAT with mkfs for pcfs on a medium that is not formatted, you must first perform a low-
level format on the medium with fdformat(1) or format(1M). Non-diskette media must also be partitioned with the
fdisk(1M) utility. Note that all existing data on the diskette or disk partition, if any, is destroyed when a new FAT is
constructed.
generic_options are supported by the generic mkfs command. See mkfs(1M) for a description of these options.
raw_device_file indicates the device on which to write unless the -o N option has been specified, or if the -V or -m
generic options are passed from the generic mkfs module.
See mkfs(1M) for the list of supported generic options.
The following options are supported:
-o FSType_specific_options Specify pcfs file system-specific options in a comma-separated list with no intervening
spaces. If invalid options are specified, a warning message is printed and the invalid options are ignored.
b=label Label the media with volume label. The volume label is restricted to 11 uppercase characters.
B=filename Install filename as the boot loader in the file system's boot sector. If you don't specify a boot loader, an
MS-DOS boot loader is installed. The MS-DOS boot loader requires specific MS-DOS system files to make the
diskette bootable. See NOTES for more information.
fat=n The size of a FAT entry. Currently, 12, 16, and 32 are valid values. The default is 12 for diskettes, 16 for larger
media.
h Mark the first file installed as a hidden file. The -i option must also be specified.
hidden=n Set the number of hidden sectors to n. This is the number of sectors on the physical disk preceding the
start of the volume (which is the boot sector itself). This defaults to 0 for diskettes or a computed valued (based on
the fdisk table) for disks. This option may be used only in conjunction with the nofdisk option.
i=filename Install filename as the initial file in the new file system. The initial file's contents are guaranteed to occu<hy>
py consecutive clusters at the start of the files area. When creating bootable media, a boot program should be speci<hy>
fied as the initial file.
nofdisk Do not attempt to find an fdisk table on the medium. Instead rely on the size option for determining the par<hy>
tition size. By default, the created FAT is 16 bits and begins at the first sector of the device. This origination sector
can be modified with the hidden option (-h).
nsect=n The number of sectors per track on the disk. If not specified, the value is determined by using a dkio(7I)
ioctl to get the disk geometry, or (for diskette) from the results of an FDIOGCHAR ioctl.
ntrack=n The number of tracks per cylinder on the disk. If not specified, the value is determined by using a dkio(7I)
ioctl to get the disk geometry, or (for diskette) from the results of an FDIOGCHAR ioctl.
<beginning of page>
N No execution mode. Print normal output, but do not actually write the file system to the medium. This is most use<hy>
ful when used in conjunction with the verbose option.
r Mark the first file installed as read-only. The -i option must also be specified.
reserve=n Set the number of reserved sectors to n. This is the number of sectors in the volume, preceding the start of
the first FAT, including the boot sector. The value should always be at least 1, and the default value is exactly 1.
s Mark the first file installed as a system file. The -i option must also be specified.
size=n The number of sectors in the file system. If not specified, the value is determined from the size of the parti<hy>
tion given in the fdisk table or (for diskette) by way of computation using the FDIOGCHAR ioctl.
spc=n The size of the allocation unit for space within the file system, expressed as a number of sectors. The default
value depends on the FAT entry size and the size of the file system.
v Verbose output. Describe, in detail, operations being performed.
raw_device_file The device on which to build the FAT. The device name for a diskette must be specified as
/dev/rdiskette0 for the first diskette drive, or /dev/rdiskette1 for a second diskette drive. For non-diskette media, a
disk device name must be qualified with a suffix to indicate the proper partition. For example, in the name /dev/rd<hy>
sk/c0t0d0p0:c, the :c suffix indicates that the first partition on the disk should receive the new FAT.
For a file, raw_device_file is the block device name returned by lofiadm(1M).
The media in these examples must be formatted before running mkfs for pcfs. See DESCRIPTION for more details.
Example 1 Creating a FAT File System on a Diskette
The following command creates a FAT file system on a diskette:
 mkfs -F pcfs /dev/rdiskette
Example 2 Creating a FAT File System on a Disk
The following command creates a FAT file system on the second fdisk partition of a disk attached to an x86 based
system:
 mkfs -F pcfs /dev/rdsk/c0d0p0:d
Example 3 Creating a FAT File System on a ZIP Disk
The following command creates a FAT file system on a ZIP disk located on a SPARC based system:
 mkfs -F pcfs /dev/rdsk/c0t4d0s2:c
Example 4 Creating a FAT File System on a JAZ Disk
The following command creates a FAT file system on a JAZ disk located on a SPARC based system and overrides
the sectors/track and tracks/cylinder values obtained from the device's controller:
<beginning of page>
 mkfs -F pcfs -o nsect=32,ntrack=64 /dev/rdsk/c0t3d0s2:c
See attributes(5) for descriptions of the following attributes:
tab() box; cw(2.75i) |cw(2.75i) lw(2.75i) |lw(2.75i) ATTRIBUTE TYPEATTRIBUTE VALUE _ AvailabilitySUN<hy>
Wesu _ Interface StabilityStable
fdformat(1), fdisk(1M), format(1M), lofiadm(1M), mkfs(1M), attributes(5), fd(7D), dkio(7I), fdio(7I)
The default MS-DOS boot loader, which is installed by default if -o B is not specified, requires specific MS-DOS
system files to make the diskette bootable. These MS-DOS files are not installed when you format a diskette with
mkfs for pcfs, which makes a diskette formatted this way not bootable. Trying to boot from it on an x86 based sys<hy>
tem will result in the following message:
 Non-System disk or disk error
 Replace and strike any key when ready
You must format a diskette with the DOS format command to install the specific MS-DOS system files required by
the default boot loader.
You can use lofiadm to create a file that appears to a mkfs command (for example, mkfs_pcfs or mkfs_ufs) as a raw
device. You can then use a mkfs command to create a file system on that device. See lofiadm(1M) for examples of
creating a UFS and a PC (FAT) file system on a device created by lofiadm.
