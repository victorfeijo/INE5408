<beginning of page>
dial, undial <-> establish an outgoing terminal line connection
cc [ flag... ] file... -lnsl [ library... ]
#include <dial.h>
int dial(CALL call);
void undial(int fd);
The dial() function returns a file-descriptor for a terminal line open for read/write. The argument to dial() is a
CALL structure (defined in the header <dial.h>).
When finished with the terminal line, the calling program must invoke undial() to release the semaphore that has
been set during the allocation of the terminal device.
CALL is defined in the header <dial.h> and has the following members:
 struct termio *attr;  /* pointer to termio attribute struct */
 int baud;  /* transmission data rate */
 int speed;  /* 212A modem: low=300, high=1200 */
 char *line;  /* device name for out-going line */
 char *telno;  /* pointer to tel-no digits string */
 int modem; /* specify modem control for direct lines */
 char *device; /* unused */
 int dev_len; /* unused */
The CALL element speed is intended only for use with an outgoing dialed call, in which case its value should be
the desired transmission baud rate. The CALL element baud is no longer used.
If the desired terminal line is a direct line, a string pointer to its device-name should be placed in the line element in
the CALL structure. Legal values for such terminal device names are kept in the Devices file. In this case, the value
of the baud element should be set to -1. This value will cause dial to determine the correct value from the <De<hy>
vices> file.
The telno element is for a pointer to a character string representing the telephone number to be dialed. Such num<hy>
bers may consist only of these characters:
tab(); lw(2.75i) lw(2.75i) lw(2.75i) lw(2.75i) 0-9dial 0-9 *dail * #dail # =wait for secondary dial tone -delay for ap<hy>
proximately 4 seconds
The CALL element modem is used to specify modem control for direct lines. This element should be non-zero if
modem control is required. The CALL element attr is a pointer to a termio structure, as defined in the header
<termio.h>. A NULL value for this pointer element may be passed to the dial function, but if such a structure is in<hy>
cluded, the elements specified in it will be set for the outgoing terminal line before the connection is established.
This setting is often important for certain attributes such as parity and baud-rate.
The CALL elements device and dev_len are no longer used. They are retained in the CALL structure for compati<hy>
bility reasons.
On failure, a negative value indicating the reason for the failure will be returned. Mnemonics for these negative in<hy>
dices as listed here are defined in the header <dial.h>.
 INTRPT <mi>1 /* interrupt occurred */
 D_HUNG <mi>2 /* dialer hung (no return from write) */
 NO_ANS <mi>3 /* no answer within 10 seconds */
 ILL_BD <mi>4 /* illegal baud-rate */
 A_PROB <mi>5 /* acu problem (open() failure) */
 L_PROB <mi>6 /* line problem (open() failure) */
 NO_Ldv <mi>7 /* can't open Devices file */
 DV_NT_A <mi>8 /* requested device not available */
 DV_NT_K <mi>9 /* requested device not known */
 NO_BD_A <mi>10 /* no device available at requested baud */
<beginning of page>
 NO_BD_K <mi>11 /* no device known at requested baud */
 DV_NT_E <mi>12 /* requested speed does not match */
 BAD_SYS <mi>13 /* system not in Systems file*/
/etc/uucp/Devices
/etc/uucp/Systems
/var/spool/uucp/LCK..tty-device
See attributes(5) for descriptions of the following attributes:
tab() box; cw(2.75i) |cw(2.75i) lw(2.75i) |lw(2.75i) ATTRIBUTE TYPEATTRIBUTE VALUE _ MT-LevelUnsafe
uucp(1C), alarm(2), read(2), write(2), attributes(5), termio(7I)
Including the header <dial.h> automatically includes the header <termio.h>. An alarm(2) system call for 3600 sec<hy>
onds is made (and caught) within the dial module for the purpose of ``touching'' the LCK.. file and constitutes the
device allocation semaphore for the terminal device. Otherwise, uucp(1C) may simply delete the LCK.. entry on its
90-minute clean-up rounds. The alarm may go off while the user program is in a read(2) or write(2) function, caus<hy>
ing an apparent error return. If the user program expects to be around for an hour or more, error returns from read()s
should be checked for (errno==EINTR), and the read() possibly reissued.
This interface is unsafe in multithreaded applications. Unsafe interfaces should be called only from the main thread.
