<beginning of page>
encrypt <-> encoding function
#include <crypt.h>
void encrypt(char block[64], int edflag);
#include <unistd.h>
void encrypt(char block[64], int edflag);
The encrypt() function provides (rather primitive) access to the hashing algorithm employed by the crypt(3C) func<hy>
tion. The key generated by setkey(3C) is used to encrypt the string block with encrypt().
The block argument to encrypt() is an array of length 64 bytes containing only the bytes with numerical value of 0
and 1. The array is modified in place to a similar array using the key set by setkey(3C). If edflag is 0, the argument is
encoded. If edflag is 1, the argument may be decoded (see the USAGE section below); if the argument is not decod<hy>
ed, errno will be set to ENOSYS.
The encrypt() function returns no value.
The encrypt() function will fail if:
ENOSYS The functionality is not supported on this implementation.
In some environments, decoding may not be implemented. This is related to U.S. Government restrictions on en<hy>
cryption and decryption routines: the DES decryption algorithm cannot be exported outside the U.S.A. Historical
practice has been to ship a different version of the encryption library without the decryption feature in the routines
supplied. Thus the exported version of encrypt() does encoding but not decoding.
Because encrypt() does not return a value, applications wishing to check for errors should set errno to 0, call en<hy>
crypt(), then test errno and, if it is non-zero, assume an error has occurred.
See attributes(5) for descriptions of the following attributes:
tab() box; cw(2.75i) |cw(2.75i) lw(2.75i) |lw(2.75i) ATTRIBUTE TYPEATTRIBUTE VALUE _ Interface Stability<hy>
Standard _ MT-LevelSafe
crypt(3C), setkey(3C), attributes(5)
