<beginning of page>
mlib_VectorMulShift_U8_U8_Mod, mlib_VectorMulShift_U8_U8_Sat, mlib_VectorMulShift_U8C_U8C_Mod,
mlib_VectorMulShift_U8C_U8C_Sat, mlib_VectorMulShift_S8_S8_Mod, mlib_VectorMulShift_S8_S8_Sat,
mlib_VectorMulShift_S8C_S8C_Mod, mlib_VectorMulShift_S8C_S8C_Sat, mlib_VectorMulShift_S16_S16_Mod,
mlib_VectorMulShift_S16_S16_Sat, mlib_VectorMulShift_S16C_S16C_Mod, mlib_VectorMul<hy>
Shift_S16C_S16C_Sat, mlib_VectorMulShift_S32_S32_Mod, mlib_VectorMulShift_S32_S32_Sat, mlib_Vector<hy>
MulShift_S32C_S32C_Mod, mlib_VectorMulShift_S32C_S32C_Sat <-> vector multiplication with shifting
cc [ flag... ] file... -lmlib [ library... ]
#include <mlib.h>
mlib_status mlib_VectorMulShift_U8_U8_Mod(mlib_u8 *z,
 const mlib_u8 *x, const mlib_u8 *y, mlib_s32 n, mlib_s32 shift);
mlib_status mlib_VectorMulShift_U8_U8_Sat(mlib_u8 *z,
 const mlib_u8 *x, const mlib_u8 *y, mlib_s32 n, mlib_s32 shift);
mlib_status mlib_VectorMulShift_U8C_U8C_Mod(mlib_u8 *z,
 const mlib_u8 *x, const mlib_u8 *y, mlib_s32 n, mlib_s32 shift);
mlib_status mlib_VectorMulShift_U8C_U8C_Sat(mlib_u8 *z,
 const mlib_u8 *x, const mlib_u8 *y, mlib_s32 n, mlib_s32 shift);
mlib_status mlib_VectorMulShift_S8_S8_Mod(mlib_s8 *z,
 const mlib_s8 *x, const mlib_s8 *y, mlib_s32 n, mlib_s32 shift);
mlib_status mlib_VectorMulShift_S8_S8_Sat(mlib_s8 *z,
 const mlib_s8 *x, const mlib_s8 *y, mlib_s32 n, mlib_s32 shift);
mlib_status mlib_VectorMulShift_S8C_S8C_Mod(mlib_s8 *z,
 const mlib_s8 *x, const mlib_s8 *y, mlib_s32 n, mlib_s32 shift);
mlib_status mlib_VectorMulShift_S8C_S8C_Sat(mlib_s8 *z,
 const mlib_s8 *x, const mlib_s8 *y, mlib_s32 n, mlib_s32 shift);
mlib_status mlib_VectorMulShift_S16_S16_Mod(mlib_s16 *z,
 const mlib_s16 *x, const mlib_s16 *y, mlib_s32 n, mlib_s32 shift);
mlib_status mlib_VectorMulShift_S16_S16_Sat(mlib_s16 *z,
 const mlib_s16 *x, const mlib_s16 *y, mlib_s32 n, mlib_s32 shift);
mlib_status mlib_VectorMulShift_S16C_S16C_Mod(mlib_s16 *z,
 const mlib_s16 *x, const mlib_s16 *y, mlib_s32 n, mlib_s32 shift);
mlib_status mlib_VectorMulShift_S16C_S16C_Sat(mlib_s16 *z,
 const mlib_s16 *x, const mlib_s16 *y, mlib_s32 n, mlib_s32 shift);
mlib_status mlib_VectorMulShift_S32_S32_Mod(mlib_s32 *z,
 const mlib_s32 *x, const mlib_s32 *y, mlib_s32 n, mlib_s32 shift);
mlib_status mlib_VectorMulShift_S32_S32_Sat(mlib_s32 *z,
 const mlib_s32 *x, const mlib_s32 *y, mlib_s32 n, mlib_s32 shift);
mlib_status mlib_VectorMulShift_S32C_S32C_Mod(mlib_s32 *z,
 const mlib_s32 *x, const mlib_s32 *y, mlib_s32 n, mlib_s32 shift);
mlib_status mlib_VectorMulShift_S32C_S32C_Sat(mlib_s32 *z,
 const mlib_s32 *x, const mlib_s32 *y, mlib_s32 n, mlib_s32 shift);
Each of these functions performs a multiplication of two vectors, shifts the result, and puts it into a third vector.
For real data, the following equation is used:
 z[i] = x[i] * y[i] * 2**(-shift)
where i = 0, 1, ..., (n - 1).
<beginning of page>
For complex data, the following equation is used:
 z[2*i] = (x[2*i]*y[2*i] - x[2*i + 1]*y[2*i + 1]) * 2**(-shift)
 z[2*i + 1] = (x[2*i]*y[2*i + 1] + x[2*i + 1]*y[2*i]) * 2**(-shift)
where i = 0, 1, ..., (n - 1).
Each of the functions takes the following arguments:
z Pointer to the first element of the result vector.
x Pointer to the first element of the first source vector.
y Pointer to the first element of the second source vector.
n Number of elements in each vector.
shift Right shifting factor. The ranges of valid shift are:
 1 <<=> shift <<=> 8 for U8, S8, U8C, S8C types
 1 <<=> shift <<=> 16 for S16, S16C types
 1 <<=> shift <<=> 31 for S32, S32C types
Each of the functions returns MLIB_SUCCESS if successful. Otherwise it returns MLIB_FAILURE.
See attributes(5) for descriptions of the following attributes:
tab() box; cw(2.75i) |cw(2.75i) lw(2.75i) |lw(2.75i) ATTRIBUTE TYPEATTRIBUTE VALUE _ Interface Stability<hy>
Committed _ MT-LevelMT-Safe
mlib_VectorMulShift_U8_Mod(3MLIB), attributes(5)
