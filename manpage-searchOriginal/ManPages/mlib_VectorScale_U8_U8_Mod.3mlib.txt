<beginning of page>
mlib_VectorScale_U8_U8_Mod, mlib_VectorScale_U8_U8_Sat, mlib_VectorScale_U8C_U8C_Mod, mlib_Vec<hy>
torScale_U8C_U8C_Sat, mlib_VectorScale_S8_S8_Mod, mlib_VectorScale_S8_S8_Sat, mlib_Vec<hy>
torScale_S8C_S8C_Mod, mlib_VectorScale_S8C_S8C_Sat, mlib_VectorScale_S16_U8_Mod, mlib_Vec<hy>
torScale_S16_U8_Sat, mlib_VectorScale_S16_S8_Mod, mlib_VectorScale_S16_S8_Sat, mlib_Vec<hy>
torScale_S16_S16_Mod, mlib_VectorScale_S16_S16_Sat, mlib_VectorScale_S16C_U8C_Mod, mlib_Vec<hy>
torScale_S16C_U8C_Sat, mlib_VectorScale_S16C_S8C_Mod, mlib_VectorScale_S16C_S8C_Sat, mlib_Vec<hy>
torScale_S16C_S16C_Mod, mlib_VectorScale_S16C_S16C_Sat, mlib_VectorScale_S32_S16_Mod, mlib_Vec<hy>
torScale_S32_S16_Sat, mlib_VectorScale_S32_S32_Mod, mlib_VectorScale_S32_S32_Sat, mlib_Vec<hy>
torScale_S32C_S16C_Mod, mlib_VectorScale_S32C_S16C_Sat, mlib_VectorScale_S32C_S32C_Mod, mlib_Vec<hy>
torScale_S32C_S32C_Sat <-> vector linear scaling
cc [ flag... ] file... -lmlib [ library... ]
#include <mlib.h>
mlib_status mlib_VectorScale_U8_U8_Mod(mlib_u8 *z, const mlib_u8 *x,
 const mlib_u8 *a, const mlib_u8 *b, mlib_s32 n);
mlib_status mlib_VectorScale_U8_U8_Sat(mlib_u8 *z, const mlib_u8 *x,
 const mlib_u8 *a, const mlib_u8 *b, mlib_s32 n);
mlib_status mlib_VectorScale_U8C_U8C_Mod(mlib_u8 *z, const mlib_u8 *x,
 const mlib_u8 *a, const mlib_u8 *b, mlib_s32 n);
mlib_status mlib_VectorScale_U8C_U8C_Sat(mlib_u8 *z, const mlib_u8 *x,
 const mlib_u8 *a, const mlib_u8 *b, mlib_s32 n);
mlib_status mlib_VectorScale_S8_S8_Mod(mlib_s8 *z, const mlib_s8 *x,
 const mlib_s8 *a, const mlib_s8 *b, mlib_s32 n);
mlib_status mlib_VectorScale_S8_S8_Sat(mlib_s8 *z, const mlib_s8 *x,
 const mlib_s8 *a, const mlib_s8 *b, mlib_s32 n);
mlib_status mlib_VectorScale_S8C_S8C_Mod(mlib_s8 *z, const mlib_s8 *x,
 const mlib_s8 *a, const mlib_s8 *b, mlib_s32 n);
mlib_status mlib_VectorScale_S8C_S8C_Sat(mlib_s8 *z, const mlib_s8 *x,
 const mlib_s8 *a, const mlib_s8 *b, mlib_s32 n);
mlib_status mlib_VectorScale_S16_U8_Mod(mlib_s16 *z, const mlib_u8 *x,
 const mlib_u8 *a, const mlib_u8 *b, mlib_s32 n);
mlib_status mlib_VectorScale_S16_U8_Sat(mlib_s16 *z, const mlib_u8 *x,
 const mlib_u8 *a, const mlib_u8 *b, mlib_s32 n);
mlib_status mlib_VectorScale_S16_S8_Mod(mlib_s16 *z, const mlib_s8 *x,
 const mlib_s8 *a, const mlib_s8 *b, mlib_s32 n);
mlib_status mlib_VectorScale_S16_S8_Sat(mlib_s16 *z, const mlib_s8 *x,
 const mlib_s8 *a, const mlib_s8 *b, mlib_s32 n);
mlib_status mlib_VectorScale_S16_S16_Mod(mlib_s16 *z, const mlib_s16 *x,
 const mlib_s16 *a, const mlib_s16 *b, mlib_s32 n);
mlib_status mlib_VectorScale_S16_S16_Sat(mlib_s16 *z, const mlib_s16 *x,
 const mlib_s16 *a, const mlib_s16 *b, mlib_s32 n);
mlib_status mlib_VectorScale_S16C_U8C_Mod(mlib_s16 *z, const mlib_u8 *x,
 const mlib_u8 *a, const mlib_u8 *b, mlib_s32 n);
mlib_status mlib_VectorScale_S16C_U8C_Sat(mlib_s16 *z, const mlib_u8 *x,
 const mlib_u8 *a, const mlib_u8 *b, mlib_s32 n);
mlib_status mlib_VectorScale_S16C_S8C_Mod(mlib_s16 *z, const mlib_s8 *x,
 const mlib_s8 *a, const mlib_s8 *b, mlib_s32 n);
mlib_status mlib_VectorScale_S16C_S8C_Sat(mlib_s16 *z, const mlib_s8 *x,
 const mlib_s8 *a, const mlib_s8 *b, mlib_s32 n);
<beginning of page>
mlib_status mlib_VectorScale_S16C_S16C_Mod(mlib_s16 *z, const mlib_s16 *x,
 const mlib_s16 *a, const mlib_s16 *b, mlib_s32 n);
mlib_status mlib_VectorScale_S16C_S16C_Sat(mlib_s16 *z, const mlib_s16 *x,
 const mlib_s16 *a, const mlib_s16 *b, mlib_s32 n);
mlib_status mlib_VectorScale_S32_S16_Mod(mlib_s32 *z, const mlib_s16 *x,
 const mlib_s16 *a, const mlib_s16 *b, mlib_s32 n);
mlib_status mlib_VectorScale_S32_S16_Sat(mlib_s32 *z, const mlib_s16 *x,
 const mlib_s16 *a, const mlib_s16 *b, mlib_s32 n);
mlib_status mlib_VectorScale_S32_S32_Mod(mlib_s32 *z, const mlib_s32 *x,
 const mlib_s32 *a, const mlib_s32 *b, mlib_s32 n);
mlib_status mlib_VectorScale_S32_S32_Sat(mlib_s32 *z, const mlib_s32 *x,
 const mlib_s32 *a, const mlib_s32 *b, mlib_s32 n);
mlib_status mlib_VectorScale_S32C_S16C_Mod(mlib_s32 *z, const mlib_s16 *x,
 const mlib_s16 *a, const mlib_s16 *b, mlib_s32 n);
mlib_status mlib_VectorScale_S32C_S16C_Sat(mlib_s32 *z, const mlib_s16 *x,
 const mlib_s16 *a, const mlib_s16 *b, mlib_s32 n);
mlib_status mlib_VectorScale_S32C_S32C_Mod(mlib_s32 *z, const mlib_s32 *x,
 const mlib_s32 *a, const mlib_s32 *b, mlib_s32 n);
mlib_status mlib_VectorScale_S32C_S32C_Sat(mlib_s32 *z, const mlib_s32 *x,
 const mlib_s32 *a, const mlib_s32 *b, mlib_s32 n);
Each of these functions scales a vector by multiplying by a scalar and adding an offset.
For real data, the following equation is used:
 z[i] = a[0]*x[i] + b[0]
where i = 0, 1, ..., (n - 1).
For complex data, the following equation is used:
 z[2*i] = a[0]*x[2*i] - a[1]*x[2*i + 1] + b[0]
 z[2*i + 1] = a[1]*x[2*i] + a[0]*x[2*i + 1] + b[1]
where i = 0, 1, ..., (n - 1).
Each of the functions takes the following arguments:
z Pointer to the first element of the destination vector.
x Pointer to the first element of the source vector.
a Pointer to the source scaling factor. When the function is used with complex data types, a[0] contains the real part
of the scaling factor, and a[1] contains the imaginary part of the scaling factor.
b Pointer to the source offset. When the function is used with complex data types, b[0] contains the real part of the
offset, and b[1] contains the imaginary part of the offset.
<beginning of page>
n Number of elements in the vectors.
Each of the functions returns MLIB_SUCCESS if successful. Otherwise it returns MLIB_FAILURE.
See attributes(5) for descriptions of the following attributes:
tab() box; cw(2.75i) |cw(2.75i) lw(2.75i) |lw(2.75i) ATTRIBUTE TYPEATTRIBUTE VALUE _ Interface Stability<hy>
Committed _ MT-LevelMT-Safe
mlib_VectorScale_U8_Mod(3MLIB), attributes(5)
