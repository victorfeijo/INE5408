<beginning of page>
mlib_VectorSub_U8_Mod, mlib_VectorSub_U8_Sat, mlib_VectorSub_U8C_Mod, mlib_VectorSub_U8C_Sat,
mlib_VectorSub_S8_Mod, mlib_VectorSub_S8_Sat, mlib_VectorSub_S8C_Mod, mlib_VectorSub_S8C_Sat,
mlib_VectorSub_S16_Mod, mlib_VectorSub_S16_Sat, mlib_VectorSub_S16C_Mod, mlib_VectorSub_S16C_Sat,
mlib_VectorSub_S32_Mod, mlib_VectorSub_S32_Sat, mlib_VectorSub_S32C_Mod, mlib_VectorSub_S32C_Sat <->
vector subtraction, in place
cc [ flag... ] file... -lmlib [ library... ]
#include <mlib.h>
mlib_status mlib_VectorSub_U8_Mod(mlib_u8 *xz,
 const mlib_u8 *y, mlib_s32 n);
mlib_status mlib_VectorSub_U8_Sat(mlib_u8 *xz,
 const mlib_u8 *y, mlib_s32 n);
mlib_status mlib_VectorSub_U8C_Mod(mlib_u8 *xz,
 const mlib_u8 *y, mlib_s32 n);
mlib_status mlib_VectorSub_U8C_Sat(mlib_u8 *xz,
 const mlib_u8 *y, mlib_s32 n);
mlib_status mlib_VectorSub_S8_Mod(mlib_s8 *xz,
 const mlib_s8 *y, mlib_s32 n);
mlib_status mlib_VectorSub_S8_Sat(mlib_s8 *xz,
 const mlib_s8 *y, mlib_s32 n);
mlib_status mlib_VectorSub_S8C_Mod(mlib_s8 *xz,
 const mlib_s8 *y, mlib_s32 n);
mlib_status mlib_VectorSub_S8C_Sat(mlib_s8 *xz,
 const mlib_s8 *y, mlib_s32 n);
mlib_status mlib_VectorSub_S16_Mod(mlib_s16 *xz,
 const mlib_s16 *y, mlib_s32 n);
mlib_status mlib_VectorSub_S16_Sat(mlib_s16 *xz,
 const mlib_s16 *y, mlib_s32 n);
mlib_status mlib_VectorSub_S16C_Mod(mlib_s16 *xz,
 const mlib_s16 *y, mlib_s32 n);
mlib_status mlib_VectorSub_S16C_Sat(mlib_s16 *xz,
 const mlib_s16 *y, mlib_s32 n);
mlib_status mlib_VectorSub_S32_Mod(mlib_s32 *xz,
 const mlib_s32 *y, mlib_s32 n);
mlib_status mlib_VectorSub_S32_Sat(mlib_s32 *xz,
 const mlib_s32 *y, mlib_s32 n);
mlib_status mlib_VectorSub_S32C_Mod(mlib_s32 *xz,
 const mlib_s32 *y, mlib_s32 n);
mlib_status mlib_VectorSub_S32C_Sat(mlib_s32 *xz,
 const mlib_s32 *y, mlib_s32 n);
Each of these functions performs an in-place subtraction of a vector from another vector.
It uses the following equation:
 xz[i] = xz[i] - y[i]
where i = 0, 1, ..., (n - 1) for real data; i = 0, 1, ..., (2*n - 1) for complex data.
<beginning of page>
Each of the functions takes the following arguments:
xz Pointer to the first element of the first source and destination vector.
y Pointer to the first element of the second source vector.
n Number of elements in the vectors.
Each of the functions returns MLIB_SUCCESS if successful. Otherwise it returns MLIB_FAILURE.
See attributes(5) for descriptions of the following attributes:
tab() box; cw(2.75i) |cw(2.75i) lw(2.75i) |lw(2.75i) ATTRIBUTE TYPEATTRIBUTE VALUE _ Interface Stability<hy>
Committed _ MT-LevelMT-Safe
mlib_VectorSub_U8_U8_Mod(3MLIB), attributes(5)
