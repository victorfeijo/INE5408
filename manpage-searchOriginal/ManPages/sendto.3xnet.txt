<beginning of page>
sendto <-> send a message on a socket
cc [ flag... ] file... -lxnet [ library ... ]
#include <sys/socket.h>
ssize_t sendto(int socket, const void *message, size_t length, int flags,
 const struct sockaddr *dest_addr, socklen_t dest_len);
The sendto() function sends a message through a connection-mode or connectionless-mode socket. If the socket is
connectionless-mode, the message will be sent to the address specified by dest_addr. If the socket is connection-
mode, dest_addr is ignored.
If the socket protocol supports broadcast and the specified address is a broadcast address for the socket protocol,
sendto() will fail if the SO_BROADCAST option is not set for the socket.
The dest_addr argument specifies the address of the target. The length argument specifies the length of the message.
Successful completion of a call to sendto() does not guarantee delivery of the message. A return value of <mi>1 indi<hy>
cates only locally-detected errors.
If space is not available at the sending socket to hold the message to be transmitted and the socket file descriptor
does not have O_NONBLOCK set, sendto() blocks until space is available. If space is not available at the sending
socket to hold the message to be transmitted and the socket file descriptor does have O_NONBLOCK set, sendto()
will fail.
The socket in use may require the process to have appropriate privileges to use the sendto() function.
The function takes the following arguments:
socket Specifies the socket file descriptor.
message Points to a buffer containing the message to be sent.
length Specifies the size of the message in bytes.
flags Specifies the type of message transmission. Values of this argument are formed by logically OR'ing zero or
more of the following flags:
MSG_EOR Terminates a record (if supported by the protocol)
MSG_OOB Sends out-of-band data on sockets that support out-of-band data. The significance and semantics of out-
of-band data are protocol-specific.
dest_addr Points to a sockaddr structure containing the destination address. The length and format of the address
depend on the address family of the socket.
dest_len Specifies the length of the sockaddr structure pointed to by the dest_addr argument.
The select(3C) and poll(2) functions can be used to determine when it is possible to send more data.
Upon successful completion, sendto() returns the number of bytes sent. Otherwise, -1 is returned and errno is set to
indicate the error.
The sendto() function will fail if:
EAFNOSUPPORT Addresses in the specified address family cannot be used with this socket.
<beginning of page>
EAGAIN
EWOULDBLOCK The socket's file descriptor is marked O_NONBLOCK and the requested operation would
block.
EBADF The socket argument is not a valid file descriptor.
ECONNRESET A connection was forcibly closed by a peer.
EFAULT The message or destaddr parameter cannot be accessed.
EINTR A signal interrupted sendto() before any data was transmitted.
EMSGSIZE The message is too large to be sent all at once, as the socket requires.
ENOTCONN The socket is connection-mode but is not connected.
ENOTSOCK The socket argument does not refer to a socket.
EOPNOTSUPP The socket argument is associated with a socket that does not support one or more of the values set
in flags.
EPIPE The socket is shut down for writing, or the socket is connection-mode and is no longer connected. In the lat<hy>
ter case, and if the socket is of type SOCK_STREAM, the SIGPIPE signal is generated to the calling thread.
If the address family of the socket is AF_UNIX, then sendto() will fail if:
EIO An I/O error occurred while reading from or writing to the file system.
ELOOP Too many symbolic links were encountered in translating the pathname in the socket address.
ENAMETOOLONG A component of a pathname exceeded NAME_MAX characters, or an entire pathname exceed<hy>
ed PATH_MAX characters.
ENOENT A component of the pathname does not name an existing file or the pathname is an empty string.
ENOTDIR A component of the path prefix of the pathname in the socket address is not a directory.
The sendto() function may fail if:
EACCES Search permission is denied for a component of the path prefix; or write access to the named socket is de<hy>
nied.
EDESTADDRREQ The socket is not connection-mode and does not have its peer address set, and no destination
address was specified.
EHOSTUNREACH The destination host cannot be reached (probably because the host is down or a remote router
cannot reach it).
<beginning of page>
EINVAL The dest_len argument is not a valid length for the address family.
EIO An I/O error occurred while reading from or writing to the file system.
EISCONN A destination address was specified and the socket is already connected.
ENETDOWN The local interface used to reach the destination is down.
ENETUNREACH No route to the network is present.
ENOBUFS Insufficient resources were available in the system to perform the operation.
ENOMEM Insufficient memory was available to fulfill the request.
ENOSR There were insufficient STREAMS resources available for the operation to complete.
If the address family of the socket is AF_UNIX, then sendto() may fail if:
ENAMETOOLONG Pathname resolution of a symbolic link produced an intermediate result whose length exceeds
PATH_MAX.
See attributes(5) for descriptions of the following attributes:
tab() box; cw(2.75i) |cw(2.75i) lw(2.75i) |lw(2.75i) ATTRIBUTE TYPEATTRIBUTE VALUE _ Interface Stability<hy>
Standard _ MT-LevelMT-Safe
poll(2), getsockopt(3XNET), recv(3XNET), recvfrom(3XNET), recvmsg(3XNET), select(3C), send(3XNET),
sendmsg(3XNET), setsockopt(3XNET), shutdown(3XNET), socket(3XNET), attributes(5), standards(5)
