<beginning of page>
ddi_intr_hilevel <-> indicate interrupt handler type
#include <sys/ddi.h>
#include <sys/sunddi.h>
int ddi_intr_hilevel(dev_info_t *dip, uint_t inumber);
Solaris DDI specific (Solaris DDI). This interface is obsolete. Use the new interrupt interfaces referenced in In<hy>
tro(9F). Refer to Writing Device Drivers for more information.
dip Pointer to dev_info structure.
inumber Interrupt number.
The ddi_intr_hilevel() function returns non-zero if the specified interrupt is a "high level" interrupt.
High level interrupts must be handled without using system services that manipulate thread or process states, be<hy>
cause these interrupts are not blocked by the scheduler.
In addition, high level interrupt handlers must take care to do a minimum of work because they are not preemptable.
A typical high level interrupt handler would put data into a circular buffer and schedule a soft interrupt by calling
ddi_trigger_softintr(). The circular buffer could be protected by using a mutex that was properly initialized for the
interrupt handler.
The ddi_intr_hilevel() function can be used before calling ddi_add_intr() to decide which type of interrupt handler
should be used. Most device drivers are designed with the knowledge that the devices they support will always gen<hy>
erate low level interrupts, however some devices, for example those using SBus or VME bus level 6 or 7 interrupts
must use this test because on some machines those interrupts are high level (above the scheduler level) and on other
machines they are not.
non-zero indicates a high-level interrupt.
These functions can be called from useruser, interrupt, or kernel context.
See attributes(5) for descriptions of the following attributes:
tab() box; cw(2.75i) |cw(2.75i) lw(2.75i) |lw(2.75i) ATTRIBUTE TYPEATTRIBUTE VALUE _ Interface Stability<hy>
Obsolete
ddi_add_intr(9F), Intro(9F), mutex(9F)
Writing Device Drivers
