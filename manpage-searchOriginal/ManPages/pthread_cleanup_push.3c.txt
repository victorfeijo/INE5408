<beginning of page>
pthread_cleanup_push <-> push a thread cancellation cleanup handler
cc -mt [ flag... ] file... -lpthread [ library... ]
#include <pthread.h>
void pthread_cleanup_push(void (*handler) (void *), void *arg);
The pthread_cleanup_push() function pushes the specified cancellation cleanup handler routine, handler, onto the
cancellation cleanup stack of the calling thread.
When a thread exits or is canceled and its cancellation cleanup stack is not empty, the cleanup handlers are invoked
with the argument arg in last in, first out (LIFO) order from the cancellation cleanup stack.
An exiting or cancelled thread runs with all signals blocked. All thread termination functions, including cancellation
cleanup handlers, are called with all signals blocked.
The pthread_cleanup_push() and pthread_cleanup_pop(3C) functions can be implemented as macros. The appli<hy>
cation must ensure that they appear as statements, and in pairs within the same lexical scope (that is, the
pthread_cleanup_push() macro can be thought to expand to a token list whose first token is '{' with
pthread_cleanup_pop() expanding to a token list whose last token is the corresponding '}').
The effect of the use of return, break, continue, and goto to prematurely leave a code block described by a pair of
pthread_cleanup_push() and pthread_cleanup_pop() function calls is undefined.
Using longjmp() or siglongjmp() to jump into or out of a push/pop pair can cause either the matching push or the
matching pop statement not getting executed.
The pthread_cleanup_push() function returns no value.
No errors are defined.
The pthread_cleanup_push() function will not return an error code of EINTR.
See attributes(5) for descriptions of the following attributes:
tab() box; cw(2.75i) |cw(2.75i) lw(2.75i) |lw(2.75i) ATTRIBUTE TYPEATTRIBUTE VALUE _ Interface Stability<hy>
Committed _ MT-LevelMT-Safe _ StandardSee standards(5).
longjmp(3C), pthread_cancel(3C), pthread_cleanup_pop(3C), pthread_exit(3C), pthread_join(3C),
pthread_setcancelstate(3C), pthread_setcanceltype(3C), pthread_testcancel(3C), attributes(5), cancellation(5),
condition(5), standards(5)
See cancellation(5) for a discussion of cancellation concepts.
