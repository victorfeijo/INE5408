<beginning of page>
sigblock, sigmask, sigpause, sigsetmask <-> block signals
/usr/ucb/cc [ flag ... ] file ...
#include <signal.h>
int sigblock(mask)
int mask;
int sigmask(signum)
int signum;
int sigpause(mask)
int mask;
int sigsetmask(mask)
int mask;
sigblock() adds the signals specified in mask to the set of signals currently being blocked from delivery. Signals are
blocked if the appropriate bit in mask is a 1; the macro sigmask is provided to construct the mask for a given
signum. sigblock() returns the previous mask. The previous mask may be restored using sigsetmask().
sigpause() assigns mask to the set of masked signals and then waits for a signal to arrive; on return the set of masked
signals is restored. mask is usually 0 to indicate that no signals are now to be blocked. sigpause() always terminates
by being interrupted, returning <mi>1 and setting errno to EINTR.
sigsetmask() sets the current signal mask (those signals that are blocked from delivery). Signals are blocked if the
corresponding bit in mask is a 1; the macro sigmask is provided to construct the mask for a given signum.
In normal usage, a signal is blocked using sigblock(). To begin a critical section, variables modified on the occur<hy>
rence of the signal are examined to determine that there is no work to be done, and the process pauses awaiting work
by using sigpause() with the mask returned by sigblock().
It is not possible to block SIGKILL, SIGSTOP, or SIGCONT, this restriction is silently imposed by the system.
sigblock() and sigsetmask() return the previous set of masked signals. sigpause() returns <mi>1 and sets errno to EIN<hy>
TR.
kill(2), sigaction(2), signal(3UCB), sigvec(3UCB)
Use of these interfaces should be restricted to only applications written on BSD platforms. Use of these interfaces
with any of the system libraries or in multi-thread applications is unsupported.
