<beginning of page>
Exacct::Object::Item <-> exacct item manipulation
use Sun::Solaris::Exacct::Object;
my $ea_item = Sun::Solaris::Exacct::Object::Item->new(
 &EXT_UINT64 | &EXC_DEFAULT | &EXD_PROC_PID, $$);
This module is used for manipulating libexacct(3LIB) data Items. A libexacct Item is represented as an opaque ref<hy>
erence blessed into the Sun::Solaris::Exacct::Object::Item class, which is a subclass of the Sun::Solaris::Exac<hy>
ct::Object class. The underlying libexacct data types are mapped onto Perl types as follows:
tab(); cw(2.75i) cw(2.75i) lw(2.75i) lw(2.75i) libexacct typePerl internal type EXT_UINT8IV (integer)
EXT_UINT16IV (integer) EXT_UINT32IV (integer) EXT_UINT64IV (integer) EXT_DOUBLENV (double)
EXT_STRINGPV (string) EXT_RAWPV (string) EXT_EXACCT_OBJECTSun::Solaris::Exacct::Object sub<hy>
class
None.
None.
Class methods include those inherited from the Sun::Solaris::Exacct::Object base class, plus the following:
new($catalog, $value) This method creates and returns a new Sun::Solaris::Exacct::Object::Item. The catalog tag
can be either an integer or a Sun::Solaris::Exacct::Catalog. This catalog tag controls the conversion of the Perl val<hy>
ue to the corresponding Perl exacct data type as described in the table above. If the catalog tag has a type field of
EXT_EXACCT_OBJECT, the value must be a reference to either an Item or a Group object and the passed object
is recursively copied and stored inside the new Item. Because the returned Item is constant, it is impossible, for ex<hy>
ample, to create an Item representing CPU seconds and subsequently modify its value or change its catalog value.
This behavior is intended to prevent mismatches between the catalog tag and the data value.
Object methods are those inherited from the Sun::Solaris::Exacct::Object.
None.
See attributes(5) for descriptions of the following attributes:
tab() box; cw(2.75i) |cw(2.75i) lw(2.75i) |lw(2.75i) ATTRIBUTE TYPEATTRIBUTE VALUE _ AvailabilitySUNW<hy>
pl5u _ Interface StabilityEvolving
Exacct(3PERL), Exacct::Catalog(3PERL), Exacct::File(3PERL), Exacct::Object(3PERL), Exacct::Ob<hy>
ject::Group(3PERL), libexacct(3LIB), attributes(5)
