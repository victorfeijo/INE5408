<beginning of page>
vz_log_, vc_log_ <-> vector complex logarithm functions
cc [ flag... ] file... -lmvec [ library... ]
void vz_log_(int *n, double complex * restrict z,
 int *stridez, double _complex * restrict w, int *stridew);
void vc_log_(int *n, float complex * restrict z,
 int *stridez, float complex * restrict w, int *stridew);
These functions evaluate the complex function log(z) for an entire vector of values at once. The first parameter speci<hy>
fies the number of values to compute. Subsequent parameters specify the argument and result vectors. Each vector is
described by a pointer to the first element and a stride, which is the increment between successive elements.
Specifically, vz_log_(n, z, sz, w, sw) computes w[i * *sw] = log(z[i * *sz]) for each i = 0, 1, ..., *n - 1. The vc_log_()
function performs the same computation for single precision data.
These functions are not guaranteed to deliver results that are identical to the results of the clog(3M) functions given
the same arguments.
The element count *n must be greater than zero. The strides for the argument and result arrays can be arbitrary inte<hy>
gers, but the arrays themselves must not be the same or overlap. A zero stride effectively collapses an entire vector
into a single element. A negative stride causes a vector to be accessed in descending memory order, but note that the
corresponding pointer must still point to the first element of the vector to be used; if the stride is negative, this will
be the highest-addressed element in memory. This convention differs from the Level 1 BLAS, in which array param<hy>
eters always refer to the lowest-addressed element in memory even when negative increments are used.
These functions assume that the default round-to-nearest rounding direction mode is in effect. On x86, these func<hy>
tions also assume that the default round-to-64-bit rounding precision mode is in effect. The result of calling a vector
function with a non-default rounding mode in effect is undefined.
Unlike the c99 clog(3M) functions, the vector complex exponential functions make no attempt to handle special cas<hy>
es and exceptions; they simply use textbook formulas to compute a complex exponential in terms of real elementary
functions. As a result, these functions can raise different exceptions and/or deliver different results from clog().
See attributes(5) for descriptions of the following attributes:
tab() box; cw(2.75i) |cw(2.75i) lw(2.75i) |lw(2.75i) ATTRIBUTE TYPEATTRIBUTE VALUE _ Interface Stability<hy>
Committed _ MT-LevelMT-Safe
clog(3M), attributes(5)
