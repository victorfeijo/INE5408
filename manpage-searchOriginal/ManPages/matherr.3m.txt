<beginning of page>
matherr <-> math library exception-handling function
#include <math.h>
int matherr(struct exception *exc);
The System V Interface Definition, Third Edition (SVID3) specifies that certain libm functions call matherr() when
exceptions are detected. Users may define their own mechanisms for handling exceptions, by including a function
named matherr() in their programs. The matherr() function is of the form described above. When an exception oc<hy>
curs, a pointer to the exception structure exc will be passed to the user-supplied matherr() function. This structure,
which is defined in the <math.h> header file, is as follows:
 struct exception {
  int type;
  char *name;
  double arg1, arg2, retval;
 };
The type member is an integer describing the type of exception that has occurred, from the following list of con<hy>
stants (defined in the header file):
DOMAIN argument domain exception
SING argument singularity
OVERFLOW overflow range exception
UNDERFLOW underflow range exception
TLOSS total loss of significance
PLOSS partial loss of significance
Both TLOSS and PLOSS reflect limitations of particular algorithms for trigonometric functions that suffer abrupt
declines in accuracy at definite boundaries. Since the implementation does not suffer such abrupt declines, PLOSS
is never signaled. TLOSS is signaled for Bessel functions only to satisfy SVID3 requirements.
The name member points to a string containing the name of the function that incurred the exception. The arg1 and
arg2 members are the arguments with which the function was invoked. retval is set to the default value that will be
returned by the function unless the user's matherr() sets it to a different value.
If the user's matherr() function returns non-zero, no exception message will be printed and errno is not set.
When an application is built as a SVID3 conforming application (see standards(5)), if matherr() is not supplied by
the user, the default matherr exception-handling mechanisms, summarized in the table below, are invoked upon ex<hy>
ception:
DOMAIN 0.0 is usually returned, errno is set to EDOM and a message is usually printed on standard error.
SING The largest finite single-precision number, HUGE of appropriate sign, is returned, errno is set to EDOM,
and a message is printed on standard error.
OVERFLOW The largest finite single-precision number, HUGE of appropriate sign, is usually returned and errno
is set to ERANGE.
<beginning of page>
UNDERFLOW 0.0 is returned and errno is set to ERANGE.
TLOSS 0.0 is returned, errno is set to ERANGE, and a message is printed on standard error.
In general, errno is not a reliable error indicator because it can be unexpectedly set by a function in a handler for an
asynchronous signal.
tab() box; cw(1.29i) |cw(.81i) |cw(.79i) |cw(.87i) |cw(1.03i) |cw(.71i) lw(1.29i) |lw(.81i) |lw(.79i) |lw(.87i) |lw(1.03i)
|lw(.71i) <math.h> typeDOMAINSINGOVERFLOWUNDERFLOWTLOSS _ errnoEDOME<hy>
DOMERANGEERANGEERANGE _ IEEE ExceptionInvalid OperationDivision by ZeroOverflowUnderflow<mi> _
fp_exception_typefp_invalidfp_divisionfp_overflowfp_underflow<mi> _ ACOS, ASIN(|x| > 1):Md, 0.0<mi><mi><mi><mi> _
ACOSH(x < 1), ATANH(|x| > 1):NaN<mi><mi><mi><mi> _ ATAN2(0,0):Md, 0.0<mi><mi><mi><mi> _ COSH, SINH:<mi><mi><+->HUGE<mi><mi> _
EXP:<mi><mi>+HUGE0.0<mi> _ FMOD(x,0):x<mi><mi><mi><mi> _ HYPOT:<mi><mi>+HUGE<mi><mi> _ J0, J1, JN(|x| > X_TLOSS):<mi><mi><mi><mi>Mt, 0.0 _
LGAMMA:
 usual cases<mi><mi>+HUGE<mi><mi>
 (x = 0 or <mi>integer) <mi>Ms, +HUGE<mi><mi><mi> _ LOG, LOG10:
 (x < 0)Md, <mi>HUGE<mi> <mi><mi><mi>
 (x = 0)<mi>Ms, <mi>HUGE<mi><mi><mi> _ POW:
 usual cases<mi><mi><+->HUGE<+->0.0<mi>
 (x < 0) ** (y not an integer)Md, 0.0<mi><mi><mi><mi>
 0 ** 0Md, 0.0<mi><mi><mi><mi>
 0 ** (y < 0)Md, 0.0<mi><mi><mi> _ REMAINDER(x,0):NaN<mi><mi><mi><mi> _ SCALB:<mi><mi><+->HUGE_VAL<+->0.0<mi> _ SQRT(x < 0):Md,
0.0<mi><mi><mi><mi> _ Y0, Y1, YN:
 (x < 0)Md, <mi>HUGE<mi><mi><mi><mi>
 (x = 0)<mi>Md, <mi>HUGE<mi><mi><mi>
 (x > X_TLOSS)<mi><mi><mi><mi>Mt, 0.0
Md Message is printed (DOMAIN error).
Ms Message is printed (SING error).
Mt Message is printed (TLOSS error).
NaN IEEE NaN result and invalid operation exception.
HUGE Maximum finite single-precision floating-point number.
HUGE_VAL IEEE <if> result and division-by-zero exception.
X_TLOSS The value X_TLOSS is defined in <values.h>.
The interaction of IEEE arithmetic and matherr() is not defined when executing under IEEE rounding modes other
than the default round to nearest: matherr() is not always called on overflow or underflow and can return results that
differ from those in this table.
The X/Open System Interfaces and Headers (XSH) Issue 3 and later revisions of that specification no longer sanc<hy>
tions the use of the matherr interface. The following table summarizes the values returned in the exceptional cases.
In general, XSH dictates that as long as one of the input argument(s) is a NaN, NaN is returned. In particular,
pow(NaN,0) = NaN.
tab() box; cw(.82i) |cw(1.03i) |cw(1i) |cw(.97i) |cw(.96i) |cw(.72i) lw(.82i) |lw(1.03i) |lw(1i) |lw(.97i) |lw(.96i)
|lw(.72i) <math.h> typeDOMAINSINGOVERFLOWUNDERFLOWTLOSS _ errnoEDOME<hy>
<beginning of page>
DOMERANGEERANGEERANGE _ ACOS, ASIN(|x| > 1):0.0<mi><mi><mi><mi> _ ATAN2(0,0):0.0<mi><mi><mi><mi> _ COSH,
SINH:<mi><mi>{<+->HUGE_VAL}<mi><mi> _ EXP:<mi><mi>{+HUGE_VAL}{0.0}<mi> _ FMOD(x,0):{NaN}<mi><mi><mi><mi> _ HY<hy>
POT:<mi><mi>{+HUGE_VAL}<mi><mi> _ J0, J1, JN(|x| > X_TLOSS):<mi><mi><mi><mi>{0.0} _ LGAMMA:
 usual cases<mi><mi>{+HUGE_VAL}<mi><mi>
 (x = 0 or <mi>integer) <mi>+HUGE_VAL<mi><mi><mi> _ LOG, LOG10:
 (x < 0)-HUGE_VAL<mi><mi><mi><mi>
 (x = 0)<mi>-HUGE_VAL<mi><mi><mi> _ POW:
 usual cases<mi><mi><+->HUGE_VAL<+->0.0<mi>
 (x < 0) ** (y not an integer)0.0<mi><mi><mi><mi>
 0 ** 0{1.0}<mi><mi><mi><mi>
 0 ** (y < 0){-HUGE_VAL}<mi><mi><mi><mi> _ SQRT(x < 0):0.0<mi><mi><mi><mi> _ Y0, Y1, YN:
 (x < 0){-HUGE_VAL}<mi><mi><mi><mi>
 (x = 0)<mi>{-HUGE_VAL}<mi><mi><mi>
 (x > X_TLOSS)<mi><mi><mi><mi>0.0
{...} errno is not to be relied upon in all braced cases.
NaN IEEE NaN result and invalid operation exception.
HUGE_VAL IEEE <if> result and division-by-zero exception.
X_TLOSS The value X_TLOSS is defined in <values.h>.
The ANSI/ISO-C standard covers a small subset of the CAE specification.
The following table summarizes the values returned in the exceptional cases.
tab() box; cw(1.1i) |cw(1.1i) |cw(1.1i) |cw(1.1i) |cw(1.11i) lw(1.1i) |lw(1.1i) |lw(1.1i) |lw(1.1i) |lw(1.11i) <math.h>
typeDOMAINSINGOVERFLOWUNDERFLOW _ errnoEDOMEDOMERANGEERANGE _ ACOS, ASIN(|x| >
1):0.0<mi><mi><mi> _ ATAN2(0,0):0.0<mi><mi><mi> _ EXP:<mi><mi>+HUGE_VAL0.0 _ FMOD(x,0):NaN<mi><mi><mi> _ LOG, LOG10:
 (x < 0)-HUGE_VAL<mi><mi><mi>
 (x = 0)<mi>-HUGE_VAL<mi><mi> _ POW:
 usual cases<mi><mi><+->HUGE_VAL<+->0.0
 (x < 0) ** (y not an integer)0.0<mi><mi><mi>
 0 ** (y < 0)-HUGE_VAL<mi><mi><mi> _ SQRT(x < 0):0.0<mi><mi><mi>
NaN IEEE NaN result and invalid operation exception.
HUGE_VAL IEEE <if> result and division-by-zero.
Example 1 Example of matherr() function
 #include <stdio.h>
 #include <stdlib.h>
 #include <math.h>
 int
 matherr(struct exception *x) {
  switch (x<mi>>type) {
  case DOMAIN:
  /* change sqrt to return sqrt(<mi>arg1), not NaN */
  if (!strcmp(x<mi>>name, "sqrt")) {
  x<mi>>retval = sqrt(<mi>x<mi>>arg1);
  return (0); /* print message and set errno */
  } /* FALLTHRU */
  case SING:
  /* all other domain or sing exceptions, print message and */
<beginning of page>
  /* abort */
  fprintf(stderr, "domain exception in %s\n", x<mi>>name);
  abort( );
  break;
  }
  return (0); /* all other exceptions, execute default procedure */
  }
See attributes(5) for descriptions of the following attributes:
tab() box; cw(2.75i) |cw(2.75i) lw(2.75i) |lw(2.75i) ATTRIBUTE TYPEATTRIBUTE VALUE _ MT-LevelMT-Safe
attributes(5), standards(5)
