<beginning of page>
cpc_access <-> test access CPU performance counters
cc [ flag... ] file... <mi>lcpc [ library... ]
#include <libcpc.h>
int cpc_access(void);
Access to CPU performance counters is possible only on systems where the appropriate hardware exists and is cor<hy>
rectly configured. The cpc_access() function must be used to determine if the hardware exists and is accessible on
the platform before any of the interfaces that use the counters are invoked.
When the hardware is available, access to the per-process counters is always allowed to the process itself, and al<hy>
lowed to other processes mediated using the existing security mechanisms of /proc.
Upon successful completion, cpc_access() returns 0. Otherwise, it returns <mi>1 and sets errno to indicate the error.
By default, two common errno values are decoded and cause the library to print an error message using its reporting
mechanism. See cpc_seterrfn(3CPC) for a description of how this behavior can be modified.
The cpc_access() function will fail if:
EAGAIN Another process may be sampling system-wide CPU statistics.
ENOSYS CPU performance counters are inaccessible on this machine. This error can occur when the machine sup<hy>
ports CPU performance counters, but some software components are missing. Check to see that all CPU Perfor<hy>
mance Counter packages have been correctly installed.
See attributes(5) for descriptions of the following attributes:
tab() box; lw(2.75i) |lw(2.75i) lw(2.75i) |lw(2.75i) ATTRIBUTE TYPEATTRIBUTE VALUE _ MT-LevelMT-Safe _
Interface StabilityObsolete
cpc(3CPC), cpc_open(3CPC), cpc_seterrfn(3CPC), libcpc(3LIB), proc(4), attributes(5)
The cpc_access() function exists for binary compatibility only. Source containing this function will not compile.
This function is obsolete and might be removed in a future release. Applications should use cpc_open(3CPC) in<hy>
stead.
