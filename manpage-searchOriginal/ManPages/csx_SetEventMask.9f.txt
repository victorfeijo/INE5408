<beginning of page>
csx_SetEventMask, csx_GetEventMask <-> set or return the client event mask for the client
#include <sys/pccard.h>
int32_t csx_SetEventMask(client_handle_t ch, sockevent_t *se);
int32_t csx_GetEventMask(client_handle_t ch, sockevent_t *se);
Solaris DDI Specific (Solaris DDI)
ch Client handle returned from csx_RegisterClient(9F).
se Pointer to a sockevent_t structure
The function csx_SetEventMask() sets the client or global event mask for the client.
The function csx_GetEventMask() returns the client or global event mask for the client.
csx_RequestSocketMask(9F) must be called before calling csx_SetEventMask() for the client event mask for this
socket.
The structure members of sockevent_t are:
 uint32_t uint32_t /* attribute flags for call */
 uint32_t EventMask; /* event mask to set or return */
 uint32_t Socket; /* socket number if necessary */
The fields are defined as follows:
Attributes This is a bit-mapped field that identifies the type of event mask to be returned. The field is defined as fol<hy>
lows:
CONF_EVENT_MASK_GLOBAL Client's global event mask. If set, the client's global event mask is returned.
CONF_EVENT_MASK_CLIENT Client's local event mask. If set, the client's local event mask is returned.
EventMask This field is bit-mapped. Card Services performs event notification based on this field. See
csx_event_handler(9E) for valid event definitions and for additional information about handling events.
Socket Not used in Solaris, but for portability with other Card Services implementations, it should be set to the logi<hy>
cal socket number.
CS_SUCCESS Successful operation.
CS_BAD_HANDLE Client handle is invalid.
CS_BAD_SOCKET csx_RequestSocketMask(9F) not called for CONF_EVENT_MASK_CLIENT.
CS_UNSUPPORTED_FUNCTION No PCMCIA hardware installed.
These functions may be called from user or kernel context.
<beginning of page>
csx_event_handler(9E), csx_RegisterClient(9F), csx_ReleaseSocketMask(9F), csx_RequestSocketMask(9F)
PC Card 95 Standard, PCMCIA/JEIDA
