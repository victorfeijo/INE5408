<beginning of page>
mlib_VectorCopy_U8, mlib_VectorCopy_U8C, mlib_VectorCopy_S8, mlib_VectorCopy_S8C, mlib_Vector<hy>
Copy_S16, mlib_VectorCopy_S16C, mlib_VectorCopy_S32, mlib_VectorCopy_S32C <-> vector copy
cc [ flag... ] file... -lmlib [ library... ]
#include <mlib.h>
mlib_status mlib_VectorCopy_U8(mlib_u8 *z, const mlib_u8 *x,
 mlib_s32 n);
mlib_status mlib_VectorCopy_U8C(mlib_u8 *z, const mlib_u8 *x,
 mlib_s32 n);
mlib_status mlib_VectorCopy_S8(mlib_s8 *z, const mlib_s8 *x,
 mlib_s32 n);
mlib_status mlib_VectorCopy_S8C(mlib_s8 *z, const mlib_s8 *x,
 mlib_s32 n);
mlib_status mlib_VectorCopy_S16(mlib_s16 *z, const mlib_s16 *x,
 mlib_s32 n);
mlib_status mlib_VectorCopy_S16C(mlib_s16 *z, const mlib_s16 *x,
 mlib_s32 n);
mlib_status mlib_VectorCopy_S32(mlib_s32 *z, const mlib_s32 *x,
 mlib_s32 n);
mlib_status mlib_VectorCopy_S32C(mlib_s32 *z, const mlib_s32 *x,
 mlib_s32 n);
Each of these functions copies one vector to another vector of the same data type.
The input and output vectors must be in the same data type.
For real data, the following equation is used:
 z[i] = x[i]
where i = 0, 1, ..., (n - 1).
For complex data, the following equation is used:
 z[2*i] = x[2*i]
 z[2*i + 1] = x[2*i + 1]
where i = 0, 1, ..., (n - 1).
Each of the functions takes the following arguments:
z Pointer to the first element of the destination vector.
x Pointer to the first element of the source vector.
n Number of elements in the vectors.
Each of the functions returns MLIB_SUCCESS if successful. Otherwise it returns MLIB_FAILURE.
See attributes(5) for descriptions of the following attributes:
<beginning of page>
tab() box; cw(2.75i) |cw(2.75i) lw(2.75i) |lw(2.75i) ATTRIBUTE TYPEATTRIBUTE VALUE _ Interface Stability<hy>
Committed _ MT-LevelMT-Safe
attributes(5)
