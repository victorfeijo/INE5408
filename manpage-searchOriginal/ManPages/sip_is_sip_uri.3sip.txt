<beginning of page>
sip_is_sip_uri, sip_get_uri_scheme, sip_get_uri_host, sip_get_uri_user, sip_get_uri_password, sip_get_uri_port,
sip_get_uri_params, sip_get_uri_headers, sip_get_uri_opaque, sip_get_uri_query, sip_get_uri_path,
sip_get_uri_regname, sip_is_uri_teluser, sip_get_uri_errflags, sip_uri_errflags_to_str <-> get URI related attributes
cc [ flag ... ] file ... -lsip [ library ... ]
#include <sip.h>
boolean_t sip_is_sip_uri(const struct sip_uri *sip_uri);
const sip_str_t *sip_get_uri_scheme(const struct sip_uri *sip_uri,
 int *error);
const sip_str_t *sip_get_uri_user(const struct sip_uri *sip_uri,
 int *error);
const sip_str_t *sip_get_uri_password(const struct sip_uri *sip_uri,
 int *error);
const sip_str_t *sip_get_uri_host(const struct sip_uri *sip_uri,
 int *error);
int sip_get_uri_port(const struct sip_uri *sip_uri,
 int *error);
const sip_param_t *sip_get_uri_params(const struct sip_uri *sip_uri,
 int *error);
const sip_str_t *sip_get_uri_headers(const struct sip_uri *sip_uri,
 int *error);
const sip_str_t *sip_get_uri_opaque(const struct sip_uri *sip_uri,
 int *error);
const sip_str_t *sip_get_uri_query(const struct sip_uri *sip_uri,
 int *error);
const sip_str_t *sip_get_uri_path(const struct sip_uri *sip_uri,
 int *error);
const sip_str_t *sip_get_uri_regname(const struct sip_uri *sip_uri,
 int *error);
boolean_t sip_is_uri_teluser(const struct sip_uri *sip_uri);
int sip_get_uri_errflags(const struct sip_uri *sip_uri,
 int *error);
char *sip_uri_errflags_to_str(int uri_errflags);
For functions that return a pointer of type sip_str_t, sip_str_t is supplied by:
 typedef struct sip_str {
  char *sip_str_ptr;
  int sip_str_len;
 }sip_str_t;
The sip_str_ptr parameter points to the start of the returned value and sip_str_len supplies the length of the returned
value.
For example, given the following request line in a SIP message input to sip_get_request_uri_str():
 INVITE sip:marconi@radio.org SIP/2.0
the return is a pointer to sip_str_t with the sip_str_ptr member pointing to "s" of sip:marconi@radio.org and
<beginning of page>
sip_str_len being set to 21, the length of sip:marconi@radio.org.
The sip_is_sip_uri() function takes a parsed URI sip_uri and returns B_TRUE if it is a SIP[S] URI and B_FALSE
if it is not. A URI is a SIP[S] URI if the scheme in the URI is either "sip" or "sips".
The sip_get_uri_user() function takes a parsed URI sip_uri and returns the value of the "user" component, if
present.
The sip_get_uri_password() function takes a parsed URI sip_uri and returns the value of the "password" compo<hy>
nent, if present.
The sip_get_uri_host() function takes a parsed URI sip_uri and returns the value of the "host" component, if
present.
The sip_get_uri_port() function takes a parsed URI sip_uri and returns the value of the "port" component, if
present.
The sip_get_uri_params() function takes a parsed URI sip_uri and returns the list of URI parameters, if present,
from a SIP[S] URI.
The sip_get_uri_headers() function takes a parsed URI sip_uri and returns 'headers' from a SIP[S] URI.
The sip_get_uri_query() function takes a parsed URI sip_uri and returns the value of the 'query' component, if
present.
The sip_get_uri_path() function takes a parsed URI sip_uri and returns the value of the 'path' component, if
present.
The sip_get_uri_regname() function takes a parsed URI sip_uri and returns the value of the 'regname' component,
if present.
The sip_is_uri_teluser() function returns B_TRUE if the user component is a telephone-subscriber. Otherwise,
B_FALSE is returned.
The sip_get_uri_errflags() function returns the error flags from a parsed URI sip_uri. The returned value is a bit<hy>
mask with the appropriate bit set when the parser, sip_parse_uri(), encounters an error. The following are the possi<hy>
ble error values that could be set:
 Bit value Error Comments
 _______________________________________________________________
 0x00000001 SIP_URIERR_SCHEME invalid scheme
 0x00000002 SIP_URIERR_USER invalid user name
 0x00000004 SIP_URIERR_PASS invalid password
 0x00000008 SIP_URIERR_HOST invalid host
 0x00000010 SIP_URIERR_PORT invalid port number
 0x00000020 SIP_URIERR_PARAM invalid URI parameters
 0x00000040 SIP_URIERR_HEADER invalid URI headers
 0x00000080 SIP_URIERR_OPAQUE invalid opaque
 0x00000100 SIP_URIERR_QUERY invalid query
 0x00000200 SIP_URIERR_PATH invalid path
 0x00000400 SIP_URIERR_REGNAME invalid reg-name
The sip_uri_errflags_to_str() function takes the error flags from a parsed URI sip_uri and forms a string with all
the error bits that are set. For example, if SIP_URIERR_PASS and SIP_URIERR_PORT are set in a parsed URI
sip_uri, the sip_uri_errflags_to_str() function returns a string such as:
 "Error(s) in PASSWORD, PORT part(s)"
The caller is responsible for freeing the returned string.
The sip_get_uri_scheme(), sip_get_uri_user(), sip_get_uri_password(), sip_get_uri_host(),
sip_get_uri_params(), sip_get_uri_headers(), sip_get_uri_opaque(), sip_get_uri_query(), sip_get_uri_path(),
sip_get_uri_regname(), and sip_uri_errflags_to_str() functions return the requested value on success and NULL
on failure.
<beginning of page>
The sip_get_uri_port() function returns port from the URI or 0 if the port is not present. The returned port is in
host byte order.
The value of errno is not changed by these calls in the event of an error.
If the error is non-null, the following value is set:
EINVAL The SIP header value of the SIP message is NULL or there is no URI.
The input URI is null or the requested URI component is invalid. The error flag is set for the requested component.
The URI parameters or headers are requested from a non-SIP[S] URI; or the 'opaque', 'query', 'path', 'reg-
name' components are requested from a SIP[S] URI.
On success, the value of the location pointed to by error is set to 0.
See attributes(5) for descriptions of the following attributes:
tab() box; cw(2.75i) |cw(2.75i) lw(2.75i) |lw(2.75i) ATTRIBUTE TYPEATTRIBUTE VALUE _ Interface Stability<hy>
Committed _ MT-LevelMT-Safe
libsip(3LIB)
