<beginning of page>
dat_srq_resize <-> modify the size of the shared receive queue
cc [ flag... ] file... -ldat [ library... ]
#include <dat/udat.h>
DAT_RETURN
 dat_srq_resize (
 IN DAT_SRQ_HANDLE srq_handle,
 IN DAT_COUNT srq_max_recv_dto
 )
srq_handle A handle for an instance of the SRQ.
srq_max_recv_dto The new maximum number of Recv DTOs that Shared Receive Queue must hold.
The dat_srq_resize() function modifies the size of the queue of SRQ.
Resizing of Shared Receive Queue should not cause any incoming messages on any of the EPs that use the SRQ to
be lost. If the number of outstanding Recv buffers on the SRQ is larger then the requested srq_max_recv_dto, the op<hy>
eration returns DAT_INVALID_STATE and do not change SRQ. This includes not just the buffers on the SRQ but
all outstanding Receive buffers that had been posted to the SRQ and whose completions have not reaped yet. Thus,
the outstanding buffers include the buffers on SRQ, the buffers posted to SRQ at are at SRQ associated EPs, and the
buffers posted to SRQ for which completions have been generated but not yet reaped by Consumer from recv_evds
of the EPs that use the SRQ.
If the requested srq_max_recv_dto is below the SRQ low watermark, the operation returns DAT_INVALID_STATE
and does not change SRQ.
DAT_SUCCESS The operation was successful.
DAT_INVALID_HANDLE The srq_handle argument is an invalid DAT handle.
DAT_INVALID_PARAMETER The srq_max_recv_dto argument is invalid.
DAT_INSUFFICIENT_RESOURCES The operation failed due to resource limitations.
DAT_INVALID_STATE Invalid state. Either the number of entries on the SRQ exceeds the requested SRQ queue
length or the requested SRQ queue length is smaller than the SRQ low watermark.
The dat_srq_resize() function is required not to lose any buffers. Thus, it cannot shrink below the outstanding num<hy>
ber of Recv buffers on SRQ. There is no requirement to shrink the SRQ to return DAT_SUCCESS.
The quality of the implementation determines how closely to the Consumer-requested value the Provider shrinks the
SRQ. For example, the Provider can shrink the SRQ to the Consumer-requested value and if the requested value is
smaller than the outstanding buffers on SRQ, return DAT_INVALID_STATE; or the Provider can shrink to some
value larger than that requested by the Consumer but below current SRQ size; or the Provider does not change the
SRQ size and still returns DAT_SUCCESS.
See attributes(5) for descriptions of the following attributes:
tab() box; cw(2.75i) |cw(2.75i) lw(2.75i) |lw(2.75i) ATTRIBUTE TYPEATTRIBUTE VALUE _ Interface Stability<hy>
Standard: uDAPL, 1.2 _ MT-LevelUnsafe
dat_srq_create(3DAT), dat_srq_free(3DAT), dat_srq_post_recv(3DAT), dat_srq_query(3DAT),
dat_srq_set_lw(3DAT), libdat(3LIB), attributes(5)
