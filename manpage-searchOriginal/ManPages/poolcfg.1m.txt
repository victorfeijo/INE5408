<beginning of page>
poolcfg <-> create and modify resource pool configuration files
/usr/sbin/poolcfg -c command [-d | [filename]]
/usr/sbin/poolcfg -f command_file [-d | [filename]]
/usr/sbin/poolcfg -h
The poolcfg utility provides configuration operations on pools and sets. These operations are performed upon an ex<hy>
isting configuration and take the form of modifications to the specified configuration file. If you use the -d option,
the modifications occur to the kernel state. Actual activation of the resulting configuration is achieved by way of the
pooladm(1M) utility.
Pools configuration files are structured files that must have been constructed using poolcfg itself or libpool(3LIB)
directly.
An invocation of poolcfg with the pool dynamic location and write permission will hang if the dynamic location has
already been opened for writing.
The configurations which are created by this utility can be used by pooladm to instantiate the configuration upon a
target host.
The following options are supported:
-c command Specify command as an editing command. See USAGE.
-d Operate directly on the kernel state. No filename is allowed.
-f command_file Take the commands from command_file. command_file consists of editing commands, one per line.
-h Display extended information about the syntax of editing commands.
A script consists of editing commands, one per line, of the following:
info [entity-name]
Display configuration (or specified portion) in human readable form to standard output. If no entity is specified, sys<hy>
tem information is displayed. Therefore, poolcfg -c 'info' afile is an equivalent invocation to poolcfg -c 'info sys<hy>
tem name' afile.
create entity-name [property-list]
Make an entity of the specified type and name.
destroy entity-name
Remove the specified entity.
modify entity-name [property-list]
Change the listed properties on the named entity.
associate pool-name [resource-list]
Connect one or more resources to a pool, or replace one or more existing connections.
transfer to [resourcetype] name[component-list]
Transfer one or more discrete components to a resource .
<beginning of page>
transfer [quantity] from [resourcetype] [src] to [tgt]
Transfer a resource quantity from src to tgt.
transfer [quantity] to [resourcetype] [tgt] from [src]
Transfer a resource quantity to tgt from src.
discover
Create a system entity, with one pool entity and resources to match current system configuration. All discovered re<hy>
sources of each resource type are recorded in the file, with the single pool referring to the default resource for each
resource type.
This command is a NO-OP when poolcfg operates directly on the kernel. See the -d option.
You should avoid use of this command. The preferred method for creating a configuration is to export the dynamic
configuration using pooladm(1M) with the -s option.
rename entity-name to new-name
Change the name of an entity on the system to its new name.
The property list is specified by:
 ( proptype name = value [ ; proptype name = value ]* )
where the last definition in the sequence for a given proptype, name pair is the one that holds. For property deletion,
use ~ proptype name.
A resource list is specified by:
 ( resourcetype name [ ; resourcetype name ]* )
where the last specification in the sequence for a resource is the one that holds. There is no deletion syntax for re<hy>
source lists.
A component list is specified by:
 ( componenttype name [ ; componenttype name ]* )
where the last specification in the sequence for a component is the one that holds. There is no deletion syntax for
component lists.
system Machine level entity
pool Named collection of resource associations
pset Processor set resource
boolean Takes one of two values true or false.
int A 64-bit signed integer value.
<beginning of page>
uint A 64-bit unsigned integer value.
string Strings are delimited by quotes ("), and support the character escape sequences defined in formats(5).
float Scientific notation is not supported.
Example 1 Writing a poolcfg Script
The following poolcfg script creates a pool named Accounting, and a processor set, small-1. The processor set is
created first, then the pool is created and associated with the set.
 create pset small-1 ( uint pset.min = 1 ; uint pset.max = 4)
 create pool Accounting
 associate pool Accounting ( pset small-1 )
Example 2 Reporting on pool_0
The following command reports on pool_0 to standard output in human readable form:
  # poolcfg -c 'info pool pool_0' /etc/pooladm.conf
Example 3 Destroying pool_0 and Its Associations
The following command destroys pool_0 and associations, but not the formerly associated resources:
 # poolcfg -c 'destroy pool pool_0' /etc/pooladm.conf
Example 4 Displaying the Current Configuration
The following command displays the current configuration:
 $ poolcfg -c 'info' /etc/pooladm.conf
 system example_system
  int system.version 1
  boolean system.bind-default true
  string system.comment Discovered by libpool
  pool pool_default
  boolean pool.default true
  boolean pool.active true
  int pool.importance 5
  string pool.comment
  string.pool.scheduler FSS
  pset pset_default
  pset pset_default
  int pset.sys_id -1
  string pset.units population
  boolean pset.default true
  uint pset.max 4294967295
  uint pset.min 1
  string pset.comment
  boolean pset.escapable false
  uint pset.load 0
  uint pset.size 2
  cpu
  int cpu.sys_id 0
<beginning of page>
  string cpu.comment
  cpu
  int cpu.sys_id 2
  string cpu.comment
Example 5 Moving cpu with ID 2 to Processor Set pset1 in the Kernel
The following command moves cpu with ID 2 to processor set pset1 in the kernel:
 # poolcfg -dc 'transfer to pset pset1 ( cpu 2 )'
Example 6 Moving 2 cpus from Processor Set pset1 to Processor Set pset2 in the Kernel
The following command moves 2 cpus from processor set pset1 to processor set pset2 in the kernel:
 # poolcfg -dc 'transfer 2 from pset pset1 to pset2'
See attributes(5) for descriptions of the following attributes:
tab() box; cw(2.75i) |cw(2.75i) lw(2.75i) |lw(2.75i) ATTRIBUTE TYPEATTRIBUTE VALUE _ AvailabilitySUNW<hy>
pool _ Interface StabilitySee below.
The invocation is Committed. The output is Uncommitted.
pooladm(1M), poolbind(1M), libpool(3LIB), attributes(5), formats(5)

