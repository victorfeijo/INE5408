<beginning of page>
mlib_MatrixAddS_U8_Mod, mlib_MatrixAddS_U8_Sat, mlib_MatrixAddS_U8C_Mod, mlib_Matrix<hy>
AddS_U8C_Sat, mlib_MatrixAddS_S8_Mod, mlib_MatrixAddS_S8_Sat, mlib_MatrixAddS_S8C_Mod, mlib_Ma<hy>
trixAddS_S8C_Sat, mlib_MatrixAddS_S16_Mod, mlib_MatrixAddS_S16_Sat, mlib_MatrixAddS_S16C_Mod,
mlib_MatrixAddS_S16C_Sat, mlib_MatrixAddS_S32_Mod, mlib_MatrixAddS_S32_Sat, mlib_Matrix<hy>
AddS_S32C_Mod, mlib_MatrixAddS_S32C_Sat <-> matrix addition to scalar, in place
cc [ flag... ] file... -lmlib [ library... ]
#include <mlib.h>
mlib_status mlib_MatrixAddS_U8_Mod(mlib_u8 *xz, const mlib_u8 *c,
 mlib_s32 m, mlib_s32 n);
mlib_status mlib_MatrixAddS_U8_Sat(mlib_u8 *xz, const mlib_u8 *c,
 mlib_s32 m, mlib_s32 n);
mlib_status mlib_MatrixAddS_U8C_Mod(mlib_u8 *xz, const mlib_u8 *c,
 mlib_s32 m, mlib_s32 n);
mlib_status mlib_MatrixAddS_U8C_Sat(mlib_u8 *xz, const mlib_u8 *c,
 mlib_s32 m, mlib_s32 n);
mlib_status mlib_MatrixAddS_S8_Mod(mlib_s8 *xz, const mlib_s8 *c,
 mlib_s32 m, mlib_s32 n);
mlib_status mlib_MatrixAddS_S8_Sat(mlib_s8 *xz, const mlib_s8 *c,
 mlib_s32 m, mlib_s32 n);
mlib_status mlib_MatrixAddS_S8C_Mod(mlib_s8 *xz, const mlib_s8 *c,
 mlib_s32 m, mlib_s32 n);
mlib_status mlib_MatrixAddS_S8C_Sat(mlib_s8 *xz, const mlib_s8 *c,
 mlib_s32 m, mlib_s32 n);
mlib_status mlib_MatrixAddS_S16_Mod(mlib_s16 *xz, const mlib_s16 *c,
 mlib_s32 m, mlib_s32 n);
mlib_status mlib_MatrixAddS_S16_Sat(mlib_s16 *xz, const mlib_s16 *c,
 mlib_s32 m, mlib_s32 n);
mlib_status mlib_MatrixAddS_S16C_Mod(mlib_s16 *xz, const mlib_s16 *c,
 mlib_s32 m, mlib_s32 n);
mlib_status mlib_MatrixAddS_S16C_Sat(mlib_s16 *xz, const mlib_s16 *c,
 mlib_s32 m, mlib_s32 n);
mlib_status mlib_MatrixAddS_S32_Mod(mlib_s32 *xz, const mlib_s32 *c,
 mlib_s32 m, mlib_s32 n);
mlib_status mlib_MatrixAddS_S32_Sat(mlib_s32 *xz, const mlib_s32 *c,
 mlib_s32 m, mlib_s32 n);
mlib_status mlib_MatrixAddS_S32C_Mod(mlib_s32 *xz, const mlib_s32 *c,
 mlib_s32 m, mlib_s32 n);
mlib_status mlib_MatrixAddS_S32C_Sat(mlib_s32 *xz, const mlib_s32 *c,
 mlib_s32 m, mlib_s32 n);
Each of these functions performs an in-place addition of a scalar value to a matrix.
For real data, the following equation is used:
 xz[i] = c[0] + xz[i]
where i = 0, 1, ..., (m*n - 1).
<beginning of page>
For complex data, the following equation is used:
 xz[2*i] = c[0] + xz[2*i]
 xz[2*i + 1] = c[1] + xz[2*i + 1]
where i = 0, 1, ..., (m*n - 1).
Each of the functions takes the following arguments:
xz Pointer to the source and the destination matrix.
c Pointer to the source scalar. When the function is used with complex data types, c[0] contains the scalar for the real
part, and c[1] contains the scalar for the imaginary part.
m Number of rows in the matrices.
n Number of columns in the matrices.
Each of the functions returns MLIB_SUCCESS if successful. Otherwise it returns MLIB_FAILURE.
See attributes(5) for descriptions of the following attributes:
tab() box; cw(2.75i) |cw(2.75i) lw(2.75i) |lw(2.75i) ATTRIBUTE TYPEATTRIBUTE VALUE _ Interface Stability<hy>
Committed _ MT-LevelMT-Safe
mlib_MatrixAddS_U8_U8_Mod(3MLIB), attributes(5)
