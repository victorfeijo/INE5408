<beginning of page>
cpc_seterrfn <-> control libcpc error reporting
cc [ flag... ] file... <mi>lcpc [ library... ]
#include <libcpc.h>
typedef void (cpc_errfn_t)(const char *fn, const char *fmt, va_list ap);
void cpc_seterrfn(cpc_errfn_t *errfn);
For the convenience of programmers instrumenting their code, several libcpc(3LIB) functions automatically emit to
stderr error messages that attempt to provide a more detailed explanation of their error return values. While this can
be useful for simple programs, some applications may wish to report their errors differently<em>for example, to a win<hy>
dow or to a log file.
The cpc_seterrfn() function allows the caller to provide an alternate function for reporting errors; the type signature
is shown above. The fn argument is passed the library function name that detected the error, the format string fmt
and argument pointer ap can be passed directly to vsnprintf(3C) or similar varargs-based routine for formatting.
The default printing routine can be restored by calling the routine with an errfn argument of NULL. Example 1 De<hy>
bugging example.
This example produces error messages only when debugging the program containing it, or when the cpc_strto<hy>
event() function is reporting an error when parsing an event specification
 int debugging;
 void
 myapp_errfn(const char *fn, const char *fmt, va_list ap)
 {
  if (strcmp(fn, "strtoevent") != 0 && !debugging)
  return;
  (void) fprintf(stderr, "myapp: cpc_%s(): ", fn);
  (void) vfprintf(stderr, fmt, ap);
 }
See attributes(5) for descriptions of the following attributes:
tab() box; cw(2.75i) |cw(2.75i) lw(2.75i) |lw(2.75i) ATTRIBUTE TYPEATTRIBUTE VALUE _ MT-LevelUnsafe _
Interface StabilityObsolete
cpc(3CPC), cpc_seterrhndlr(3CPC), libcpc(3LIB), vsnprintf(3C), attributes(5)
The cpc_seterrfn() function exists for binary compatibility only. Source containing this function will not compile.
This function is obsolete and might be removed in a future release. Applications should use cpc_seterrhndlr(3CPC)
instead.
