<beginning of page>
pthread_rwlock_timedrdlock, pthread_rwlock_reltimedrdlock_np <-> lock a read-write lock for reading
cc -mt [ flag... ] file... [ library... ]
#include <pthread.h>
#include <time.h>
int pthread_rwlock_timedrdlock(pthread_rwlock_t *restrict rwlock,
 const struct timespec *restrict abs_timeout);
int pthread_rwlock_reltimedrdlock_np(pthread_rwlock_t *restrict rwlock,
 const struct timespec *restrict rel_timeout);
The pthread_rwlock_timedrdlock() function applies a read lock to the read-write lock referenced by rwlock as in
the pthread_rwlock_rdlock(3C) function. If the lock cannot be acquired without waiting for other threads to unlock
the lock, this wait will be terminated when the specified timeout expires. The timeout expires when the absolute time
specified by abs_timeout passes, as measured by the CLOCK_REALTIME clock (that is, when the value of that
clock equals or exceeds abs_timeout), or if the absolute time specified by abs_timeout has already been passed at the
time of the call.
The pthread_rwlock_reltimedrdlock_np() function is identical to the pthread_rwlock_timedrdlock() function,
except that the timeout is specified as a relative time interval. The timeout expires when the time interval specified
by rel_timeout passes, as measured by the CLOCK_REALTIME clock, or if the time interval specified by
rel_timeout is negative at the time of the call.
The resolution of the timeout is the resolution of the CLOCK_REALTIME clock. The timespec data type is de<hy>
fined in the <time.h> header. Under no circumstances does either function fail with a timeout if the lock can be ac<hy>
quired immediately. The validity of the timeout parameter need not be checked if the lock can be immediately ac<hy>
quired.
If a signal that causes a signal handler to be executed is delivered to a thread blocked on a read-write lock with a call
to pthread_rwlock_timedrdlock() or pthread_rwlock_reltimedrdlock_np(), upon return from the signal handler
the thread resumes waiting for the lock as if it was not interrupted.
The calling thread might deadlock if at the time the call is made it holds a write lock on rwlock.
The results are undefined if this function is called with an uninitialized read-write lock.
The pthread_rwlock_timedrdlock() and pthread_rwlock_reltimedrdlock_np() functions return 0 if the lock for
reading on the read-write lock object referenced by rwlock is acquired. Otherwise, an error number is returned to in<hy>
dicate the error.
The pthread_rwlock_timedrdlock() and and pthread_rwlock_reltimedrdlock_np() functions will fail if:
ETIMEDOUT
 The lock could not be acquired before the specified timeout expired.
The pthread_rwlock_timedrdlock() and pthread_rwlock_reltimedrdlock_np() functions may fail if:
EAGAIN The read lock could not be acquired because the maximum number of read locks for lock would be ex<hy>
ceeded.
EDEADLK The calling thread already holds a write lock on rwlock.
EINVAL The value specified by rwlock does not refer to an initialized read-write lock object, or the timeout
nanosecond value is less than zero or greater than or equal to 1 000 million.
See attributes(5) for descriptions of the following attributes:
tab() box; cw(2.75i) |cw(2.75i) lw(2.75i) |lw(2.75i) ATTRIBUTE TYPEATTRIBUTE VALUE _ Interface Stability<hy>
See below. _ MT-LevelMT-Safe
<beginning of page>
The pthread_rwlock_timedrdlock() function is Standard. The pthread_rwlock_reltimedrdlock_np() is Stable.
pthread_rwlock_destroy(3C), pthread_rwlock_rdlock(3C), pthread_rwlock_timedwrlock(3C),
pthread_rwlock_trywrlock(3C), pthread_rwlock_unlock(3C), pthread_rwlock_wrlock(3C), attributes(5),
standards(5)
