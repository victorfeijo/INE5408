<beginning of page>
csx_Parse_CISTPL_BYTEORDER <-> parse the Byte Order tuple
#include <sys/pccard.h>
int32_t csx_Parse_CISTPL_BYTEORDER(client_handle_t ch, tuple_t *tu,
 cistpl_byteorder_t *cbo);
Solaris DDI Specific (Solaris DDI)
ch Client handle returned from csx_RegisterClient(9F).
tu Pointer to a tuple_t structure (see tuple(9S)) returned by a call to csx_GetFirstTuple(9F) or csx_GetNext<hy>
Tuple(9F).
cbo Pointer to a cistpl_byteorder_t structure which contains the parsed CISTPL_BYTEORDER tuple information
upon return from this function.
This function parses the Byte Order tuple, CISTPL_BYTEORDER, into a form usable by PC Card drivers.
The CISTPL_BYTEORDER tuple shall only appear in a partition tuple set for a memory-like partition. It specifies
two parameters: the order for multi-byte data, and the order in which bytes map into words for 16-bit cards.
The structure members of cistpl_byteorder_t are:
 uint32_t order; /* byte order code */
 uint32_t map; /* byte mapping code */
The fields are defined as follows:
order This field specifies the byte order for multi-byte numeric data.
TPLBYTEORD_LOW Little endian order
TPLBYTEORD_VS Vendor specific
map This field specifies the byte mapping for 16-bit or wider cards.
TPLBYTEMAP_LOW Byte zero is least significant byte
TPLBYTEMAP_HIGH Byte zero is most significant byte
TPLBYTEMAP_VS Vendor specific mapping
CS_SUCCESS Successful operation.
CS_BAD_HANDLE Client handle is invalid.
CS_UNKNOWN_TUPLE Parser does not know how to parse tuple.
<beginning of page>
CS_NO_CARD No PC Card in socket.
CS_NO_CIS No Card Information Structure (CIS) PC Card.
CS_UNSUPPORTED_FUNCTION No PCMCIA hardware installed.
This function may be called from user or kernel context.
csx_GetFirstTuple(9F), csx_GetTupleData(9F), csx_RegisterClient(9F), csx_ValidateCIS(9F), tuple(9S)
PC Card 95 Standard, PCMCIA/JEIDA
