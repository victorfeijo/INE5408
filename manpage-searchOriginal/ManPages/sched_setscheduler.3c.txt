<beginning of page>
sched_setscheduler <-> set scheduling policy and scheduling parameters
#include <sched.h>
int sched_setscheduler(pid_t pid, int policy,
 const struct sched_param *param);
The sched_setscheduler() function sets the scheduling policy and scheduling parameters of the process specified by
pid to policy and the parameters specified in the sched_param structure pointed to by param, respectively. The val<hy>
ue of the sched_priority member in the sched_param structure is any integer within the inclusive priority range for
the scheduling policy specified by policy. The sched_setscheduler() function ignores the other members of the
sched_param structure. If the value of pid is negative, the behavior of the sched_setscheduler() function is unspec<hy>
ified.
The possible values for the policy parameter are defined in the header <sched.h> (see sched.h(3HEAD)):
If a process specified by pid exists and if the calling process has permission, the scheduling policy and scheduling
parameters are set for the process whose process ID is equal to pid. The real or effective user ID of the calling
process must match the real or saved (from exec(2)) user ID of the target process unless the effective user ID of the
calling process is 0. See Intro(2).
If pid is 0, the scheduling policy and scheduling parameters are set for the calling process.
To change the policy of any process to either of the real time policies SCHED_FIFO or SCHED_RR, the calling
process must either have the SCHED_FIFO or SCHED_RR policy or have an effective user ID of 0.
The sched_setscheduler() function is considered successful if it succeeds in setting the scheduling policy and
scheduling parameters of the process specified by pid to the values specified by policy and the structure pointed to
by param, respectively.
Upon successful completion, the function returns the former scheduling policy of the specified process. If the
sched_setscheduler() function fails to complete successfully, the policy and scheduling paramenters remain un<hy>
changed, and the function returns <mi>1 and sets errno to indicate the error.
The sched_setscheduler() function will fail if:
EINVAL The value of policy is invalid, or one or more of the parameters contained in param is outside the valid
range for the specified scheduling policy.
EPERM The requesting process does not have permission to set either or both of the scheduling parameters or the
scheduling policy of the specified process.
ESRCH No process can be found corresponding to that specified by pid.
See attributes(5) for descriptions of the following attributes:
tab() box; cw(2.75i) |cw(2.75i) lw(2.75i) |lw(2.75i) ATTRIBUTE TYPEATTRIBUTE VALUE _ Interface Stability<hy>
Committed _ MT-LevelMT-Safe _ StandardSee standards(5).
priocntl(1), Intro(2), exec(2), priocntl(2), librt(3LIB), sched.h(3HEAD), sched_get_priority_max(3C),
sched_getparam(3C), sched_getscheduler(3C), sched_setparam(3C), attributes(5), standards(5)
