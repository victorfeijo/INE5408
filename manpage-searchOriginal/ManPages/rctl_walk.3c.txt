<beginning of page>
rctl_walk <-> visit registered rctls on current system
#include <rctl.h>
int rctl_walk(int (*callback)(const char *rctlname, void *walk_data),
 void *init_data);
The rctl_walk() function provides a mechanism for the application author to examine all active resource controls
(rctls) on the current system. The callback function provided by the application is given the name of an rctl at each
invocation and can use the walk_data to record its own state. The callback function should return non-zero if it en<hy>
counters an error condition or attempts to terminate the walk prematurely; otherwise the callback function should re<hy>
turn 0.
Upon successful completion, rctl_walk() returns 0. It returns <mi>1 if the callback function returned a non-zero value
or if the walk encountered an error, in which case errno is set to indicate the error.
The rctl_walk() function will fail if:
ENOMEM There is insufficient memory available to set up the initial data for the walk.
Other returned error values are presumably caused by the callback function. Example 1 Count the number of rctls
available on the system.
The following example counts the number of resource controls on the system.
 #include <sys/types.h>
 #include <rctl.h>
 #include <stdio.h>
 typedef struct wdata {
  uint_t count;
 } wdata_t;
 wdata_t total_count;
 int
 simple_callback(const char *name, void *pvt)
 {
  wdata_t *w = (wdata_t *)pvt;
  w->count++;
  return (0);
 }
 ...
 total_count.count = 0;
 errno = 0;
 if (rctl_walk(simple_callback, &total_count)) == 0)
  (void) printf("count = %u\n", total_count.count);
See attributes(5) for descriptions of the following attributes:
tab() box; cw(2.75i) |cw(2.75i) lw(2.75i) |lw(2.75i) ATTRIBUTE TYPEATTRIBUTE VALUE _ Interface Stabili<hy>
tyEvolving _ MT-LevelMT-Safe
setrctl(2), attributes(5)
