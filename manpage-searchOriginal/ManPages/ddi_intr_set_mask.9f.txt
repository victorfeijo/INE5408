<beginning of page>
ddi_intr_set_mask, ddi_intr_clr_mask <-> set or clear mask for a given interrupt
#include <sys/types.h>
#include <sys/conf.h>
#include <sys/ddi.h>
#include <sys/sunddi.h>
int ddi_intr_set_mask(ddi_intr_handle_t h);
int ddi_intr_clr_mask(ddi_intr_handle_t h);
Solaris DDI specific (Solaris DDI).
h DDI interrupt handle
The ddi_intr_set_mask() function masks the given interrupt pointed to by the device's interrupt handle h if the de<hy>
vice or host bridge supports the masking operation. The ddi_intr_get_cap() function returns the RO flag DDI_IN<hy>
TR_FLAG_MASKABLE if the device or host bridge supports interrupt mask bits for the given interrupt type. In
flight interrupts can still be taken and delivered to the driver.
The ddi_intr_clr_mask() function unmasks the given interrupt pointed by the device's interrupt handle h if the de<hy>
vice or host bridge supports the masking operation.
The ddi_intr_set_mask() and ddi_intr_clr_mask() functions should be called only if an interrupt is enabled. Oth<hy>
erwise the framework will return DDI_EINVAL to such calls.
The mask cannot be cleared directly if the OS implementation has also temporarily masked the interrupt. A call to
ddi_intr_clr_mask() must be preceded by a call to ddi_intr_set_mask(). It is not necessary to call ddi_in<hy>
tr_clr_mask() when adding and enabling the interrupt.
The ddi_intr_set_mask() and ddi_intr_clr_mask() functions return:
DDI_SUCCESS On success.
DDI_EINVAL On encountering invalid input parameters or when an interrupt is not enabled.
DDI_FAILURE On any implementation specific failure.
DDI_ENOTSUP On device not supporting operation.
The ddi_intr_set_mask() and ddi_intr_clr_mask() functions can be called from any context.
See attributes(5) for descriptions of the following attributes:
tab() box; cw(2.75i) |cw(2.75i) lw(2.75i) |lw(2.75i) ATTRIBUTE TYPEATTRIBUTE VALUE _ Interface Stability<hy>
Committed
attributes(5), ddi_intr_block_disable(9F), ddi_intr_block_enable(9F), ddi_intr_disable(9F), ddi_intr_en<hy>
able(9F), ddi_intr_get_pending(9F)
Writing Device Drivers
Consumers of these interfaces should verify that the return value is not equal to DDI_SUCCESS. Incomplete check<hy>
ing for failure codes could result in inconsistent behavior among platforms.
