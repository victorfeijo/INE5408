<beginning of page>
expm1, expm1f, expm1l <-> compute exponential function
c99 [ flag... ] file... -lm [ library... ]
#include <math.h>
double expm1(double x);
float expm1f(float x);
long double expm1l(long double x);
These functions compute e^x<mi>1.0.
Upon successful completion, these functions return e^x<mi>1.0.
If x is NaN, a NaN is returned.
If x is <+->0, <+->0 is returned.
If x is <mi>Inf, <mi>1 is returned.
If x is +Inf, x is returned.
These functions will fail if:
Range Error The result overflows.
If the integer expression (math_errhandling & MATH_ERREXCEPT) is non-zero, the overflow floating-point ex<hy>
ception is raised.
The value of expm1(x) can be more accurate than exp(x)<mi>1.0 for small values of x.
The expm1() and log1p(3M) functions are useful for financial calculations of ((1+x)^n<mi>1)/x, namely:
 expm1(n * log1p(x))/x
when x is very small (for example, when performing calculations with a small daily interest rate). These functions
also simplify writing accurate inverse hyperbolic functions.
An application wanting to check for exceptions should call feclearexcept(FE_ALL_EXCEPT) before calling these
functions. On return, if fetestexcept(FE_INVALID | FE_DIVBYZERO | FE_OVERFLOW | FE_UNDER<hy>
FLOW) is non-zero, an exception has been raised. An application should either examine the return value or check
the floating point exception flags to detect exceptions.
See attributes(5) for descriptions of the following attributes:
tab() box; cw(2.75i) |cw(2.75i) lw(2.75i) |lw(2.75i) ATTRIBUTE TYPEATTRIBUTE VALUE _ Interface Stability<hy>
Standard _ MT-LevelMT-Safe
exp(3M), feclearexcept(3M), fetestexcept(3M), ilogb(3M), log1p(3M), math.h(3HEAD), attributes(5), stan<hy>
dards(5)
