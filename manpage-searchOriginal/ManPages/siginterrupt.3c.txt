<beginning of page>
siginterrupt <-> allow signals to interrupt functions
#include <signal.h>
int siginterrupt(int sig, int flag);
The siginterrupt() function changes the restart behavior when a function is interrupted by the specified signal. The
function siginterrupt(sig, flag) has an effect as if implemented as:
 siginterrupt(int sig, int flag) {
  int ret;
  struct sigaction act;
  (void) sigaction(sig, NULL, &act);
  if (flag)
  act.sa_flags &= SA_RESTART;
  else
  act.sa_flags |= SA_RESTART;
  ret = sigaction(sig, &act, NULL);
  return ret;
 }
Upon successful completion, siginterrupt() returns 0. Otherwise, <mi>1 is returned and errno is set to indicate the er<hy>
ror.
The siginterrupt() function will fail if:
EINVAL The sig argument is not a valid signal number.
The siginterrupt() function supports programs written to historical system interfaces. A standard-conforming appli<hy>
cation, when being written or rewritten, should use sigaction(2) with the SA_RESTART flag instead of siginter<hy>
rupt().
See attributes(5) for descriptions of the following attributes:
tab() box; cw(2.75i) |cw(2.75i) lw(2.75i) |lw(2.75i) ATTRIBUTE TYPEATTRIBUTE VALUE _ Interface Stability<hy>
Standard _ MT-LevelMT-Safe
sigaction(2), signal.h(3HEAD), attributes(5), standards(5)
