<beginning of page>
mlib_VectorMulSShift_U8_Mod, mlib_VectorMulSShift_U8_Sat, mlib_VectorMulSShift_U8C_Mod, mlib_Vector<hy>
MulSShift_U8C_Sat, mlib_VectorMulSShift_S8_Mod, mlib_VectorMulSShift_S8_Sat, mlib_Vector<hy>
MulSShift_S8C_Mod, mlib_VectorMulSShift_S8C_Sat, mlib_VectorMulSShift_S16_Mod, mlib_Vector<hy>
MulSShift_S16_Sat, mlib_VectorMulSShift_S16C_Mod, mlib_VectorMulSShift_S16C_Sat, mlib_Vector<hy>
MulSShift_S32_Mod, mlib_VectorMulSShift_S32_Sat, mlib_VectorMulSShift_S32C_Mod, mlib_Vector<hy>
MulSShift_S32C_Sat <-> vector multiplication by scalar plus shifting, in place
cc [ flag... ] file... -lmlib [ library... ]
#include <mlib.h>
mlib_status mlib_VectorMulSShift_U8_Mod(mlib_u8 *xz,
 const mlib_u8 *c, mlib_s32 n, mlib_s32 shift);
mlib_status mlib_VectorMulSShift_U8_Sat(mlib_u8 *xz,
 const mlib_u8 *c, mlib_s32 n, mlib_s32 shift);
mlib_status mlib_VectorMulSShift_U8C_Mod(mlib_u8 *xz,
 const mlib_u8 *c, mlib_s32 n, mlib_s32 shift);
mlib_status mlib_VectorMulSShift_U8C_Sat(mlib_u8 *xz,
 const mlib_u8 *c, mlib_s32 n, mlib_s32 shift);
mlib_status mlib_VectorMulSShift_S8_Mod(mlib_s8 *xz,
 const mlib_s8 *c, mlib_s32 n, mlib_s32 shift);
mlib_status mlib_VectorMulSShift_S8_Sat(mlib_s8 *xz,
 const mlib_s8 *c, mlib_s32 n, mlib_s32 shift);
mlib_status mlib_VectorMulSShift_S8C_Mod(mlib_s8 *xz,
 const mlib_s8 *c, mlib_s32 n, mlib_s32 shift);
mlib_status mlib_VectorMulSShift_S8C_Sat(mlib_s8 *xz,
 const mlib_s8 *c, mlib_s32 n, mlib_s32 shift);
mlib_status mlib_VectorMulSShift_S16_Mod(mlib_s16 *xz,
 const mlib_s16 *c, mlib_s32 n, mlib_s32 shift);
mlib_status mlib_VectorMulSShift_S16_Sat(mlib_s16 *xz,
 const mlib_s16 *c, mlib_s32 n, mlib_s32 shift);
mlib_status mlib_VectorMulSShift_S16C_Mod(mlib_s16 *xz,
 const mlib_s16 *c, mlib_s32 n, mlib_s32 shift);
mlib_status mlib_VectorMulSShift_S16C_Sat(mlib_s16 *xz,
 const mlib_s16 *c, mlib_s32 n, mlib_s32 shift);
mlib_status mlib_VectorMulSShift_S32_Mod(mlib_s32 *xz,
 const mlib_s32 *c, mlib_s32 n, mlib_s32 shift);
mlib_status mlib_VectorMulSShift_S32_Sat(mlib_s32 *xz,
 const mlib_s32 *c, mlib_s32 n, mlib_s32 shift);
mlib_status mlib_VectorMulSShift_S32C_Mod(mlib_s32 *xz,
 const mlib_s32 *c, mlib_s32 n, mlib_s32 shift);
mlib_status mlib_VectorMulSShift_S32C_Sat(mlib_s32 *xz,
 const mlib_s32 *c, mlib_s32 n, mlib_s32 shift);
Each of these functions performs an in-place multiplication of a vector by a scalar and shifts the result.
For real data, the following equation is used:
 xz[i] = xz[i] * c[0] * 2**(-shift)
where i = 0, 1, ..., (n - 1).
<beginning of page>
For complex data, the following equation is used:
 tmp = xz[2*i]
 xz[2*i] = (tmp*c[0] - xz[2*i + 1]*c[1]) * 2**(-shift)
 xz[2*i + 1] = (tmp*c[1] + xz[2*i + 1]*c[0]) * 2**(-shift)
where i = 0, 1, ..., (n - 1).
Each of the functions takes the following arguments:
xz Pointer to the first element of the source and result vector.
c Pointer to the source scalar. When the function is used with complex data types, c[0] contains the real part of the
scalar, and c[1] contains the imaginary part of the scalar.
n Number of elements in each vector.
shift Right shifting factor. The ranges of valid shift are:
 1 <<=> shift <<=> 8 for U8, S8, U8C, S8C types
 1 <<=> shift <<=> 16 for S16, S16C types
 1 <<=> shift <<=> 31 for S32, S32C types
Each of the functions returns MLIB_SUCCESS if successful. Otherwise it returns MLIB_FAILURE.
See attributes(5) for descriptions of the following attributes:
tab() box; cw(2.75i) |cw(2.75i) lw(2.75i) |lw(2.75i) ATTRIBUTE TYPEATTRIBUTE VALUE _ Interface Stability<hy>
Committed _ MT-LevelMT-Safe
mlib_VectorMulSShift_U8_U8_Mod(3MLIB), attributes(5)
