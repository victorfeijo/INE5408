<beginning of page>
libdoor <-> doors library
cc [ flag... ] file... [ library... ]
#include <door.h>
Historically, functions in this library provided programmatic access to doors, including the ability to create and call
them. This functionality now resides in libc(3LIB).
Doors are a fast light-weight RPC mechanism for secure control transfer between processes on the same machine.
Conceptually, a thread in one process can issue a call using a door descriptor that causes code to be executed in an<hy>
other process and then returns using the traditional synchronous RPC model. Doors can also be used to pass data
and file descriptors between processes.
This library is maintained to provide backward compatibility for both runtime and compilation environments. The
shared object is implemented as a filter on libc.so.1. New application development need not specify -ldoor.
The shared object libdoor.so.1 provides the public interfaces defined below. See Intro(3) for additional information
on shared object interfaces.
tab(); lw(2.75i) lw(2.75i) lw(2.75i) lw(2.75i) door_binddoor_call door_createdoor_cred door_infodoor_return
door_revokedoor_server_create door_ucreddoor_unbind
/lib/libdoor.so.1 shared object
/lib/64/libdoor.so.1 64-bit shared object
See attributes(5) for descriptions of the following attributes:
tab() box; cw(2.75i) |cw(2.75i) lw(2.75i) |lw(2.75i) ATTRIBUTE TYPEATTRIBUTE VALUE _ AvailabilitySUN<hy>
Wcsl MT-LevelSafe
Intro(3), libc(3LIB), attributes(5)
Stevens, W. Richard. UNIX Network Programming, Volume 2: Interprocess Communications, 2/e. Tucson, Ariz.:
Prentice Hall, 1999.
