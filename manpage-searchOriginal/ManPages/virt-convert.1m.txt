<beginning of page>
virt-convert <-> convert virtual machines between formats
virt-convert [option]... input.vmx | input-dir [output.xml | output-dir]
The virt-convert program is a command line tool for converting virtual machines (VMs) from one format to anoth<hy>
er. It accepts either a VM definition file (such as VMware vmx format) or a directory containing a VM. By default, a
new VM definition file, and converted disk images, will be placed in a new output directory.
If an output directory is specified, it will be created if necessary, and the output VM definition placed within the new
directory, along with any disk images, as needed.
If an output VM definition file is specified, it will be created alongside any disks in the same directory.
Any of the following options can be omitted, in which case virt-convert will use defaults when required. An input
VM definition or containing directory must be provided. By default, an output directory is generated based upon the
name of the VM. The default input format is VMware vmx, and the default output format is a libvirt "image" XML
definition.
-a, --arch=arch
Architecture of the virtual machine (i686, x86_64, ppc). Defaults to that of the host machine.
-D, --disk-format=format
Output disk format, or none if no conversion should be performed. formatis one of:
none
No disks are converted or copied.
vmdk
VMWare VMDK format
raw
raw file
vdisk
vdisk format (see vdiskadm(1M))
-d, --debug
Display debugging information.
-h, --help
Display the help message and exit.
-i, --input-format format
Input format. Currently, vmx is the only supported input format.
--noacpi
Override the OS type and variant to disable the ACPI setting for fully virtualized guest.
--noapic
Override the OS type and variant to disable the APIC setting for fully virtualized guest.
<beginning of page>
-o, --output-format format
Output format. Currently, the supported output formats are virt-instance and virt-image. virt-instance is the rec<hy>
ommended format for Solaris.
--os-type=os_type
Optimize the guest configuration for a type of operating system. This will attempt to pick the most suitable ACPI
and APIC settings, optimally supported mouse drivers, and generally accommodate other operating system quirks.
See virt-install(1M) for a list of valid operating system types.
--os-variant=os_variant
Further optimize the guest configuration for a specific operating system variant. This parameter is optional. See virt-
install(1M) for a list of valid operating system variants.
-p, --paravirt
Create a paravirtualized guest image. Convert machine to a paravirtualized Xen-based image.
-q, --quiet
Avoid verbose output.
-v, --hvm
Create a fully virtualized guest image. Convert machine to a hvm/qemu-based image (this is the default if --par<hy>
avirt is not specified).
Example 1 Converting a VMware VMX appliance
The following sequence of commands converts a VMware VMX appliance and imports it into Solaris xVM.
 # virt-convert -o virt-instance /guests/vmx-appliance/ \
 /guests/xvm-appliance/
 # virsh define --relative-path=/guests/xvm-appliance/ \
 \guests/xvm-appliance/appliance.xml
See attributes(5) for descriptions of the following attributes:
tab() box; cw(2.75i) |cw(2.75i) lw(2.75i) |lw(2.75i) ATTRIBUTE TYPEATTRIBUTE VALUE _ AvailabilitySUN<hy>
Wxvmu _ Interface StabilityVolatile
vdiskadm(1M), virt-install(1M), attributes(5), xvm(5)
Not all conversions will result in a working guest installation. If the source OS image is configured to use SCSI
disks, the use of IDE disks may cause the OS boot to fail. Some images may be configured to use the VMware driv<hy>
ers such as vlance. In the vlance case and in general, device emulation support may not be sufficient for all OS in<hy>
stallations.
Written by Joey Boggs and John Levon.
See the AUTHORS file in the source distribution for the complete list of credits.
