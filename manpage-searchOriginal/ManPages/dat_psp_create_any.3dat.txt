<beginning of page>
dat_psp_create_any <-> create a persistent Public Service Point
cc [ flag... ] file... -ldat [ library... ]
#include <dat/udat.h>
DAT_RETURN
 dat_psp_create_any(
 IN DAT_IA_HANDLE ia_handle,
 IN DAT_CONN_QUAL conn_qual,
 IN DAT_EVD_HANDLE evd_handle,
 IN DAT_PSP_FLAGS psp_flags,
 OUT DAT_PSP_HANDLE *psp_handle
 )
ia_handle Handle for an instance of DAT IA.
conn_qual Connection Qualifier of the IA on which the Public Service Point is listening.
evd_handle Event Dispatcher that provides the Connection Requested Events to the Consumer. The size of the event
queue for the Event Dispatcher controls the size of the backlog for the created Public Service Point.
psp_flags Flag that indicates whether the Provider or Consumer creates an Endpoint per arrived Connection Request.
The value of DAT_PSP_PROVIDER indicates that the Consumer wants to get an Endpoint from the Provider; a
value of DAT_PSP_CONSUMER means the Consumer does not want the Provider to provide an Endpoint for each
arrived Connection Request.
psp_handle Handle to an opaque Public Service Point.
The dat_psp_create_any() function creates a persistent Public Service Point that can receive multiple requests for
connection and generate multiple Connection Request instances that are delivered through the specified Event Dis<hy>
patcher in Notification events.
The dat_psp_create_any() function allocates an unused Connection Qualifier, creates a Public Service point for it,
and returns both the allocated Connection Qualifier and the created Public Service Point to the Consumer.
The allocated Connection Qualifier should be chosen from "nonprivileged" ports that are not currently used or re<hy>
served by any user or kernel Consumer or host ULP of the IA. The format of allocated Connection Qualifier returned
is specific to IA transport type.
The dat_psp_create_any() function is blocking. When the Public Service Point is created, DAT_SUCCESS is re<hy>
turned, psp_handle contains a handle to an opaque Public Service Point Object, and conn_qual contains the allocat<hy>
ed Connection Qualifier. When return is not DAT_SUCCESS, psp_handle and conn_qual return values are unde<hy>
fined.
There is no explicit backlog for a Public Service Point. Instead, Consumers can control the size of backlog through
the queue size of the associated Event Dispatcher.
The psp_flags parameter allows Consumers to request that the Provider create an implicit Endpoint for each incom<hy>
ing Connection Request, or request that the Provider should not create one per Connection Request. If the Provider
cannot satisfy the request, the operation shall fail and DAT_MODEL_NOT_SUPPORTED is returned.
All Endpoints created by the Provider have DAT_HANDLE_NULL for the Protection Zone and all Event Dis<hy>
patchers. The Provider sets up Endpoint attributes to match the Active side connection request. The Consumer can
change Endpoint parameters. Consumers should change Endpoint parameters, especially PZ and EVD, and are ad<hy>
vised to change parameters for local accesses prior to the connection request acceptance with the Endpoint.
DAT_SUCCESS The operation was successful.
DAT_INSUFFICIENT_RESOURCES The operation failed due to resource limitations.
<beginning of page>
DAT_INVALID_HANDLE The ia_handle or evd_handle parameter is invalid.
DAT_INVALID_PARAMETER The conn_qual or psp_flags parameter is invalid.
DAT_CONN_QUAL_UNAVAILABLE No Connection Qualifiers available.
DAT_MODEL_NOT_SUPPORTED The requested Model was not supported by the Provider.
See attributes(5) for descriptions of the following attributes:
tab() box; cw(2.75i) |cw(2.75i) lw(2.75i) |lw(2.75i) ATTRIBUTE TYPEATTRIBUTE VALUE _ Interface Stability<hy>
Standard: uDAPL, 1.1, 1.2 _ MT-LevelSafe
libdat(3LIB), attributes(5)
