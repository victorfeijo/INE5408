<beginning of page>
iconv_open <-> code conversion allocation function
#include <iconv.h>
iconv_t iconv_open(const char *tocode, const char *fromcode);
The iconv_open() function returns a conversion descriptor that describes a conversion from the codeset specified by
the string pointed to by the fromcode argument to the codeset specified by the string pointed to by the tocode argu<hy>
ment. For state-dependent encodings, the conversion descriptor will be in a codeset-dependent initial shift state,
ready for immediate use with the iconv(3C) function.
Settings of fromcode and tocode and their permitted combinations are implementation-dependent.
The iconv_open() function supports the alias of the encoding name specified in tocode and fromcode. The alias ta<hy>
ble of the encoding name is described in the file /usr/lib/iconv/alias. See alias(4).
A conversion descriptor remains valid in a process until that process closes it.
For examples using the iconv_open() function, see iconv(3C).
Upon successful completion iconv_open() returns a conversion descriptor for use on subsequent calls to iconv().
Otherwise, iconv_open() returns (iconv_t) <mi>1 and sets errno to indicate the error.
The iconv_open function may fail if:
EMFILE {OPEN_MAX} files descriptors are currently open in the calling process.
ENFILE Too many files are currently open in the system.
ENOMEM Insufficient storage space is available.
EINVAL The conversion specified by fromcode and tocode is not supported by the implementation.
/usr/lib/iconv/alias alias table file of the encoding name
See attributes(5) for descriptions of the following attributes:
tab() box; cw(2.75i) |cw(2.75i) lw(2.75i) |lw(2.75i) ATTRIBUTE TYPEATTRIBUTE VALUE _ Interface Stability<hy>
Standard _ MT-LevelMT-Safe
exec(2), iconv(3C), iconv_close(3C), malloc(3C), alias(4), attributes(5)
The iconv_open() function uses malloc(3C) to allocate space for internal buffer areas. iconv_open() may fail if
there is insufficient storage space to accommodate these buffers.
Portable applications must assume that conversion descriptors are not valid after a call to one of the exec functions
(see exec(2)).
