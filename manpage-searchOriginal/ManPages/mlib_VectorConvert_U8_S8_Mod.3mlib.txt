<beginning of page>
mlib_VectorConvert_U8_S8_Mod, mlib_VectorConvert_U8_S16_Mod, mlib_VectorConvert_U8_S32_Mod,
mlib_VectorConvert_S8_U8_Mod, mlib_VectorConvert_S8_S16_Mod, mlib_VectorConvert_S8_S32_Mod,
mlib_VectorConvert_S16_U8_Mod, mlib_VectorConvert_S16_S8_Mod, mlib_VectorConvert_S16_S32_Mod,
mlib_VectorConvert_S32_U8_Mod, mlib_VectorConvert_S32_S8_Mod, mlib_VectorConvert_S32_S16_Mod,
mlib_VectorConvert_U8C_S8C_Mod, mlib_VectorConvert_U8C_S16C_Mod, mlib_VectorCon<hy>
vert_U8C_S32C_Mod, mlib_VectorConvert_S8C_U8C_Mod, mlib_VectorConvert_S8C_S16C_Mod, mlib_Vector<hy>
Convert_S8C_S32C_Mod, mlib_VectorConvert_S16C_U8C_Mod, mlib_VectorConvert_S16C_S8C_Mod,
mlib_VectorConvert_S16C_S32C_Mod, mlib_VectorConvert_S32C_U8C_Mod, mlib_VectorCon<hy>
vert_S32C_S8C_Mod, mlib_VectorConvert_S32C_S16C_Mod, mlib_VectorConvert_U8_S8_Sat, mlib_VectorCon<hy>
vert_U8_S16_Sat, mlib_VectorConvert_U8_S32_Sat, mlib_VectorConvert_S8_U8_Sat, mlib_VectorCon<hy>
vert_S8_S16_Sat, mlib_VectorConvert_S8_S32_Sat, mlib_VectorConvert_S16_U8_Sat, mlib_VectorCon<hy>
vert_S16_S8_Sat, mlib_VectorConvert_S16_S32_Sat, mlib_VectorConvert_S32_U8_Sat, mlib_VectorCon<hy>
vert_S32_S8_Sat, mlib_VectorConvert_S32_S16_Sat, mlib_VectorConvert_U8C_S8C_Sat, mlib_VectorCon<hy>
vert_U8C_S16C_Sat, mlib_VectorConvert_U8C_S32C_Sat, mlib_VectorConvert_S8C_U8C_Sat, mlib_VectorCon<hy>
vert_S8C_S16C_Sat, mlib_VectorConvert_S8C_S32C_Sat, mlib_VectorConvert_S16C_U8C_Sat, mlib_VectorCon<hy>
vert_S16C_S8C_Sat, mlib_VectorConvert_S16C_S32C_Sat, mlib_VectorConvert_S32C_U8C_Sat, mlib_Vector<hy>
Convert_S32C_S8C_Sat, mlib_VectorConvert_S32C_S16C_Sat <-> vector data type convert
cc [ flag... ] file... -lmlib [ library... ]
#include <mlib.h>
mlib_status mlib_VectorConvert_U8_S8_Mod(mlib_u8 *z, const mlib_s8 *x,
 mlib_s32 n);
mlib_status mlib_VectorConvert_U8_S16_Mod(mlib_u8 *z, const mlib_s16 *x,
 mlib_s32 n);
mlib_status mlib_VectorConvert_U8_S32_Mod(mlib_u8 *z, const mlib_s32 *x,
 mlib_s32 n);
mlib_status mlib_VectorConvert_S8_U8_Mod(mlib_s8 *z, const mlib_u8 *x,
 mlib_s32 n);
mlib_status mlib_VectorConvert_S8_S16_Mod(mlib_s8 *z, const mlib_s16 *x,
 mlib_s32 n);
mlib_status mlib_VectorConvert_S8_S32_Mod(mlib_s8 *z, const mlib_s32 *x,
 mlib_s32 n);
mlib_status mlib_VectorConvert_S16_U8_Mod(mlib_s16 *z, const mlib_u8 *x,
 mlib_s32 n);
mlib_status mlib_VectorConvert_S16_S8_Mod(mlib_s16 *z, const mlib_s8 *x,
 mlib_s32 n);
mlib_status mlib_VectorConvert_S16_S32_Mod(mlib_s16 *z, const mlib_s32 *x,
 mlib_s32 n);
mlib_status mlib_VectorConvert_S32_U8_Mod(mlib_s32 *z, const mlib_u8 *x,
 mlib_s32 n);
mlib_status mlib_VectorConvert_S32_S8_Mod(mlib_s32 *z, const mlib_s8 *x,
 mlib_s32 n);
mlib_status mlib_VectorConvert_S32_S16_Mod(mlib_s32 *z, const mlib_s16 *x,
 mlib_s32 n);
mlib_status mlib_VectorConvert_U8C_S8C_Mod(mlib_u8 *z, const mlib_s8 *x,
 mlib_s32 n);
mlib_status mlib_VectorConvert_U8C_S16C_Mod(mlib_u8 *z, const mlib_s16 *x,
 mlib_s32 n);
mlib_status mlib_VectorConvert_U8C_S32C_Mod(mlib_u8 *z, const mlib_s32 *x,
 mlib_s32 n);
mlib_status mlib_VectorConvert_S8C_U8C_Mod(mlib_s8 *z, const mlib_u8 *x,
<beginning of page>
 mlib_s32 n);
mlib_status mlib_VectorConvert_S8C_S16C_Mod(mlib_s8 *z, const mlib_s16 *x,
 mlib_s32 n);
mlib_status mlib_VectorConvert_S8C_S32C_Mod(mlib_s8 *z, const mlib_s32 *x,
 mlib_s32 n);
mlib_status mlib_VectorConvert_S16C_U8C_Mod(mlib_s16 *z, const mlib_u8 *x,
 mlib_s32 n);
mlib_status mlib_VectorConvert_S16C_S8C_Mod(mlib_s16 *z, const mlib_s8 *x,
 mlib_s32 n);
mlib_status mlib_VectorConvert_S16C_S32C_Mod(mlib_s16 *z, const mlib_s32 *x,
 mlib_s32 n);
mlib_status mlib_VectorConvert_S32C_U8C_Mod(mlib_s32 *z, const mlib_u8 *x,
 mlib_s32 n);
mlib_status mlib_VectorConvert_S32C_S8C_Mod(mlib_s32 *z, const mlib_s8 *x,
 mlib_s32 n);
mlib_status mlib_VectorConvert_S32C_S16C_Mod(mlib_s32 *z, const mlib_s16 *x,
 mlib_s32 n);
mlib_status mlib_VectorConvert_U8_S8_Sat(mlib_u8 *z, const mlib_s8 *x,
 mlib_s32 n);
mlib_status mlib_VectorConvert_U8_S16_Sat(mlib_u8 *z, const mlib_s16 *x,
 mlib_s32 n);
mlib_status mlib_VectorConvert_U8_S32_Sat(mlib_u8 *z, const mlib_s32 *x,
 mlib_s32 n);
mlib_status mlib_VectorConvert_S8_U8_Sat(mlib_s8 *z, const mlib_u8 *x,
 mlib_s32 n);
mlib_status mlib_VectorConvert_S8_S16_Sat(mlib_s8 *z, const mlib_s16 *x,
 mlib_s32 n);
mlib_status mlib_VectorConvert_S8_S32_Sat(mlib_s8 *z, const mlib_s32 *x,
 mlib_s32 n);
mlib_status mlib_VectorConvert_S16_U8_Sat(mlib_s16 *z, const mlib_u8 *x,
 mlib_s32 n);
mlib_status mlib_VectorConvert_S16_S8_Sat(mlib_s16 *z, const mlib_s8 *x,
 mlib_s32 n);
mlib_status mlib_VectorConvert_S16_S32_Sat(mlib_s16 *z, const mlib_s32 *x,
 mlib_s32 n);
mlib_status mlib_VectorConvert_S32_U8_Sat(mlib_s32 *z, const mlib_u8 *x,
 mlib_s32 n);
mlib_status mlib_VectorConvert_S32_S8_Sat(mlib_s32 *z, const mlib_s8 *x,
 mlib_s32 n);
mlib_status mlib_VectorConvert_S32_S16_Sat(mlib_s32 *z, const mlib_s16 *x,
 mlib_s32 n);
mlib_status mlib_VectorConvert_U8C_S8C_Sat(mlib_u8 *z, const mlib_s8 *x,
 mlib_s32 n);
mlib_status mlib_VectorConvert_U8C_S16C_Sat(mlib_u8 *z, const mlib_s16 *x,
<beginning of page>
 mlib_s32 n);
mlib_status mlib_VectorConvert_U8C_S32C_Sat(mlib_u8 *z, const mlib_s32 *x,
 mlib_s32 n);
mlib_status mlib_VectorConvert_S8C_U8C_Sat(mlib_s8 *z, const mlib_u8 *x,
 mlib_s32 n);
mlib_status mlib_VectorConvert_S8C_S16C_Sat(mlib_s8 *z, const mlib_s16 *x,
 mlib_s32 n);
mlib_status mlib_VectorConvert_S8C_S32C_Sat(mlib_s8 *z, const mlib_s32 *x,
 mlib_s32 n);
mlib_status mlib_VectorConvert_S16C_U8C_Sat(mlib_s16 *z, const mlib_u8 *x,
 mlib_s32 n);
mlib_status mlib_VectorConvert_S16C_S8C_Sat(mlib_s16 *z, const mlib_s8 *x,
 mlib_s32 n);
mlib_status mlib_VectorConvert_S16C_S32C_Sat(mlib_s16 *z, const mlib_s32 *x,
 mlib_s32 n);
mlib_status mlib_VectorConvert_S32C_U8C_Sat(mlib_s32 *z, const mlib_u8 *x,
 mlib_s32 n);
mlib_status mlib_VectorConvert_S32C_S8C_Sat(mlib_s32 *z, const mlib_s8 *x,
 mlib_s32 n);
mlib_status mlib_VectorConvert_S32C_S16C_Sat(mlib_s32 *z, const mlib_s16 *x,
 mlib_s32 n);
Each of these functions copies data from one vector to another vector, of different data types.
For real data, the following equation is used:
 z[i] = x[i]
where i = 0, 1, ..., (n - 1).
For complex data, the following equation is used:
 z[2*i] = x[2*i]
 z[2*i + 1] = x[2*i + 1]
where i = 0, 1, ..., (n - 1).
See the following tables for available variations of the data type convert function.
tab(); cw(1.1i) cw(1.1i) cw(1.1i) cw(1.1i) cw(1.1i) lw(1.1i) lw(1.1i) lw(1.1i) lw(1.1i) lw(1.1i) Type [*]U8S8S16S32
_ U8YYY S8YYY _ S16YYY _ S32YYY
tab(); cw(1.1i) cw(1.1i) cw(1.1i) cw(1.1i) cw(1.1i) lw(1.1i) lw(1.1i) lw(1.1i) lw(1.1i) lw(1.1i) Type
[*]U8CS8CS16CS32C _ U8CYYY _ S8CYYY _ S16CYYY _ S32CYYY
[*] Each row represents a source data type. Each column represents a destination data type.
<beginning of page>
Each of the functions takes the following arguments:
z Pointer to the first element of the destination vector.
x Pointer to the first element of the source vector.
n Number of elements in the vectors.
Each of the functions returns MLIB_SUCCESS if successful. Otherwise it returns MLIB_FAILURE.
See attributes(5) for descriptions of the following attributes:
tab() box; cw(2.75i) |cw(2.75i) lw(2.75i) |lw(2.75i) ATTRIBUTE TYPEATTRIBUTE VALUE _ Interface Stability<hy>
Committed _ MT-LevelMT-Safe
attributes(5)
