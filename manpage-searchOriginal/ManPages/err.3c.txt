<beginning of page>
err, verr, errx, verrx, warn, vwarn, warnx, vwarnx <-> formatted error messages
#include <err.h>
void err(int eval, const char *fmt, ...);
void verr(int eval, const char *fmt, va_list args);
void errx(int eval, const char *fmt, ...);
void verrx(int eval, const char *fmt, va_list args);
void warn(const char *fmt, ...);
void vwarn(const char *fmt, va_list args);
void warnx(const char *fmt, ...);
void vwarnx(const char *fmt, va_list args);
The err() and warn() family of functions display a formatted error message on the standard error output. In all cas<hy>
es, the last component of the program name, followed by a colon character and a space, are output. If the fmt argu<hy>
ment is not NULL, the formatted error message is output. In the case of the err(), verr(), warn(), and vwarn() func<hy>
tions, the error message string affiliated with the current value of the global variable errno is output next, preceded
by a colon character and a space if fmt is not NULL. In all cases, the output is followed by a newline character. The
errx(), verrx(), warnx(), and vwarnx() functions will not output this error message string.
The err(), verr(), errx(), and verrx() functions do not return, but instead cause the program to terminate with the
status value given by the argument status. Example 1 Display the current errno information string and terminate
with status indicating failure.
 if ((p = malloc(size)) == NULL)
  err(EXIT_FAILURE, NULL);
 if ((fd = open(file_name, O_RDONLY, 0)) == -1)
  err(EXIT_FAILURE, "%s", file_name);
Example 2 Display an error message and terminate with status indicating failure.
 if (tm.tm_hour < START_TIME)
  errx(EXIT_FAILURE, "too early, wait until %s", start_time_string);
Example 3 Warn of an error.
 if ((fd = open(raw_device, O_RDONLY, 0)) == -1)
  warnx("%s: %s: trying the block device",
  raw_device, strerror(errno));
 if ((fd = open(block_device, O_RDONLY, 0)) == -1)
  warn("%s", block_device);
It is important never to pass a string with user-supplied data as a format without using `%s'. An attacker can put for<hy>
mat specifiers in the string to mangle the stack, leading to a possible security hole. This holds true even if the string
has been built ``by hand'' using a function like snprintf(3C), as the resulting string can still contain user-supplied
conversion specifiers for later interpolation by the err() and warn() functions.
Always be sure to use the proper secure idiom:
 err(1, "%s", string);
See attributes(5) for descriptions of the following attributes:
tab() box; cw(2.75i) |cw(2.75i) lw(2.75i) |lw(2.75i) ATTRIBUTE TYPEATTRIBUTE VALUE _ Interface Stability<hy>
Committed _ MT-LevelSafe with Exceptions
<beginning of page>
These functions are safe to use in multithreaded applications as long as setlocale(3C) is not being called to change
the locale.
exit(3C), getexecname(3C), setlocale(3C), strerror(3C), attributes(5)
