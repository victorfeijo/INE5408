<beginning of page>
ddi_periodic_delete <-> cancel nanosecond periodic timeout requests
#include <sys/dditypes.h>
#include <sys/sunddi.h>
void ddi_periodic_delete(ddi_periodic_t req);
Solaris DDI specific (Solaris DDI)
req ddi_periodic_t opaque value returned by ddi_periodic_add(9F)
The ddi_periodic_delete() function cancels the ddi_periodic_add(9F) request that was previously issued.
As with untimeout(9F), calling ddi_periodic_delete() against a periodic timeout request which is either running on
another CPU, or has already been canceled causes no problems. Unlike untimeout(9F), there are no restrictions on
the lock which might be held across the call to ddi_periodic_delete().
The ddi_periodic_delete() function may be called from user or kernel context. Example 1 Cancelling a timeout re<hy>
quest
In the following example, the device driver cancels the timeout request by calling ddi_periodic_delete() against the
request that was previously issued.
 /*
 * Stop the periodic timer
 */
 static void
 stop_periodic_timer(struct my_state *statep)
 {
  ddi_periodic_delete(statep->periodic_id);
  delay(1); /* wait for one tick */
  mutex_destory(&statep->lock);
 }
 static void
 start_periodic_timer(struct my_state *statep)
 {
  hrtime_t interval = CHECK_INTERVAL;
  mutex_init(&statep->lock, NULL, MUTEX_DRIVER,
  (void *)DDI_IPL_0);
  /*
  * Register my_callback which is invoked periodically
  * in CHECK_INTERVAL in kernel context.
  */
  statep->periodic_id = ddi_periodic_add(my_periodic_func,
  statep, interval, DDI_IPL_0);
 }
 static void
 my_periodic_func(void *arg)
 {
  /*
  * This handler is invoked periodically.
  */
  struct my_state *statep = (struct my_state *)arg;
  mutex_enter(&statep->lock);
  if (load_unbalanced(statep)) {
  balance_tasks(statep);
  }
  mutex_exit(&statep->lock);
 }
<beginning of page>
cv_timedwait(9F), ddi_intr_get_pri(9F), ddi_periodic_add(9F), delay(9F), drv_usectohz(9F), qtimeout(9F),
quntimeout(9F), timeout(9F), untimeout(9F)
There might be a race between a callback invocation and ddi_periodic_delete(). A device driver should take a re<hy>
sponsibility for this avoidance if needed by using the kernel synchronization such as a mutex lock or calling de<hy>
lay(9F) as in the example above.
