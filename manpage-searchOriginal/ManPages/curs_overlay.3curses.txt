<beginning of page>
curs_overlay, overlay, overwrite, copywin <-> overlap and manipulate overlapped curses windows
cc [ flag ... ] file ... -lcurses [ library ... ]
#include <curses.h>
int overlay(WINDOW *srcwin, WINDOW *dstwin);
int overwrite(WINDOW *srcwin, WINDOW *dstwin);
int copywin(WINDOW *srcwin, WINDOW *dstwin, int sminrow,
 int smincol, int dminrow, int dmincol,
 int dmaxrow, int dmaxcol, int overlay);
The overlay() and overwrite() routines overlay srcwin on top of dstwin. scrwin and dstwin are not required to be the
same size; only text where the two windows overlap is copied. The difference is that overlay() is non-destructive
(blanks are not copied) whereas overwrite() is destructive.
The copywin() routine provides a finer granularity of control over the overlay() and overwrite() routines. Like in
the prefresh() routine, a rectangle is specified in the destination window, (dminrow, dmincol) and (dmaxrow, dmax<hy>
col), and the upper-left-corner coordinates of the source window, (sminrow, smincol). If the argument overlay is
true, then copying is non-destructive, as in overlay().
Routines that return an integer return ERR upon failure and an integer value other than ERR upon successful com<hy>
pletion.
See attributes(5) for descriptions of the following attributes:
tab() box; cw(2.75i) |cw(2.75i) lw(2.75i) |lw(2.75i) ATTRIBUTE TYPEATTRIBUTE VALUE _ MT-LevelUnsafe
curs_pad(3CURSES), curs_refresh(3CURSES), curses(3CURSES), attributes(5)
The header <curses.h> automatically includes the headers <stdio.h> and <unctrl.h>.
Note that overlay() and overwrite may be macros.
