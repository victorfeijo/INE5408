<beginning of page>
pause <-> suspend process until signal
#include <unistd.h>
int pause(void);
The pause() function suspends the calling process until it receives a signal. The signal must be one that is not cur<hy>
rently set to be ignored by the calling process.
If the signal causes termination of the calling process, pause() does not return.
If the signal is caught by the calling process and control is returned from the signal-catching function (see sig<hy>
nal(3C)), the calling process resumes execution from the point of suspension.
Since pause() suspends thread execution indefinitely unless interrupted by a signal, there is no successful comple<hy>
tion return value. If interrupted, it returns <mi>1 and sets errno to indicate the error.
The pause() function will fail if:
EINTR A signal is caught by the calling process and control is returned from the signal-catching function.
See attributes(5) for descriptions of the following attributes:
tab() box; cw(2.75i) |cw(2.75i) lw(2.75i) |lw(2.75i) ATTRIBUTE TYPEATTRIBUTE VALUE _ Interface Stability<hy>
Standard _ MT-LevelAsync-Signal-Safe
alarm(2), kill(2), signal(3C), wait(3C), attributes(5), standards(5)
