<beginning of page>
td_ta_map_addr2sync <-> get a synchronization object handle from a synchronization object's address
cc [ flag... ] file... -lc_db [ library... ]
#include <proc_service.h>
#include <thread_db.h>
td_ta_map_addr2sync(const td_thragent_t *ta_p, psaddr_t addr, td_synchandle_t *sh_p);
The td_ta_map_addr2sync() function produces the synchronization object handle of type td_synchandle_t that
corresponds to the address of the synchronization object (mutex, semaphore, condition variable, or reader/writer
lock). Some effort is made to validate addr and verify that it does indeed point at a synchronization object. The han<hy>
dle is returned in *sh_p.
TD_OK The call completed successfully.
TD_BADTA An invalid internal process handle was passed.
TD_BADPH There is a NULL external process handle associated with this internal process handle.
TD_BADSH The sh_p argument is NULL or addr does not appear to point to a valid synchronization object.
TD_DBERR A call to one of the imported interface routines failed.
TD_ERR addr is NULL, or a libc_db internal error occurred.
See attributes(5) for description of the following attributes:
tab() box; cw(2.75i) |cw(2.75i) lw(2.75i) |lw(2.75i) ATTRIBUTE TYPEATTRIBUTE VALUE _ MT-LevelSafe
libc_db(3LIB), attributes(5)
