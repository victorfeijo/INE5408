<beginning of page>
mlib_SignalConvertShift_U8_S8_Sat, mlib_SignalConvertShift_U8_S16_Sat, mlib_SignalCon<hy>
vertShift_U8_S32_Sat, mlib_SignalConvertShift_U8_F32_Sat, mlib_SignalConvertShift_U8S_S8S_Sat, mlib_Sig<hy>
nalConvertShift_U8S_S16S_Sat, mlib_SignalConvertShift_U8S_S32S_Sat, mlib_SignalCon<hy>
vertShift_U8S_F32S_Sat, mlib_SignalConvertShift_S8_U8_Sat, mlib_SignalConvertShift_S8_S16_Sat, mlib_Sig<hy>
nalConvertShift_S8_S32_Sat, mlib_SignalConvertShift_S8_F32_Sat, mlib_SignalConvertShift_S8S_U8S_Sat,
mlib_SignalConvertShift_S8S_S16S_Sat, mlib_SignalConvertShift_S8S_S32S_Sat, mlib_SignalCon<hy>
vertShift_S8S_F32S_Sat, mlib_SignalConvertShift_S16_U8_Sat, mlib_SignalConvertShift_S16_S8_Sat, mlib_Sig<hy>
nalConvertShift_S16_S32_Sat, mlib_SignalConvertShift_S16_F32_Sat, mlib_SignalConvertShift_S16S_U8S_Sat,
mlib_SignalConvertShift_S16S_S8S_Sat, mlib_SignalConvertShift_S16S_S32S_Sat, mlib_SignalCon<hy>
vertShift_S16S_F32S_Sat, mlib_SignalConvertShift_S32_U8_Sat, mlib_SignalConvertShift_S32_S8_Sat,
mlib_SignalConvertShift_S32_S16_Sat, mlib_SignalConvertShift_S32_F32_Sat, mlib_SignalCon<hy>
vertShift_S32S_U8S_Sat, mlib_SignalConvertShift_S32S_S8S_Sat, mlib_SignalConvertShift_S32S_S16S_Sat,
mlib_SignalConvertShift_S32S_F32S_Sat <-> data type convert with shifting
cc [ flag... ] file... -lmlib [ library... ]
#include <mlib.h>
mlib_status mlib_SignalConvertShift_U8_S8_Sat(mlib_u8 *dst,
 const mlib_s8 *src, mlib_s32 shift, mlib_s32 n);
mlib_status mlib_SignalConvertShift_U8_S16_Sat(mlib_u8 *dst,
 const mlib_s16 *src, mlib_s32 shift, mlib_s32 n);
mlib_status mlib_SignalConvertShift_U8_S32_Sat(mlib_u8 *dst,
 const mlib_s32 *src, mlib_s32 shift, mlib_s32 n);
mlib_status mlib_SignalConvertShift_U8_F32_Sat(mlib_u8 *dst,
 const mlib_f32 *src, mlib_s32 shift, mlib_s32 n);
mlib_status mlib_SignalConvertShift_U8S_S8S_Sat(mlib_u8 *dst,
 const mlib_s8 *src, mlib_s32 shift, mlib_s32 n);
mlib_status mlib_SignalConvertShift_U8S_S16S_Sat(mlib_u8 *dst,
 const mlib_s16 *src, mlib_s32 shift, mlib_s32 n);
mlib_status mlib_SignalConvertShift_U8S_S32S_Sat(mlib_u8 *dst,
 const mlib_s32 *src, mlib_s32 shift, mlib_s32 n);
mlib_status mlib_SignalConvertShift_U8S_F32S_Sat(mlib_u8 *dst,
 const mlib_f32 *src, mlib_s32 shift, mlib_s32 n);
mlib_status mlib_SignalConvertShift_S8_U8_Sat(mlib_s8 *dst,
 const mlib_u8 *src, mlib_s32 shift, mlib_s32 n);
mlib_status mlib_SignalConvertShift_S8_S16_Sat(mlib_s8 *dst,
 const mlib_s16 *src, mlib_s32 shift, mlib_s32 n);
mlib_status mlib_SignalConvertShift_S8_S32_Sat(mlib_s8 *dst,
 const mlib_s32 *src, mlib_s32 shift, mlib_s32 n);
mlib_status mlib_SignalConvertShift_S8_F32_Sat(mlib_s8 *dst,
 const mlib_f32 *src, mlib_s32 shift, mlib_s32 n);
mlib_status mlib_SignalConvertShift_S8S_U8S_Sat(mlib_s8 *dst,
 const mlib_u8 *src, mlib_s32 shift, mlib_s32 n);
mlib_status mlib_SignalConvertShift_S8S_S16S_Sat(mlib_s8 *dst,
 const mlib_s16 *src, mlib_s32 shift, mlib_s32 n);
mlib_status mlib_SignalConvertShift_S8S_S32S_Sat(mlib_s8 *dst,
 const mlib_s32 *src, mlib_s32 shift, mlib_s32 n);
mlib_status mlib_SignalConvertShift_S8S_F32S_Sat(mlib_s8 *dst,
 const mlib_f32 *src, mlib_s32 shift, mlib_s32 n);
mlib_status mlib_SignalConvertShift_S16_U8_Sat(mlib_s16 *dst,
 const mlib_u8 *src, mlib_s32 shift, mlib_s32 n);
<beginning of page>
mlib_status mlib_SignalConvertShift_S16_S8_Sat(mlib_s16 *dst,
 const mlib_s8 *src, mlib_s32 shift, mlib_s32 n);
mlib_status mlib_SignalConvertShift_S16_S32_Sat(mlib_s16 *dst,
 const mlib_s32 *src, mlib_s32 shift, mlib_s32 n);
mlib_status mlib_SignalConvertShift_S16_F32_Sat(mlib_s16 *dst,
 const mlib_f32 *src, mlib_s32 shift, mlib_s32 n);
mlib_status mlib_SignalConvertShift_S16S_U8S_Sat(mlib_s16 *dst,
 const mlib_u8 *src, mlib_s32 shift, mlib_s32 n);
mlib_status mlib_SignalConvertShift_S16S_S8S_Sat(mlib_s16 *dst,
 const mlib_s8 *src, mlib_s32 shift, mlib_s32 n);
mlib_status mlib_SignalConvertShift_S16S_S32S_Sat(mlib_s16 *dst,
 const mlib_s32 *src, mlib_s32 shift, mlib_s32 n);
mlib_status mlib_SignalConvertShift_S16S_F32S_Sat(mlib_s16 *dst,
 const mlib_f32 *src, mlib_s32 shift, mlib_s32 n);
mlib_status mlib_SignalConvertShift_S32_U8_Sat(mlib_s32 *dst,
 const mlib_u8 *src, mlib_s32 shift, mlib_s32 n);
mlib_status mlib_SignalConvertShift_S32_S8_Sat(mlib_s32 *dst,
 const mlib_s8 *src, mlib_s32 shift, mlib_s32 n);
mlib_status mlib_SignalConvertShift_S32_S16_Sat(mlib_s32 *dst,
 const mlib_s16 *src, mlib_s32 shift, mlib_s32 n);
mlib_status mlib_SignalConvertShift_S32_F32_Sat(mlib_s32 *dst,
 const mlib_f32 *src, mlib_s32 shift, mlib_s32 n);
mlib_status mlib_SignalConvertShift_S32S_U8S_Sat(mlib_s32 *dst,
 const mlib_u8 *src, mlib_s32 shift, mlib_s32 n);
mlib_status mlib_SignalConvertShift_S32S_S8S_Sat(mlib_s32 *dst,
 const mlib_s8 *src, mlib_s32 shift, mlib_s32 n);
mlib_status mlib_SignalConvertShift_S32S_S16S_Sat(mlib_s32 *dst,
 const mlib_s16 *src, mlib_s32 shift, mlib_s32 n);
mlib_status mlib_SignalConvertShift_S32S_F32S_Sat(mlib_s32 *dst,
 const mlib_f32 *src, mlib_s32 shift, mlib_s32 n);
Each of these functions performs data type convert with shifting.
The following equation is used:
 dst[i] = saturate(src[i] * 2**shift)
See the following tables for available variations of this group of data type convert functions.
tab(); cw(1.1i) cw(1.1i) cw(1.1i) cw(1.1i) cw(1.1i) lw(1.1i) lw(1.1i) lw(1.1i) lw(1.1i) lw(1.1i) Type [*]U8S8S16S32
_ U8YYY S8YYY _ S16YYY _ S32YYY _ F32YYYY
tab(); cw(1.1i) cw(1.1i) cw(1.1i) cw(1.1i) cw(1.1i) lw(1.1i) lw(1.1i) lw(1.1i) lw(1.1i) lw(1.1i) Type
[*]U8SS8SS16SS32S _ U8SYYY _ S8SYYY _ S16SYYY _ S32SYYY _ F32SYYYY
<beginning of page>
[*] Each row represents a source data type. Each column represents a destination data type.
Each of the functions takes the following arguments:
dst Destination signal array.
src Source signal array.
shift Left shifting factor.
n Number of samples in the source signal arrays.
Each of the functions returns MLIB_SUCCESS if successful. Otherwise it returns MLIB_FAILURE.
See attributes(5) for descriptions of the following attributes:
tab() box; cw(2.75i) |cw(2.75i) lw(2.75i) |lw(2.75i) ATTRIBUTE TYPEATTRIBUTE VALUE _ Interface Stability<hy>
Committed _ MT-LevelMT-Safe
mlib_SignalConvertShift_F32_U8(3MLIB), attributes(5)
