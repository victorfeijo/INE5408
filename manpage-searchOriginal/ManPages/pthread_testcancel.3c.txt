<beginning of page>
pthread_testcancel <-> create cancellation point in the calling thread
cc -mt [ flag... ] file... -lpthread [ library... ]
#include <pthread.h>
void pthread_testcancel(void);
The pthread_testcancel() function forces testing for cancellation. This is useful when you need to execute code
that runs for long periods without encountering cancellation points; such as a library routine that executes long-run<hy>
ning computations without cancellation points. This type of code can block cancellation for unacceptable long peri<hy>
ods of time. One strategy for avoiding blocking cancellation for long periods, is to insert calls to pthread_testcan<hy>
cel() in the long-running computation code and to setup a cancellation handler in the library code, if required.
The pthread_testcancel() function returns void.
The pthread_testcancel() function does not return errors.
See cancellation(5) for an example of using pthread_testcancel() to force testing for cancellation and a discussion
of cancellation concepts.
See attributes(5) for descriptions of the following attributes:
tab() box; cw(2.75i) |cw(2.75i) lw(2.75i) |lw(2.75i) ATTRIBUTE TYPEATTRIBUTE VALUE _ Interface Stability<hy>
Standard _ MT-LevelMT-Safe
Intro(3), pthread_cleanup_pop(3C), pthread_cleanup_push(3C), pthread_exit(3C), pthread_join(3C),
pthread_setcancelstate(3C), pthread_setcanceltype(3C), setjmp(3C), attributes(5), cancellation(5), condi<hy>
tion(5), standards(5)
The pthread_testcancel() function has no effect if cancellation is disabled.
Use pthread_testcancel() with pthread_setcanceltype() called with its canceltype set to PTHREAD_CAN<hy>
CEL_DEFERRED. The pthread_testcancel() function operation is undefined if pthread_setcanceltype() was
called with its canceltype argument set to PTHREAD_CANCEL_ASYNCHRONOUS.
It is possible to kill a thread when it is holding a resource, such as lock or allocated memory. If that thread has not
setup a cancellation cleanup handler to release the held resource, the application is "cancel-unsafe". See at<hy>
tributes(5) for a discussion of Cancel-Safety, Deferred-Cancel-Safety, and Asynchronous-Cancel-Safety.
