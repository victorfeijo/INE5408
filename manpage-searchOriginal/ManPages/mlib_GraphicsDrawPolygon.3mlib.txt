<beginning of page>
mlib_GraphicsDrawPolygon, mlib_GraphicsDrawPolygon_8, mlib_GraphicsDrawPolygon_32, mlib_Graphics<hy>
DrawPolygon_X_8, mlib_GraphicsDrawPolygon_X_32, mlib_GraphicsDrawPolygon_A_8, mlib_GraphicsDraw<hy>
Polygon_A_32, mlib_GraphicsDrawPolygon_B_8, mlib_GraphicsDrawPolygon_B_32, mlib_GraphicsDrawPoly<hy>
gon_G_8, mlib_GraphicsDrawPolygon_G_32, mlib_GraphicsDrawPolygon_Z_8, mlib_GraphicsDrawPoly<hy>
gon_Z_32, mlib_GraphicsDrawPolygon_AB_8, mlib_GraphicsDrawPolygon_AB_32, mlib_GraphicsDrawPoly<hy>
gon_ABG_8, mlib_GraphicsDrawPolygon_ABG_32, mlib_GraphicsDrawPolygon_ABGZ_8, mlib_GraphicsDraw<hy>
Polygon_ABGZ_32, mlib_GraphicsDrawPolygon_ABZ_8, mlib_GraphicsDrawPolygon_ABZ_32, mlib_Graphics<hy>
DrawPolygon_AG_8, mlib_GraphicsDrawPolygon_AG_32, mlib_GraphicsDrawPolygon_AGZ_8, mlib_Graphics<hy>
DrawPolygon_AGZ_32, mlib_GraphicsDrawPolygon_AZ_8, mlib_GraphicsDrawPolygon_AZ_32, mlib_Graphics<hy>
DrawPolygon_BG_8, mlib_GraphicsDrawPolygon_BG_32, mlib_GraphicsDrawPolygon_BGZ_8, mlib_Graphics<hy>
DrawPolygon_BGZ_32, mlib_GraphicsDrawPolygon_BZ_8, mlib_GraphicsDrawPolygon_BZ_32, mlib_Graphics<hy>
DrawPolygon_GZ_8, mlib_GraphicsDrawPolygon_GZ_32 <-> draw polygon
cc [ flag... ] file... -lmlib [ library... ]
#include <mlib.h>
mlib_status mlib_GraphicsDrawPolygon_8(mlib_image *buffer,
 const mlib_s16 *x, const mlib_s16 *y, mlib_s32 npoints, mlib_s32 c);
mlib_status mlib_GraphicsDrawPolygon_32(mlib_image *buffer,
 const mlib_s16 *x, const mlib_s16 *y, mlib_s32 npoints, mlib_s32 c);
mlib_status mlib_GraphicsDrawPolygon_X_8(mlib_image *buffer,
 const mlib_s16 *x, const mlib_s16 *y, mlib_s32 npoints, mlib_s32 c,
 mlib_s32 c2);
mlib_status mlib_GraphicsDrawPolygon_X_32(mlib_image *buffer,
 const mlib_s16 *x, const mlib_s16 *y, mlib_s32 npoints, mlib_s32 c,
 mlib_s32 c2);
mlib_status mlib_GraphicsDrawPolygon_A_8(mlib_image *buffer,
 const mlib_s16 *x, const mlib_s16 *y, mlib_s32 npoints, mlib_s32 c);
mlib_status mlib_GraphicsDrawPolygon_A_32(mlib_image *buffer,
 const mlib_s16 *x, const mlib_s16 *y, mlib_s32 npoints, mlib_s32 c);
mlib_status mlib_GraphicsDrawPolygon_B_8(mlib_image *buffer,
 const mlib_s16 *x, const mlib_s16 *y, mlib_s32 npoints,
 mlib_s32 c, mlib_s32 a);
mlib_status mlib_GraphicsDrawPolygon_B_32(mlib_image *buffer,
 const mlib_s16 *x, const mlib_s16 *y, mlib_s32 npoints, mlib_s32 c,
 mlib_s32 a);
mlib_status mlib_GraphicsDrawPolygon_G_8(mlib_image *buffer,
 const mlib_s16 *x, const mlib_s16 *y, mlib_s32 npoints,
 const mlib_s32 *c);
mlib_status mlib_GraphicsDrawPolygon_G_32(mlib_image *buffer,
 const mlib_s16 *x, const mlib_s16 *y,
 mlib_s32 npoints, const mlib_s32 *c);
mlib_status mlib_GraphicsDrawPolygon_Z_8(mlib_image *buffer,
 mlib_image *zbuffer, const mlib_s16 *x, const mlib_s16 *y,
 const mlib_s16 *z, mlib_s32 npoints, mlib_s32 c);
mlib_status mlib_GraphicsDrawPolygon_Z_32(mlib_image *buffer,
 mlib_image *zbuffer, const mlib_s16 *x, const mlib_s16 *y,
 const mlib_s16 *z, mlib_s32 npoints, mlib_s32 c);
mlib_status mlib_GraphicsDrawPolygon_AB_8(mlib_image *buffer,
 const mlib_s16 *x, const mlib_s16 *y,
 mlib_s32 npoints, mlib_s32 c, mlib_s32 a);
mlib_status mlib_GraphicsDrawPolygon_AB_32(mlib_image *buffer,
 const mlib_s16 *x, const mlib_s16 *y, mlib_s32 npoints, mlib_s32 c,
 mlib_s32 a);
<beginning of page>
mlib_status mlib_GraphicsDrawPolygon_ABG_8(mlib_image *buffer,
 const mlib_s16 *x, const mlib_s16 *y, mlib_s32 npoints,
 const mlib_s32 *c, mlib_s32 a);
mlib_status mlib_GraphicsDrawPolygon_ABG_32(mlib_image *buffer,
 const mlib_s16 *x, const mlib_s16 *y, mlib_s32 npoints,
 const mlib_s32 *c, mlib_s32 a);
mlib_status mlib_GraphicsDrawPolygon_ABGZ_8(mlib_image *buffer,
 mlib_image *zbuffer, const mlib_s16 *x, const mlib_s16 *y,
 const mlib_s16 *z, mlib_s32 npoints, const mlib_s32 *c, mlib_s32 a);
mlib_status mlib_GraphicsDrawPolygon_ABGZ_32(mlib_image *buffer,
 mlib_image *zbuffer, const mlib_s16 *x, const mlib_s16 *y,
 const mlib_s16 *z, mlib_s32 npoints, const mlib_s32 *c, mlib_s32 a);
mlib_status mlib_GraphicsDrawPolygon_ABZ_8(mlib_image *buffer,
 mlib_image *zbuffer, const mlib_s16 *x, const mlib_s16 *y,
 const mlib_s16 *z, mlib_s32 npoints,
 mlib_s32 c, mlib_s32 a);
mlib_status mlib_GraphicsDrawPolygon_ABZ_32(mlib_image *buffer,
 mlib_image *zbuffer, const mlib_s16 *x, const mlib_s16 *y,
 const mlib_s16 *z, mlib_s32 npoints, mlib_s32 c, mlib_s32 a);
mlib_status mlib_GraphicsDrawPolygon_AG_8(mlib_image *buffer,
 const mlib_s16 *x, const mlib_s16 *y, mlib_s32 npoints,
 const mlib_s32 *c);
mlib_status mlib_GraphicsDrawPolygon_AG_32(mlib_image *buffer,
 const mlib_s16 *x, const mlib_s16 *y, mlib_s32 npoints,
 const mlib_s32 *c);
mlib_status mlib_GraphicsDrawPolygon_AGZ_8(mlib_image *buffer,
 mlib_image *zbuffer, const mlib_s16 *x, const mlib_s16 *y,
 const mlib_s16 *z, mlib_s32 npoints,
 const mlib_s32 *c);
mlib_status mlib_GraphicsDrawPolygon_AGZ_32(mlib_image *buffer,
 mlib_image *zbuffer, const mlib_s16 *x, const mlib_s16 *y,
 const mlib_s16 *z, mlib_s32 npoints, const mlib_s32 *c);
mlib_status mlib_GraphicsDrawPolygon_AZ_8(mlib_image *buffer,
 mlib_image *zbuffer, const mlib_s16 *x, const mlib_s16 *y,
 const mlib_s16 *z, mlib_s32 npoints,
 mlib_s32 c);
mlib_status mlib_GraphicsDrawPolygon_AZ_32(mlib_image *buffer,
 mlib_image *zbuffer, const mlib_s16 *x, const mlib_s16 *y,
 const mlib_s16 *z, mlib_s32 npoints,
 mlib_s32 c);
mlib_status mlib_GraphicsDrawPolygon_BG_8(mlib_image *buffer,
 const mlib_s16 *x, const mlib_s16 *y, mlib_s32 npoints,
 const mlib_s32 *c, mlib_s32 a);
mlib_status mlib_GraphicsDrawPolygon_BG_32(mlib_image *buffer,
 const mlib_s16 *x, const mlib_s16 *y, mlib_s32 npoints,
 const mlib_s32 *c, mlib_s32 a);
mlib_status mlib_GraphicsDrawPolygon_BGZ_8(mlib_image *buffer,
 mlib_image *zbuffer, const mlib_s16 *x, const mlib_s16 *y,
 const mlib_s16 *z, mlib_s32 npoints,
 const mlib_s32 *c, mlib_s32 a);
<beginning of page>
mlib_status mlib_GraphicsDrawPolygon_BGZ_32(mlib_image *buffer,
 mlib_image *zbuffer, const mlib_s16 *x, const mlib_s16 *y,
 const mlib_s16 *z, mlib_s32 npoints, const mlib_s32 *c, mlib_s32 a);
mlib_status mlib_GraphicsDrawPolygon_BZ_8(mlib_image *buffer,
 mlib_image *zbuffer, const mlib_s16 *x, const mlib_s16 *y,
 const mlib_s16 *z, mlib_s32 npoints,
 mlib_s32 c, mlib_s32 a);
mlib_status mlib_GraphicsDrawPolygon_BZ_32(mlib_image *buffer,
 mlib_image *zbuffer, const mlib_s16 *x, const mlib_s16 *y,
 const mlib_s16 *z, mlib_s32 npoints,
 mlib_s32 c, mlib_s32 a);
mlib_status mlib_GraphicsDrawPolygon_GZ_8(mlib_image *buffer,
 mlib_image *zbuffer, const mlib_s16 *x, const mlib_s16 *y,
 const mlib_s16 *z, mlib_s32 npoints,
 const mlib_s32 *c);
mlib_status mlib_GraphicsDrawPolygon_GZ_32(mlib_image *buffer,
 mlib_image *zbuffer, const mlib_s16 *x, const mlib_s16 *y,
 const mlib_s16 *z, mlib_s32 npoints,
 const mlib_s32 *c);
Each of the mlib_GraphicsDrawPolygon_*() functions draws a polygon enclosing (x1,y1), (x2,y2), ..., and
(xn,yn).
Each of the mlib_GraphicsDrawPolygon_X_*() functions draws a polygon in Xor mode as follows:
  data[x,y] ^= c ^ c2
Each of the mlib_GraphicsDrawPolygon_A_*() functions draws a polygon with antialiasing.
Each of the mlib_GraphicsDrawPolygon_B_*() functions draws a polygon with alpha blending as follows:
  data[x,y] = (data[x,y] * (255 - a) + c * a) / 255
Each of the mlib_GraphicsDrawPolygon_G_*() functions draws a polygon with Gouraud shading.
Each of the mlib_GraphicsDrawPolygon_Z_*() functions draws a polygon with Z buffering.
Each of the other functions draws a polygon with a combination of two or more features like antialiasing (A), alpha
blending (B), Gouraud shading (G), and Z buffering (Z).
Each of the functions takes some of the following arguments:
buffer Pointer to the image into which the function is drawing.
zbuffer Pointer to the image that holds the Z buffer.
x Pointer to the array of X coordinates of the vertices.
y Pointer to the array of Y coordinates of the vertices.
z Pointer to the array of Z coordinates of the vertices.
npoints Number of vertices in the arrays.
<beginning of page>
c Color used in the drawing, or pointer to array of colors of the points in the case of Gouraud shading.
c2 Alternation color.
a Alpha value for blending. 0 <<=> a <<=> 255.
Each of the functions returns MLIB_SUCCESS if successful. Otherwise it returns MLIB_FAILURE.
See attributes(5) for descriptions of the following attributes:
tab() box; cw(2.75i) |cw(2.75i) lw(2.75i) |lw(2.75i) ATTRIBUTE TYPEATTRIBUTE VALUE _ Interface Stability<hy>
Committed _ MT-LevelMT-Safe
mlib_GraphicsFillPolygon(3MLIB), attributes(5)
