<beginning of page>
hook_t <-> callback structure for subscribing to netinfo events
#include <sys/hook.h>
Solaris DDI specific (Solaris DDI).
The hook_t data structure defines a callback that is to be inserted into a networking event. This data structure must
be allocated with a call to hook_alloc() and released with a call to hook_free().
 hook_func_t h_func; /* callback function to invoke */
 char *h_name; /* unique name given to the hook */
 int h_flags;
 hook_hint_t h_hint; /* insertion hint type */
 uintptr_t h_hintvalue; /* used with h_hint */
 void *h_arg; /* value to pass into h_func */
 typedef int (*hook_func_t)(net_event_t token, hook_data_t info,
  void *);
Hook hints are hints that are used at the time of insertion and are not rules that enforce where a hook lives for its en<hy>
tire lifetime on an event. The valid values for the h_hint field are:
HH_NONE Insert the hook wherever convenient.
HH_FIRST Place the hook first on the list of hooks.
HH_LAST Place the hook last on the list of hooks.
HH_BEFORE Place the hook before another hook on the list of hooks. The value in h_hintvalue must be a pointer
to the name of another hook.
HH_AFTER Place the hook after another hook on the list of hooks. The value in h_hintvalue must be a pointer to
the name of another hook.
See attributes(5) for descriptions of the following attributes:
tab() box; cw(2.75i) |cw(2.75i) lw(2.75i) |lw(2.75i) ATTRIBUTE TYPEATTRIBUTE VALUE _ Interface Stability<hy>
Committed
netinfo(9F)
