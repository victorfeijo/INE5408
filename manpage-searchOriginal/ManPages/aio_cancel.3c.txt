<beginning of page>
aio_cancel <-> cancel asynchronous I/O request
#include <aio.h>
int aio_cancel(int fildes, struct aiocb *aiocbp);
The aio_cancel() function attempts to cancel one or more asynchronous I/O requests currently outstanding against
file descriptor fildes. The aiocbp argument points to the asynchronous I/O control block for a particular request to be
canceled. If aiocbp is NULL, then all outstanding cancelable asynchronous I/O requests against fildes are canceled.
Normal asynchronous notification occurs for asynchronous I/O operations that are successfully canceled. If there are
requests that cannot be canceled, then the normal asynchronous completion process takes place for those requests
when they are completed.
For requested operations that are successfully canceled, the associated error status is set to ECANCELED and the
return status is <mi>1. For requested operations that are not successfully canceled, the aiocbp is not modified by
aio_cancel().
If aiocbp is not NULL, then if fildes does not have the same value as the file descriptor with which the asynchronous
operation was initiated, unspecified results occur.
The aio_cancel() function returns the value AIO_CANCELED to the calling process if the requested operation(s)
were canceled. The value AIO_NOTCANCELED is returned if at least one of the requested operation(s) cannot be
canceled because it is in progress. In this case, the state of the other operations, if any, referenced in the call to
aio_cancel() is not indicated by the return value of aio_cancel(). The application may determine the state of affairs
for these operations by using aio_error(3C). The value AIO_ALLDONE is returned if all of the operations have al<hy>
ready completed. Otherwise, the function returns <mi>1 and sets errno to indicate the error.
The aio_cancel() function will fail if:
EBADF The fildes argument is not a valid file descriptor.
ENOSYS The aio_cancel() function is not supported.
The aio_cancel() function has a transitional interface for 64-bit file offsets. See lf64(5).
See attributes(5) for descriptions of the following attributes:
tab() box; cw(2.75i) |cw(2.75i) lw(2.75i) |lw(2.75i) ATTRIBUTE TYPEATTRIBUTE VALUE _ Interface Stabili<hy>
tyCommitted _ MT-LevelMT-Safe _ StandardSee standards(5).
aio.h(3HEAD), signal.h(3HEAD), aio_read(3C), aio_return(3C), attributes(5), lf64(5), standards(5)
Solaris 2.6 was the first release to support the Asynchronous Input and Output option. Prior to this release, this func<hy>
tion always returned <mi>1 and set errno to ENOSYS.
