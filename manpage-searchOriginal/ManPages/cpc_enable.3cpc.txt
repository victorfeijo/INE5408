<beginning of page>
cpc_enable, cpc_disable <-> enable and disable performance counters
cc [ flag... ] file... -lcpc [ library... ]
#include <libcpc.h>
int cpc_enable(cpc_t *cpc);
int cpc_disable(cpc_t *cpc);
In certain applications, it can be useful to explicitly enable and disable performance counters at different times so
that the performance of a critical algorithm can be examined. The cpc_enable() and cpc_disable() functions can be
used to enable and disable the performance counters without otherwise disturbing the invoking LWP's performance
hardware configuration.
Upon successful completion, cpc_enable() and cpc_disable() return 0. Otherwise, they return -1 and set errno to in<hy>
dicate the error.
These functions will fail if:
EAGAIN The associated performance counter context has been invalidated by another process.
EINVAL No performance counter context has been created for the calling LWP.
Example 1 Use cpc_enable and cpc_disable to minimize code needed by application.
In the following example, the cpc_enable() and cpc_disable() functions are used to minimize the amount of code
that needs to be added to the application. The cputrack(1) command can be used in conjunction with these functions
to provide event programming, sampling, and reporting facilities.
If the application is instrumented in this way and then started by cputrack with the nouser flag set in the event spec<hy>
ification, counting of user events will only be enabled around the critical code section of interest. If the program is
run normally, no harm will ensue.
 int
 main(int argc, char *argv[])
 {
  cpc_t *cpc = cpc_open(CPC_VER_CURRENT);
  /* ... application code ... */
  if (cpc != NULL)
  (void) cpc_enable(cpc);
  /* ==> Code to be measured goes here <== */
  if (cpc != NULL)
  (void) cpc_disable(cpc);
  /* ... other application code */
 }
See attributes(5) for descriptions of the following attributes:
tab() box; cw(2.75i) |cw(2.75i) lw(2.75i) |lw(2.75i) ATTRIBUTE TYPEATTRIBUTE VALUE _ Interface Stabili<hy>
tyEvolving _ MT-LevelSafe
cputrack(1), cpc(3CPC), cpc_open(3CPC), libcpc(3LIB), attributes(5)
