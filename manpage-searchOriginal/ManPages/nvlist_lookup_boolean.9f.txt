<beginning of page>
nvlist_lookup_boolean, nvlist_lookup_boolean_value, nvlist_lookup_byte, nvlist_lookup_int8, nvlist_lookup_int16,
nvlist_lookup_int32, nvlist_lookup_int64, nvlist_lookup_uint8, nvlist_lookup_uint16, nvlist_lookup_uint32,
nvlist_lookup_uint64, nvlist_lookup_string, nvlist_lookup_nvlist, nvlist_lookup_boolean_array,
nvlist_lookup_byte_array, nvlist_lookup_int8_array, nvlist_lookup_int16_array, nvlist_lookup_int32_array,
nvlist_lookup_int64_array, nvlist_lookup_uint8_array, nvlist_lookup_uint16_array, nvlist_lookup_uint32_array,
nvlist_lookup_uint64_array, nvlist_lookup_string_array, nvlist_lookup_nvlist_array, nvlist_lookup_pairs <-> match
name and type indicated by the interface name and retrieve data value
#include <sys/nvpair.h>
int nvlist_lookup_boolean(nvlist_t *nvl, const char *name);
int nvlist_lookup_boolean_value(nvlist_t *nvl, const char *name,
 boolean_t *val);
int nvlist_lookup_byte(nvlist_t *nvl, const char *name,
 uchar_t *val);
int nvlist_lookup_int8(nvlist_t *nvl, const char *name,
 int8_t *val);
int nvlist_lookup_uint8(nvlist_t *nvl, const char *name,
 uint8_t *val);
int nvlist_lookup_int16(nvlist_t *nvl, const char *name,
 int16_t *val);
int nvlist_lookup_uint16(nvlist_t *nvl, const char *name,
 uint16_t *val);
int nvlist_lookup_int32(nvlist_t *nvl, const char *name,
 int32_t *val);
int nvlist_lookup_uint32(nvlist_t *nvl, const char *name,
 uint32_t *val);
int nvlist_lookup_int64(nvlist_t *nvl, const char *name,
 int64_t *val);
int nvlist_lookup_uint64(nvlist_t *nvl, const char *name,
 uint64_t *val);
int nvlist_lookup_string(nvlist_t *nvl, const char *name,
 char **val);
int nvlist_lookup_nvlist(nvlist_t *nvl, const char *name,
 nvlist_t **val);
int nvlist_lookup_boolean_array(nvlist_t *nvl, const char *name,
 boolean_t **val, uint_t *nelem);
int nvlist_lookup_byte_array(nvlist_t *nvl, const char *name,
 uchar_t **val, uint_t *nelem);
int nvlist_lookup_int8_array(nvlist_t *nvl, const char *name,
 int8_t **val, uint_t *nelem);
int nvlist_lookup_uint8_array(nvlist_t *nvl, const char *name,
 uint8_t **val, uint_t *nelem);
int nvlist_lookup_int16_array(nvlist_t *nvl, const char *name,
 int16_t **val, uint_t *nelem);
int nvlist_lookup_uint16_array(nvlist_t *nvl, const char *name,
 uint16_t **val, uint_t *nelem);
int nvlist_lookup_int32_array(nvlist_t *nvl, const char *name,
<beginning of page>
 int32_t **val, uint_t *nelem);
int nvlist_lookup_uint32_array(nvlist_t *nvl, const char *name,
 uint32_t **val, uint_t *nelem);
int nvlist_lookup_int64_array(nvlist_t *nvl, const char *name,
 int64_t **val, uint_t *nelem);
int nvlist_lookup_uint64_array(nvlist_t *nvl, const char *name,
 uint64_t **val, uint_t *nelem);
int nvlist_lookup_string_array(nvlist_t *nvl, const char *name,
 char ***val, uint_t *nelem);
int nvlist_lookup_nvlist_array(nvlist_t *nvl, const char *name,
 nvlist_t ***val, uint_t *nelem);
int nvlist_lookup_pairs(nvlist_t *nvl, int flag, ...);
Solaris DDI specific (Solaris DDI)
nvl The list of name-value pairs (nvlist_t) to be processed.
name Name of the name-value pair (nvpair) to search.
nelem Address to store the number of elements in value.
val Address to store the value or starting address of the array value.
flag Specify bit fields defining lookup behavior:
NV_FLAG_NOENTOK The retrival function will not fail if no matching name-value pair is found.
These functions find the nvpair that matches the name and type as indicated by the interface name. If one is found,
nelem and val are modified to contain the number of elements in value and the starting address of data, respectively.
These interfaces work for nvlist_t allocated with NV_UNIQUE_NAME or NV_UNIQUE_NAME_TYPE speci<hy>
fied in nvlist_alloc(). See nvlist_alloc(9F). If this is not the case, the interface will return ENOTSUP because the
list potentially contains multiple nvpairs with the same name and type.
Multiple threads can simultaneously read the same nvlist_t but only one thread should actively change a given
nvlist_t at a time. The caller is responsible for the synchronization.
All memory required for storing the array elements, including string values, are managed by the library. References
to such data remain valid until nvlist_free() is called on nvl.
The nvlist_lookup_pairs() function retrieves a set of nvpairs. The arguments are a null-terminated list of pairs (data
type DATA_TYPE_BOOLEAN), triples (non-array data types) or quads (array data types). As shown below, the in<hy>
terpretation of the arguments depends on the value of type. See nvpair_type(9F).
name Name of the name-value pair to search.
type Data type.
val Address to store the starting address of the value. When using data type DATA_TYPE_BOOLEAN, the val ar<hy>
gument is ignored.
<beginning of page>
nelem Address to store the number of elements in value. Non-array data types have only one argument and nelem is
ignored.
The argument order is name, type, [val], [nelem].
When using NV_FLAG_NOENTOK and no matching name-value pair is found, the memory pointed to by val and
nelem is not touched.
These functions return 0 on success and an error value on failure.
These functions fail under the following conditions.
0 Success
EINVAL Invalid argument
ENOENT No matching name-value pair found
ENOTSUP Encode/decode method not supported
These functions can be called from user, interrupt, or kernel context.
See attributes(5) for descriptions of the following attributes:
tab() box; cw(2.75i) |cw(2.75i) lw(2.75i) |lw(2.75i) ATTRIBUTE TYPEATTRIBUTE VALUE _ Interface Stability<hy>
Committed
nvlist_alloc(9F), nvpair_type(9F)
Writing Device Drivers
STREAMS Programming Guide
