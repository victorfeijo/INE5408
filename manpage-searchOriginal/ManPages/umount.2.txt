<beginning of page>
umount, umount2 <-> unmount a file system
#include <sys/mount.h>
int umount(const char *file);
int umount2(const char *file, int mflag);
The umount() function requests that a previously mounted file system contained on a block special device or direc<hy>
tory be unmounted. The file argument is a pointer to the absolute pathname of the file system to be unmounted. Af<hy>
ter unmounting the file system, the directory upon which the file system was mounted reverts to its ordinary interpre<hy>
tation.
The umount2() function is identical to umount(), with the additional capability of unmounting file systems even if
there are open files active. The mflag argument must contain one of the following values:
0 Perform a normal unmount that is equivalent to umount(). The umount2() function returns EBUSY if there are
open files active within the file system to be unmounted.
MS_FORCE Unmount the file system, even if there are open files active. A forced unmount can result in loss of da<hy>
ta, so it should be used only when a regular unmount is unsuccessful. The umount2() function returns ENOTSUP
if the specified file systems does not support MS_FORCE. Only file systems of type nfs, ufs, pcfs, and zfs support
MS_FORCE.
Upon successful completion, 0 is returned. Otherwise, <mi>1 is returned and errno is set to indicate the error.
The umount() and umount2() functions will fail if:
EACCES The permission bits of the mount point do not permit read/write access or search permission is denied on
a component of the path prefix.
The calling process is not the owner of the mountpoint.
The mountpoint is not a regular file or a directory and the caller does not have all privileges available in a its zone.
The special device device does not permit read access in the case of read-only mounts or read-write access in the
case of read/write mounts.
EBUSY A file on file is busy.
EFAULT The file pointed to by file points to an illegal address.
EINVAL The file pointed to by file is not mounted.
ELOOP Too many symbolic links were encountered in translating the path pointed to by file.
ENAMETOOLONG The length of the file argument exceeds PATH_MAX, or the length of a file component ex<hy>
ceeds NAME_MAX while _POSIX_NO_TRUNC is in effect.
ENOENT The file pointed to by file does not exist or is not an absolute path.
ENOLINK The file pointed to by file is on a remote machine and the link to that machine is no longer active.
ENOTBLK The file pointed to by file is not a block special device.
<beginning of page>
EPERM The {PRIV_SYS_MOUNT} privilege is not asserted in the effective set of the calling process.
EREMOTE The file pointed to by file is remote.
The umount2() function will fail if:
ENOTSUP The file pointed to by file does not support this operation.
The umount() and umount2() functions can be invoked only by a process that has the {PRIV_SYS_MOUNT}
privilege asserted in its effective set.
Because it provides greater functionality, the umount2() function is preferred.
mount(2), privileges(5)
