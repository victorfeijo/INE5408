<beginning of page>
t_rcvv <-> receive data or expedited data sent over a connection and put the data into one or more non-contiguous buf<hy>
fers
#include <xti.h>
int t_rcvv(int fd, struct t_iovec *iov, unsigned int iovcount, int *flags);
This function receives either normal or expedited data. The argument fd identifies the local transport endpoint
through which data will arrive, iov points to an array of buffer address/buffer size pairs (iov_base, iov_len). The
t_rcvv() function receives data into the buffers specified by iov0.iov_base, iov1.iov_base, through iov [iov<hy>
count-1].iov_base, always filling one buffer before proceeding to the next.
Note that the limit on the total number of bytes available in all buffers passed:
 iov(0).iov_len + . . + iov(iovcount-1).iov_len)
may be constrained by implementation limits. If no other constraint applies, it will be limited by INT_MAX. In
practice, the availability of memory to an application is likely to impose a lower limit on the amount of data that can
be sent or received using scatter/gather functions.
The argument iovcount contains the number of buffers which is limited to T_IOV_MAX, which is an implementa<hy>
tion-defined value of at least 16. If the limit is exceeded, the function will fail with TBADDATA.
The argument flags may be set on return from t_rcvv() and specifies optional flags as described below.
By default, t_rcvv() operates in synchronous mode and will wait for data to arrive if none is currently available.
However, if O_NONBLOCK is set by means of t_open(3NSL) or fcntl(2), t_rcvv() will execute in asynchronous
mode and will fail if no data is available. See TNODATA below.
On return from the call, if T_MORE is set in flags, this indicates that there is more data, and the current transport
service data unit (TSDU) or expedited transport service data unit (ETSDU) must be received in multiple t_rcvv() or
t_rcv(3NSL) calls. In the asynchronous mode, or under unusual conditions (for example, the arrival of a signal or
T_EXDATA event), the T_MORE flag may be set on return from the t_rcvv() call even when the number of bytes
received is less than the total size of all the receive buffers. Each t_rcvv() with the T_MORE flag set indicates that
another t_rcvv() must follow to get more data for the current TSDU. The end of the TSDU is identified by the re<hy>
turn of a t_rcvv() call with the T_MORE flag not set. If the transport provider does not support the concept of a
TSDU as indicated in the info argument on return from t_open(3NSL) or t_getinfo(3NSL), the T_MORE flag is
not meaningful and should be ignored. If the amount of buffer space passed in iov is greater than zero on the call to
t_rcvv(), then t_rcvv() will return 0 only if the end of a TSDU is being returned to the user.
On return, the data is expedited if T_EXPEDITED is set in flags. If T_MORE is also set, it indicates that the
number of expedited bytes exceeded nbytes, a signal has interrupted the call, or that an entire ETSDU was not avail<hy>
able (only for transport protocols that support fragmentation of ETSDUs). The rest of the ETSDU will be returned
by subsequent calls to t_rcvv() which will return with T_EXPEDITED set in flags. The end of the ETSDU is iden<hy>
tified by the return of a t_rcvv() call with T_EXPEDITED set and T_MORE cleared. If the entire ETSDU is not
available it is possible for normal data fragments to be returned between the initial and final fragments of an ETS<hy>
DU.
If a signal arrives, t_rcvv() returns, giving the user any data currently available. If no data is available, t_rcvv() re<hy>
turns -1, sets t_errno to TSYSERR and errno to EINTR. If some data is available, t_rcvv() returns the number
of bytes received and T_MORE is set in flags.
In synchronous mode, the only way for the user to be notified of the arrival of normal or expedited data is to issue
this function or check for the T_DATA or T_EXDATA events using the t_look(3NSL) function. Additionally, the
process can arrange to be notified via the EM interface.
On successful completion, t_rcvv() returns the number of bytes received. Otherwise, it returns -1 on failure and
t_errno is set to indicate the error.
T_DATAXFER, T_OUTREL.
On failure, t_errno is set to one of the following:
<beginning of page>
TBADDATA iovcount is greater than T_IOV_MAX.
TBADF The specified file descriptor does not refer to a transport endpoint.
TLOOK An asynchronous event has occurred on this transport endpoint and requires immediate attention.
TNODATA O_NONBLOCK was set, but no data is currently available from the transport provider.
TNOTSUPPORT This function is not supported by the underlying transport provider.
TOUTSTATE The communications endpoint referenced by fd is not in one of the states in which a call to this func<hy>
tion is valid.
TPROTO This error indicates that a communication problem has been detected between XTI and the transport
provider for which there is no other suitable XTI error (t_errno).
TSYSERR A system error has occurred during execution of this function.
In the TLI interface definition, no counterpart of this routine was defined.
See attributes(5) for descriptions of the following attributes:
tab() box; cw(2.75i) |cw(2.75i) lw(2.75i) |lw(2.75i) ATTRIBUTE TYPEATTRIBUTE VALUE _ MT LevelSafe
fcntl(2), t_getinfo(3NSL), t_look(3NSL), t_open(3NSL), t_rcv(3NSL), t_snd(3NSL), t_sndv(3NSL), at<hy>
tributes(5)
