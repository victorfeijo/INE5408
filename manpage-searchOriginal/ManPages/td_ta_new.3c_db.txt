<beginning of page>
td_ta_new, td_ta_delete, td_ta_get_ph <-> allocate and deallocate process handles for libc_db
cc [ flag... ] file... -lc_db [ library... ]
#include <proc_service.h>
#include <thread_db.h>
td_err_e td_ta_new(const struct ps_prochandle *ph_p, td_thragent_t **ta_pp);
td_err_e td_ta_delete(const td_thragent_t *ta_p);
td_err_e td_ta_get_ph(const td_thragent_t *ta_p, struct ps_prochandle **ph_pp);
The td_ta_new() function registers a target process with libc_db(3LIB) and allocates an internal process handle of
type td_thragent_t for this target process. Subsequent calls to libc_db can use this handle to refer to this target
process.
There are actually two process handles, an internal process handle assigned by libc_db and an external process han<hy>
dle assigned by the libc_db client. There is a one-to-one correspondence between the two handles. When the client
calls a libc_db function, it uses the internal process handle. When libc_db calls one of the client-provided routines
listed in proc_service(3PROC), it uses the external process handle.
The ph argument is the external process handle that libc_db should use to identify this target process to the control<hy>
ling process when it calls routines in the imported interface.
If this call is successful, the value of the newly allocated td_thragent_t handle is returned in *ta_pp. The
td_ta_delete() function deregisters a target process with libc_db, which deallocates its internal process handle and
frees any other resources libc_db has acquired with respect to the target process. The ta_p argument specifies the
target process to be deregistered.
The td_ta_get_ph() function returns in *ph_pp the external process handle that corresponds to the internal process
handle ta_p. This is useful for checking internal consistency.
TD_OK The call completed successfully.
TD_BADPH A NULL external process handle was passed to td_ta_new().
TD_ERR The ta_pp argument is NULL or an internal error occurred.
TD_DBERR A call to one of the imported interface routines failed.
TD_MALLOC Memory allocation failure.
TD_NOLIBTHREAD The target process does not appear to be multithreaded.
See attributes(5) for description of the following attributes:
tab() box; cw(2.75i) |cw(2.75i) lw(2.75i) |lw(2.75i) ATTRIBUTE TYPEATTRIBUTE VALUE _ MT-LevelSafe
libc_db(3LIB), proc_service(3PROC), attributes(5)
