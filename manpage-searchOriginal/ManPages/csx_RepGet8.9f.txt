<beginning of page>
csx_RepGet8, csx_RepGet16, csx_RepGet32, csx_RepGet64 <-> read repetitively from the device register
#include <sys/pccard.h>
void csx_RepGet8(acc_handle_t handle, uint8_t *hostaddr, uint32_t offset,
 uint32_t repcount, uint32_t flags);
void csx_RepGet16(acc_handle_t handle, uint16_t *hostaddr, uint32_t offset,
 uint32_t repcount, uint32_t flags);
void csx_RepGet32(acc_handle_t handle, uint32_t *hostaddr, uint32_t offset,
 uint32_t repcount, uint32_t flags);
void csx_RepGet64(acc_handle_t handle, uint64_t *hostaddr, uint32_t offset,
 uint32_t repcount, uint32_t flags);
Solaris DDI Specific (Solaris DDI)
handle The access handle returned from csx_RequestIO(9F), csx_RequestWindow(9F), or csx_DupHandle(9F).
hostaddr Source host address.
offset The offset in bytes from the base of the mapped resource.
repcount Number of data accesses to perform.
flags Device address flags.
These functions generate multiple reads of various sizes from the mapped memory or device register.
The csx_RepGet8(), csx_RepGet16(), csx_RepGet32(), and csx_RepGet64() functions generate repcount reads of
8 bits, 16 bits, 32 bits, and 64 bits of data, respectively, from the device address represented by the handle, handle, at
an offset in bytes represented by the offset, offset. The data read is stored consecutively into the buffer pointed to by
the host address pointer, hostaddr.
Data that consists of more than one byte will automatically be translated to maintain a consistent view between the
host and the device based on the encoded information in the data access handle. The translation may involve byte
swapping if the host and the device have incompatible endian characteristics.
When the flags argument is set to CS_DEV_AUTOINCR, these functions increment the device offset, offset, after
each datum read operation. However, when the flags argument is set to CS_DEV_NO_AUTOINCR, the same de<hy>
vice offset will be used for every datum access. For example, this flag may be useful when reading from a data regis<hy>
ter.
These functions may be called from user, kernel, or interrupt context.
csx_DupHandle(9F), csx_Get8(9F), csx_GetMappedAddr(9F), csx_Put8(9F), csx_RepPut8(9F), csx_Reques<hy>
tIO(9F), csx_RequestWindow(9F)
PC Card 95 Standard, PCMCIA/JEIDA
