<beginning of page>
readonly <-> shell built-in function to protect the value of the given variable from reassignment
readonly [name]...
**readonly [name [= value]]...
**readonly -p
++readonly [-p] [name [= value]]...
The given names are marked readonly and the values of the these names may not be changed by subsequent assign<hy>
ment. If no arguments are given, a list of all readonly names is printed.
The given names are marked readonly and these names cannot be changed by subsequent assignment.
When -p is specified, readonly writes to the standard output the names and values of all read-only variables, in the
following format:
 "readonly %s=%s\n", name, value
if name is set, and:
 "readonly $s\n", name
if name is unset.
The shell formats the output, including the proper use of quoting, so that it is suitable for reinput to the shell as com<hy>
mands that achieve the same value and readonly attribute-setting results in a shell execution environment in which:
1. Variables with values set at the time they were output do not have the readonly attribute set. 2. Variables that
were unset at the time they were output do not have a value at the time at which the saved output is re-input to the
shell.
On this manual page, ksh(1) commands that are preceded by one or two ** (asterisks) are treated specially in the
following ways: 1. Variable assignment lists preceding the command remain in effect when the command com<hy>
pletes. 2. I/O redirections are processed after variable assignments. 3. Errors cause a script that contains them to
abort. 4. Words, following a command preceded by ** that are in the format of a variable assignment, are expanded
with the same rules as a variable assignment. This means that tilde substitution is performed after the = sign and
word splitting and file name generation are not performed.
readonly sets the readonly attribute on each of the variables specified by name which prevents their values from be<hy>
ing changed. If =value is specified, the variable name is set to value before the variable is made readonly.
If no names are specified then the names and values of all readonly variables are written to standard output.
readonly is built-in to the shell as a declaration command so that field splitting and pathname expansion are not per<hy>
formed on the arguments. Tilde expansion occurs on value.
-p Causes the output to be in a form of readonly commands that can be used as input to the shell to recreate the cur<hy>
rent set of readonly variables.
On this manual page, ksh93(1) commands that are preceded by one or two + symbols are treated specially in the fol<hy>
lowing ways: 1. Variable assignment lists preceding the command remain in effect when the command completes.
2. I/O redirections are processed after variable assignments. 3. Errors cause a script that contains them to abort. 4.
They are not valid function names. 5. Words, following a command preceded by ++ that are in the format of a vari<hy>
able assignment, are expanded with the same rules as a variable assignment. This means that tilde substitution is per<hy>
formed after the = sign and field splitting and file name generation are not performed.
The following exit values are returned:
0 Successful completion.
<beginning of page>
>0 An error occurred.
See attributes(5) for descriptions of the following attributes:
tab() box; cw(2.75i) |cw(2.75i) lw(2.75i) |lw(2.75i) ATTRIBUTE TYPEATTRIBUTE VALUE _ AvailabilitySUN<hy>
Wcsu
ksh(1), ksh93(1), sh(1), typeset(1), attributes(5)
