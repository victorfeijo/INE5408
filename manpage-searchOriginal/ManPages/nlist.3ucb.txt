<beginning of page>
nlist <-> get entries from symbol table
/usr/ucb/cc [ flag ... ] file ...
#include <nlist.h>
int nlist(filename, nl)
char *filename;
struct nlist *nl;
nlist() examines the symbol table from the executable image whose name is pointed to by filename, and selectively
extracts a list of values and puts them in the array of nlist structures pointed to by nl. The name list pointed to by nl
consists of an array of structures containing names, types and values. The n_name field of each such structure is tak<hy>
en to be a pointer to a character string representing a symbol name. The list is terminated by an entry with a NULL
pointer (or a pointer to a NULL string) in the n_name field. For each entry in nl, if the named symbol is present in
the executable image's symbol table, its value and type are placed in the n_value and n_type fields. If a symbol can<hy>
not be located, the corresponding n_type field of nl is set to zero.
Upon normal completion, nlist() returns the number of symbols that were not located in the symbol table. If an error
occurs, nlist() returns <mi>1 and sets all of the n_type fields in members of the array pointed to by nl to zero.
nlist(3ELF), a.out(4)
Use of these interfaces should be restricted to only applications written on BSD platforms. Use of these interfaces
with any of the system libraries or in multi-thread applications is unsupported.
Only the n_value field is compatibly set. Other fields in the nlist structure are filled with the ELF (Executable and
Linking Format) values (see nlist(3ELF) and a.out(4)).
