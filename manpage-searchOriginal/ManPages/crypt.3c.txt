<beginning of page>
crypt <-> string encoding function
#include <crypt.h>
char *crypt(const char *key, const char *salt);
#include <unistd.h>
char *crypt(const char *key, const char *salt);
The crypt() function encodes strings suitable for secure storage as passwords. It generates the password hash given
the key and salt.
The key argument is the plain text password to be encrypted.
If the first character of salt is "$", crypt() uses crypt.conf(4) to determine which shared module to load for the en<hy>
cryption algorithm. The algorithm name crypt() uses to search in crypt.conf is the string between the first and sec<hy>
ond "$", or between the first "$" and first "," if a "," comes before the second "$".
If the first character of salt is not "$", the algorithm described on crypt_unix(5) is used.
Upon successful completion, crypt() returns a pointer to the encoded string. Otherwise it returns a null pointer and
sets errno to indicate the error.
The return value points to static data that is overwritten by each call.
The crypt() function will fail if:
EINVAL An entry in crypt.conf is invalid.
ELIBACC The required shared library was not found.
ENOMEM There is insufficient memory to generate the hash.
ENOSYS The functionality is not supported on this system.
The values returned by this function might not be portable among standard-conforming systems. See standards(5).
Applications should not use crypt() to store or verify user passwords but should use the functions described on
pam(3PAM) instead.
See attributes(5) for descriptions of the following attributes:
tab() box; cw(2.75i) |cw(2.75i) lw(2.75i) |lw(2.75i) ATTRIBUTE TYPEATTRIBUTE VALUE _ Interface Stability<hy>
Standard _ MT-LevelMT-Safe
passwd(1), crypt_genhash_impl(3C), crypt_gensalt(3C), crypt_gensalt_impl(3C), getpassphrase(3C),
pam(3PAM), passwd(4), policy.conf(4), attributes(5), crypt_unix(5), standards(5)
