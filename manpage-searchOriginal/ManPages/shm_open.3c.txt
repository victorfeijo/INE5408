<beginning of page>
shm_open <-> open a shared memory object
#include <sys/mman.h>
int shm_open(const char *name, int oflag, mode_t mode);
The shm_open() function establishes a connection between a shared memory object and a file descriptor. It creates
an open file description that refers to the shared memory object and a file descriptor that refers to that open file de<hy>
scription. The file descriptor is used by other functions to refer to that shared memory object. The name argument
points to a string naming a shared memory object. It is unspecified whether the name appears in the file system and
is visible to other functions that take pathnames as arguments. The name argument conforms to the construction
rules for a pathname. The first character of name must be a slash (/) character and the remaining characters of
name cannot include any slash characters. For maximum portability, name should include no more than 14 charac<hy>
ters, but this limit is not enforced.
If successful, shm_open() returns a file descriptor for the shared memory object that is the lowest numbered file de<hy>
scriptor not currently open for that process. The open file description is new, and therefore the file descriptor does
not share it with any other processes. It is unspecified whether the file offset is set. The FD_CLOEXEC file descrip<hy>
tor flag associated with the new file descriptor is set.
The file status flags and file access modes of the open file description are according to the value of oflag. The oflag
argument is the bitwise inclusive OR of the following flags defined in the header <fcntl.h>. Applications specify ex<hy>
actly one of the first two values (access modes) below in the value of oflag:
O_RDONLY Open for read access only.
O_RDWR Open for read or write access.
Any combination of the remaining flags may be specified in the value of oflag:
O_CREAT If the shared memory object exists, this flag has no effect, except as noted under O_EXCL below. Oth<hy>
erwise the shared memory object is created; the user ID of the shared memory object will be set to the effective user
ID of the process; the group ID of the shared memory object will be set to a system default group ID or to the effec<hy>
tive group ID of the process. The permission bits of the shared memory object will be set to the value of the mode
argument except those set in the file mode creation mask of the process. When bits in mode other than the file per<hy>
mission bits are set, the effect is unspecified. The mode argument does not affect whether the shared memory object
is opened for reading, for writing, or for both. The shared memory object has a size of zero.
O_EXCL If O_EXCL and O_CREAT are set, shm_open() fails if the shared memory object exists. The check for
the existence of the shared memory object and the creation of the object if it does not exist is atomic with respect to
other processes executing shm_open() naming the same shared memory object with O_EXCL and O_CREAT set.
If O_EXCL is set and O_CREAT is not set, the result is undefined.
O_TRUNC If the shared memory object exists, and it is successfully opened O_RDWR, the object will be truncat<hy>
ed to zero length and the mode and owner will be unchanged by this function call. The result of using O_TRUNC
with O_RDONLY is undefined.
When a shared memory object is created, the state of the shared memory object, including all data associated with
the shared memory object, persists until the shared memory object is unlinked and all other references are gone. It is
unspecified whether the name and shared memory object state remain valid after a system reboot.
Upon successful completion, the shm_open() function returns a non-negative integer representing the lowest num<hy>
bered unused file descriptor. Otherwise, it returns <mi>1 and sets errno to indicate the error condition.
The shm_open() function will fail if:
EACCES The shared memory object exists and the permissions specified by oflag are denied, or the shared memory
object does not exist and permission to create the shared memory object is denied, or O_TRUNC is specified and
write permission is denied.
<beginning of page>
EEXIST O_CREAT and O_EXCL are set and the named shared memory object already exists.
EINTR The shm_open() operation was interrupted by a signal.
EINVAL The shm_open() operation is not supported for the given name.
EMFILE Too many file descriptors are currently in use by this process.
ENAMETOOLONG The length of the name string exceeds PATH_MAX, or a pathname component is longer than
NAME_MAX while _POSIX_NO_TRUNC is in effect.
ENFILE Too many shared memory objects are currently open in the system.
ENOENT O_CREAT is not set and the named shared memory object does not exist.
ENOSPC There is insufficient space for the creation of the new shared memory object.
ENOSYS The shm_open() function is not supported by the system.
See attributes(5) for descriptions of the following attributes:
tab() box; lw(2.75i) |lw(2.75i) lw(2.75i) |lw(2.75i) ATTRIBUTE TYPEATTRIBUTE VALUE _ Interface Stabili<hy>
tyCommitted _ MT-LevelMT-Safe _ StandardSee standards(5).
close(2), dup(2), exec(2), fcntl(2), mmap(2), umask(2), shm_unlink(3C), sysconf(3C), fcntl.h(3HEAD), at<hy>
tributes(5), standards(5)
Solaris 2.6 was the first release to support the Asynchronous Input and Output option. Prior to this release, this func<hy>
tion always returned <mi>1 and set errno to ENOSYS.
