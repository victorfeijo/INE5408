<beginning of page>
DNSServiceBrowse <-> browse service instances with DNS
cc [ flag ... ] file ... -ldns_sd [ library ... ]
#include <dns_sd.h>
DNSServiceErrorType DNSServiceBrowse(DNSServiceRef *sdRef,
 DNSServiceFlags flags, uint32_t interfaceIndex,
 const char *regtype, const char *domain,
 DNSServiceServiceBrowseReply callBack, void *context);
typedef void(*DNSServiceBrowseReply)(DNSServiceRef sdRef,
 DNSServiceFlags flags, uint32_t interfaceIndex,
 DNSServiceErrorType errorCode, const char *serviceName,
 const char *regtype, const char *replyDomain,
 void *context);
The DNSServiceBrowse() function is used to browse for service instances of a particular service and protocol type.
The sdRef argument points to an uninitialized DNSServiceRef. If the call to DNSServiceBrowse succeeds sdRef is
initialized. The flags argument to DNSServiceBrowse() is currently unused and reserved for future use. A nonzero
value to interfaceIndex indicates DNSServiceBrowse() should do a browse on all interfaces. Most applications will
use an interfaceIndex value of 0 to perform a browse on all interfaces. See the section "Constants for specifying an
interface index" in <dns_sd.h> for more details.
The callback function is invoked for every service instance found matching the service type and protocol. The call<hy>
back argument points to a function of type DNSServiceBrowseReply listed above. The DNSServiceBrowse() call
returns browse results asynchronously. The service browse call can be terminated by applications with a call to
DNSServiceRefDeallocate().
The regtype parameter is used to specify the service type and protocol (e.g. _ftp._tcp). The protocol type must be
TCP or UDP. The domain argument to DNSServiceBrowse() specifies the domain on which to browse for services.
Most applications will not specify a domain and will perform a browse on the default domain(s). The context argu<hy>
ment can be NULL and points to a value passed to the callback function.
The sdRef argument passed to the callback function is initialized by DNSServiceBrowse() call. The possible values
passed to flags in the callback function are: kDNSServiceFlagsMoreComing and kDNSServiceFlagsAdd. The
kDNSServiceFlagsMoreComing value indicates to a callback that at least one more result is immediately available.
The kDNSServiceFlagsAdd value indicates that a service instance was found. The errorCode argument will be
kDNSServiceErr_NoError on success. Otherwise, failure is indicated. The discovered service name is returned to
the callback via the serviceName argument. The regtype argument in the callback holds the service type of the found
service instance. The discovered service type can be different from the requested service type in the browse request
when the discovered service type has subtypes. The domain argument to the callback holds the domain name of the
discovered service instance. The service type and the domain name must be stored and passed along with the service
name to resolve a service instance using DNSServiceResolve().
The DNSServiceBrowse function returns kDNSServiceErr_NoError on success. Otherwise, an error code defined
in <dns_sd.h> is returned to indicate an error has occurred. When an error is returned by DNSServiceBrowse, the
callback function is not invoked and the DNSServiceRef argument is not initialized.
See attributes(5) for description of the following attributes:
tab() box; cw(2.75i) |cw(2.75i) lw(2.75i) |lw(2.75i) ATTRIBUTE TYPEATTRIBUTE VALUE _ Interface Stability<hy>
Committed _ MT-LevelSafe
DNSServiceRefDeallocate(3DNS_SD), DNSServiceResolve(3DNS_SD), attributes(5)
