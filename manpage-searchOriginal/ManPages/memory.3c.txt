<beginning of page>
memory, memccpy, memchr, memcmp, memcpy, memmove, memset <-> memory operations
#include <string.h>
void *memccpy(void *restrict s1, const void *restrict s2,
 int c, size_t n);
void *memchr(const void *s, int c, size_t n);
int memcmp(const void *s1, const void *s2, size_t n);
void *memcpy(void *restrict s1, const void *restrict s2, size_t n);
void *memmove(void *s1, const void *s2, size_t n);
void *memset(void *s, int c, size_t n);
#include <string.h>
const void *memchr(const void *s, int c, size_t n);
#include <cstring>
void *std::memchr(void *s, int c, size_t n);
These functions operate as efficiently as possible on memory areas (arrays of bytes bounded by a count, not termi<hy>
nated by a null character). They do not check for the overflow of any receiving memory area.
The memccpy() function copies bytes from memory area s2 into s1, stopping after the first occurrence of c (convert<hy>
ed to an unsigned char) has been copied, or after n bytes have been copied, whichever comes first. It returns a
pointer to the byte after the copy of c in s1, or a null pointer if c was not found in the first n bytes of s2.
The memchr() function returns a pointer to the first occurrence of c (converted to an unsigned char) in the first n
bytes (each interpreted as an unsigned char) of memory area s, or a null pointer if c does not occur.
The memcmp() function compares its arguments, looking at the first n bytes (each interpreted as an unsigned char),
and returns an integer less than, equal to, or greater than 0, according as s1 is lexicographically less than, equal to, or
greater than s2 when taken to be unsigned characters.
The memcpy() function copies n bytes from memory area s2 to s1. It returns s1. If copying takes place between ob<hy>
jects that overlap, the behavior is undefined.
The memmove() function copies n bytes from memory area s2 to memory area s1. Copying between objects that
overlap will take place correctly. It returns s1.
The memset() function sets the first n bytes in memory area s to the value of c (converted to an unsigned char). It
returns s.
Using memcpy() might be faster than using memmove() if the application knows that the objects being copied do
not overlap.
See attributes(5) for descriptions of the following attributes:
tab() box; cw(2.75i) |cw(2.75i) lw(2.75i) |lw(2.75i) ATTRIBUTE TYPEATTRIBUTE VALUE _ Interface Stabili<hy>
tyStable _ MT-LevelMT-Safe _ StandardSee standards(5).
string(3C), attributes(5), standards(5)
Overlap between objects being copied can arise even when their (virtual) address ranges appear to be disjoint; for
example, as a result of memory-mapping overlapping portions of the same underlying file, or of attaching the same
shared memory segment more than once.
