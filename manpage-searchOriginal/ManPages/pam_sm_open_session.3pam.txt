<beginning of page>
pam_sm_open_session, pam_sm_close_session <-> service provider implementation for pam_open_session and
pam_close_session
cc [ flag ... ] file ... -lpam [ library ... ]
#include <security/pam_appl.h>
#include <security/pam_modules.h>
int pam_sm_open_session(pam_handle_t *pamh, int flags,
 int argc, const char **argv);
int pam_sm_close_session(pam_handle_t *pamh, int flags,
 int argc, const char **argv);
In response to a call to pam_open_session(3PAM) and pam_close_session(3PAM), the PAM framework calls
pam_sm_open_session() and pam_sm_close_session(), respectively from the modules listed in the pam.conf(4)
file. The session management provider supplies the back-end functionality for this interface function.
The pam_sm_open_session() function is called to initiate session management. Thepam_sm_close_session() func<hy>
tion is invoked when a session has terminated. The argument pamh is an authentication handle. The following flag
may be set in the flags field:
PAM_SILENT Session service should not generate any messages.
The argc argument represents the number of module options passed in from the configuration file pam.conf(4). argv
specifies the module options, which are interpreted and processed by the session management service. If an un<hy>
known option is passed in, an error should be logged through syslog(3C) and the option ignored.
Upon successful completion, PAM_SUCCESS should be returned. The following values may also be returned upon
error:
PAM_SESSION_ERR Cannot make or remove an entry for the specified session.
PAM_IGNORE Ignore underlying session module regardless of whether the control flag is required, optional or
sufficient.
See attributes(5) for description of the following attributes:
tab() box; cw(2.75i) |cw(2.75i) lw(2.75i) |lw(2.75i) ATTRIBUTE TYPEATTRIBUTE VALUE _ Interface Stability
Stable _ MT-LevelMT-Safe with exceptions
pam(3PAM), pam_open_session(3PAM), syslog(3C), libpam(3LIB), pam.conf(4), attributes(5)
The interfaces in libpam are MT-Safe only if each thread within the multithreaded application uses its own PAM
handle.
