<beginning of page>
feupdateenv <-> update floating-point environment
c99 [ flag... ] file... -lm [ library... ]
#include <fenv.h>
int feupdateenv(const fenv_t *envp);
The feupdateenv() function attempts to save the currently raised floating-point exceptions in its automatic storage,
attempts to install the floating-point environment represented by the object pointed to by envp, and then attempts to
raise the saved floating-point exceptions. The envp argument points to an object set by a call to fegetenv(3M) or fe<hy>
holdexcept(3M), or equals a floating-point environment macro.
The feupdateenv() function returns 0 if and only if all the required actions were successfully carried out.
No errors are defined.
The following example demonstrates sample code to hide spurious underflow floating-point exceptions: Example 1
Hide spurious underflow floating-point exceptions.
 #include <fenv.h>
 double f(double x)
 {
 # pragma STDC FENV_ACCESS ON
  double result;
  fenv_t save_env;
  feholdexcept(&save_env);
  // compute result
  if (/* test spurious underflow */)
  feclearexcept(FE_UNDERFLOW);
  feupdateenv(&save_env);
  return result;
 }
See attributes(5) for descriptions of the following attributes:
tab() box; cw(2.75i) |cw(2.75i) lw(2.75i) |lw(2.75i) ATTRIBUTE TYPEATTRIBUTE VALUE _ Interface Stability<hy>
Standard _ MT-LevelMT-Safe
fegetenv(3M), feholdexcept(3M), fenv.h(3HEAD), attributes(5), standards(5)
In a multithreaded program, the feupdateenv() function affects the floating point environment only for the calling
thread.
When the FEX_CUSTOM handling mode is in effect for an exception, raising that exception using feupdateenv()
causes the handling function to be invoked. The handling function can then modify the exception flags to be set as
described in fex_set_handling(3M). Any result value the handler supplies will be ignored.
The feupdateenv() function automatically installs and deinstalls SIGFPE handlers and sets and clears the trap en<hy>
able mode bits in the floating point status register as needed. If a program uses these functions and attempts to install
a SIGFPE handler or control the trap enable mode bits independently, the resulting behavior is not defined.
As described in fex_set_handling(3M), when a handling function installed in FEX_CUSTOM mode is invoked, all
exception traps are disabled (and will not be reenabled while SIGFPE is blocked). Thus, attempting to change the
environment from within a handler by calling fesetenv(3M) or feupdateenv might not produce the expected results.
