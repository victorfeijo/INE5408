<beginning of page>
fpathconf, pathconf <-> get configurable pathname variables
#include <unistd.h>
long fpathconf(int fildes, int name);
long pathconf(const char *path, int name);
The fpathconf() and pathconf() functions determine the current value of a configurable limit or option ( variable )
that is associated with a file or directory.
For pathconf(), the path argument points to the pathname of a file or directory.
For fpathconf(), the fildes argument is an open file descriptor.
The name argument represents the variable to be queried relative to that file or directory. The variables in the follow<hy>
ing table come from <limits.h> or <unistd.h> and the symbolic constants, defined in <unistd.h>, are the corre<hy>
sponding values used for name:
tab() box; cw(2.14i) |cw(2.15i) |cw(1.21i) lw(2.14i) |lw(2.15i) |lw(1.21i) VariableValue of nameNotes _ {ACL_EN<hy>
ABLED}_PC_ACL_ENABLED10 _ {FILESIZEBITS}_PC_FILESIZEBITS3,4 _
{LINK_MAX}_PC_LINK_MAX1 _ {MAX_CANON}_PC_MAX_CANON2 _ {MAX_IN<hy>
PUT}_PC_MAX_INPUT2 _ {MIN_HOLE_SIZE}_PC_MIN_HOLE_SIZE11 _
{NAME_MAX}_PC_NAME_MAX3, 4 _ {PATH_MAX}_PC_PATH_MAX4,5 _
{PIPE_BUF}_PC_PIPE_BUF6 _ {POSIX_ALLOC_SIZE_MIN}_PC_ALLOC_SIZE_MIN _
{POSIX_REC_INCR_XFER_SIZE}_PC_REC_INCR_XFER_SIZE _
{POSIX_REC_MAX_XFER_SIZE}_PC_REC_MAX_XFER_SIZE _
{POSIX_REC_MIN_XFER_SIZE}_PC_REC_MIN_XFER_SIZE _
{POSIX_REC_XFER_ALIGN}_PC_REC_XFER_ALIGN _ {SYMLINK_MAX}_PC_SYMLINK_MAX4, 9
_ {XATTR_ENABLED}_PC_XATTR_ENABLED1 _ {SATTR_ENABLED}_PC_SATTR_ENABLED _
{XATTR_EXISTS}_PC_XATTR_EXISTS1 _ {SATTR_EXISTS}_PC_SATTR_EXISTS _ {ACCESS_FIL<hy>
TERING}_PC_ACCESS_FILTERING12 _ _POSIX_CHOWN_RESTRICTED_PC_CHOWN_RESTRICT<hy>
ED7 _ _POSIX_NO_TRUNC_PC_NO_TRUNC3, 4 _ _POSIX_VDISABLE_PC_VDISABLE2 _
_POSIX_ASYNC_IO_PC_ASYNC_IO8 _ _POSIX_PRIO_IO_PC_PRIO_IO8 _
_POSIX_SYNC_IO_PC_SYNC_IO8 _ _POSIX_TIMESTAMP_RESOLUTION_PC_TIMESTAMP_RESO<hy>
LUTION1
Notes: 1. If path or fildes refers to a directory, the value returned applies to the directory itself. 2. If path or fildes
does not refer to a terminal file, it is unspecified whether an implementation supports an association of the variable
name with the specified file. 3. If path or fildes refers to a directory, the value returned applies to filenames within
the directory. 4. If path or fildes does not refer to a directory, it is unspecified whether an implementation supports
an association of the variable name with the specified file. 5. If path or fildes refers to a directory, the value returned
is the maximum length of a relative pathname when the specified directory is the working directory. 6. If path
refers to a FIFO, or fildes refers to a pipe or FIFO, the value returned applies to the referenced object. If path or
fildes refers to a directory, the value returned applies to any FIFO that exists or can be created within the directory. If
path or fildes refers to any other type of file, it is unspecified whether an implementation supports an association of
the variable name with the specified file. 7. If path or fildes refers to a directory, the value returned applies to any
files, other than directories, that exist or can be created within the directory. 8. If path or fildes refers to a directory,
it is unspecified whether an implementation supports an association of the variable name with the specified file. 9.
If path or fildes refers to a directory, the value returned is the maximum length of the string that a symbolic link in
that directory can contain. 10. If path or fildes refers to a file or directory in a file system that supports ACLs, the
value returned is the bitwise inclusive OR of the following flags associated with ACL types supported by the file sys<hy>
tem; otherwise 0 is returned.
_ACL_ACE_ENABLED The file system supports ACE ACLs.
_ACL_ACLENT_ENABLED The file system supports UFS aclent ACLs.
11. If a filesystem supports the reporting of holes (see lseek(2), pathconf() and fpathconf() return a positive num<hy>
ber that represents the minimum hole size returned in bytes. The offsets of holes returned will be aligned to this
same value. A special value of 1 is returned if the filesystem does not specify the minimum hole size but still reports
holes. 12. If path or fildes refers to a directory and the file system in which the directory resides supports access fil<hy>
<beginning of page>
tering, a non-zero value is returned. Otherwise, 0 is returned.
If name is an invalid value, both pathconf() and fpathconf() return <mi>1 and errno is set to indicate the error.
If the variable corresponding to name has no limit for the path or file descriptor, both pathconf() and fpathconf() re<hy>
turn <mi>1 without changing errno. If pathconf() needs to use path to determine the value of name and pathconf()
does not support the association of name with the file specified by path, or if the process did not have appropriate
privileges to query the file specified by path, or path does not exist, pathconf() returns <mi>1 and errno is set to indi<hy>
cate the error.
If fpathconf() needs to use fildes to determine the value of name and fpathconf() does not support the association of
name with the file specified by fildes, or if fildes is an invalid file descriptor, fpathconf() returns <mi>1 and errno is set
to indicate the error.
Otherwise pathconf() or fpathconf() returns the current variable value for the file or directory without changing er<hy>
rno. The value returned will not be more restrictive than the corresponding value available to the application when it
was compiled with <limits.h> or <unistd.h>.
The pathconf() function will fail if:
EINVAL The value of name is not valid.
ELOOP A loop exists in symbolic links encountered during resolution of the path argument.
The fpathconf() function will fail if:
EINVAL The value of name is not valid.
The pathconf() function may fail if:
EACCES Search permission is denied for a component of the path prefix.
EINVAL An association of the variable name with the specified file is not supported.
ENAMETOOLONG The length of the path argument exceeds {PATH_MAX} or a pathname component is longer
than {NAME_MAX}.
ENAMETOOLONG As a result of encountering a symbolic link in resolution of the path argument, the length of
the substituted pathname string exceeded {PATH_MAX}.
ENOENT A component of path does not name an existing file or path is an empty string.
ENOTDIR A component of the path prefix is not a directory.
The fpathconf() function may fail if:
EBADF The fildes argument is not a valid file descriptor.
EINVAL An association of the variable name with the specified file is not supported.
The {SYMLINK_MAX} variable applies only to the fpathconf() function.
See attributes(5) for descriptions of the following attributes:
<beginning of page>
tab() box; cw(2.75i) |cw(2.75i) lw(2.75i) |lw(2.75i) ATTRIBUTE TYPEATTRIBUTE VALUE _ Interface Stability<hy>
Committed _ MT-LevelAsync-Signal-Safe _ StandardSee standards(5).
lseek(2), confstr(3C), limits.h(3HEAD), sysconf(3C), attributes(5), standards(5)
