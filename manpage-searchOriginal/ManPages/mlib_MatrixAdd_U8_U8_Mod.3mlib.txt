<beginning of page>
mlib_MatrixAdd_U8_U8_Mod, mlib_MatrixAdd_U8_U8_Sat, mlib_MatrixAdd_U8C_U8C_Mod, mlib_Matrix<hy>
Add_U8C_U8C_Sat, mlib_MatrixAdd_S8_S8_Mod, mlib_MatrixAdd_S8_S8_Sat, mlib_Matrix<hy>
Add_S8C_S8C_Mod, mlib_MatrixAdd_S8C_S8C_Sat, mlib_MatrixAdd_S16_U8_Mod, mlib_Matrix<hy>
Add_S16_U8_Sat, mlib_MatrixAdd_S16_S8_Mod, mlib_MatrixAdd_S16_S8_Sat, mlib_Matrix<hy>
Add_S16_S16_Mod, mlib_MatrixAdd_S16_S16_Sat, mlib_MatrixAdd_S16C_U8C_Mod, mlib_Matrix<hy>
Add_S16C_U8C_Sat, mlib_MatrixAdd_S16C_S8C_Mod, mlib_MatrixAdd_S16C_S8C_Sat, mlib_Matrix<hy>
Add_S16C_S16C_Mod, mlib_MatrixAdd_S16C_S16C_Sat, mlib_MatrixAdd_S32_S16_Mod, mlib_Matrix<hy>
Add_S32_S16_Sat, mlib_MatrixAdd_S32_S32_Mod, mlib_MatrixAdd_S32_S32_Sat, mlib_Matrix<hy>
Add_S32C_S16C_Mod, mlib_MatrixAdd_S32C_S16C_Sat, mlib_MatrixAdd_S32C_S32C_Mod, mlib_Matrix<hy>
Add_S32C_S32C_Sat <-> matrix addition
cc [ flag... ] file... -lmlib [ library... ]
#include <mlib.h>
mlib_status mlib_MatrixAdd_U8_U8_Mod(mlib_u8 *z, const mlib_u8 *x,
 const mlib_u8 *y, mlib_s32 m, mlib_s32 n);
mlib_status mlib_MatrixAdd_U8_U8_Sat(mlib_u8 *z, const mlib_u8 *x,
 const mlib_u8 *y, mlib_s32 m, mlib_s32 n);
mlib_status mlib_MatrixAdd_U8C_U8C_Mod(mlib_u8 *z, const mlib_u8 *x,
 const mlib_u8 *y, mlib_s32 m, mlib_s32 n);
mlib_status mlib_MatrixAdd_U8C_U8C_Sat(mlib_u8 *z, const mlib_u8 *x,
 const mlib_u8 *y, mlib_s32 m, mlib_s32 n);
mlib_status mlib_MatrixAdd_S8_S8_Mod(mlib_s8 *z, const mlib_s8 *x,
 const mlib_s8 *y, mlib_s32 m, mlib_s32 n);
mlib_status mlib_MatrixAdd_S8_S8_Sat(mlib_s8 *z, const mlib_s8 *x,
 const mlib_s8 *y, mlib_s32 m, mlib_s32 n);
mlib_status mlib_MatrixAdd_S8C_S8C_Mod(mlib_s8 *z, const mlib_s8 *x,
 const mlib_s8 *y, mlib_s32 m, mlib_s32 n);
mlib_status mlib_MatrixAdd_S8C_S8C_Sat(mlib_s8 *z, const mlib_s8 *x,
 const mlib_s8 *y, mlib_s32 m, mlib_s32 n);
mlib_status mlib_MatrixAdd_S16_U8_Mod(mlib_s16 *z, const mlib_u8 *x,
 const mlib_u8 *y, mlib_s32 m, mlib_s32 n);
mlib_status mlib_MatrixAdd_S16_U8_Sat(mlib_s16 *z, const mlib_u8 *x,
 const mlib_u8 *y, mlib_s32 m, mlib_s32 n);
mlib_status mlib_MatrixAdd_S16_S8_Mod(mlib_s16 *z, const mlib_s8 *x,
 const mlib_s8 *y, mlib_s32 m, mlib_s32 n);
mlib_status mlib_MatrixAdd_S16_S8_Sat(mlib_s16 *z, const mlib_s8 *x,
 const mlib_s8 *y, mlib_s32 m, mlib_s32 n);
mlib_status mlib_MatrixAdd_S16_S16_Mod(mlib_s16 *z, const mlib_s16 *x,
 const mlib_s16 *y, mlib_s32 m, mlib_s32 n);
mlib_status mlib_MatrixAdd_S16_S16_Sat(mlib_s16 *z, const mlib_s16 *x,
 const mlib_s16 *y, mlib_s32 m, mlib_s32 n);
mlib_status mlib_MatrixAdd_S16C_U8C_Mod(mlib_s16 *z, const mlib_u8 *x,
 const mlib_u8 *y, mlib_s32 m, mlib_s32 n);
mlib_status mlib_MatrixAdd_S16C_U8C_Sat(mlib_s16 *z, const mlib_u8 *x,
 const mlib_u8 *y, mlib_s32 m, mlib_s32 n);
mlib_status mlib_MatrixAdd_S16C_S8C_Mod(mlib_s16 *z, const mlib_s8 *x,
 const mlib_s8 *y, mlib_s32 m, mlib_s32 n);
mlib_status mlib_MatrixAdd_S16C_S8C_Sat(mlib_s16 *z, const mlib_s8 *x,
 const mlib_s8 *y, mlib_s32 m, mlib_s32 n);
<beginning of page>
mlib_status mlib_MatrixAdd_S16C_S16C_Mod(mlib_s16 *z, const mlib_s16 *x,
 const mlib_s16 *y, mlib_s32 m, mlib_s32 n);
mlib_status mlib_MatrixAdd_S16C_S16C_Sat(mlib_s16 *z, const mlib_s16 *x,
 const mlib_s16 *y, mlib_s32 m, mlib_s32 n);
mlib_status mlib_MatrixAdd_S32_S16_Mod(mlib_s32 *z, const mlib_s16 *x,
 const mlib_s16 *y, mlib_s32 m, mlib_s32 n);
mlib_status mlib_MatrixAdd_S32_S16_Sat(mlib_s32 *z, const mlib_s16 *x,
 const mlib_s16 *y, mlib_s32 m, mlib_s32 n);
mlib_status mlib_MatrixAdd_S32_S32_Mod(mlib_s32 *z, const mlib_s32 *x,
 const mlib_s32 *y, mlib_s32 m, mlib_s32 n);
mlib_status mlib_MatrixAdd_S32_S32_Sat(mlib_s32 *z, const mlib_s32 *x,
 const mlib_s32 *y, mlib_s32 m, mlib_s32 n);
mlib_status mlib_MatrixAdd_S32C_S16C_Mod(mlib_s32 *z, const mlib_s16 *x,
 const mlib_s16 *y, mlib_s32 m, mlib_s32 n);
mlib_status mlib_MatrixAdd_S32C_S16C_Sat(mlib_s32 *z, const mlib_s16 *x,
 const mlib_s16 *y, mlib_s32 m, mlib_s32 n);
mlib_status mlib_MatrixAdd_S32C_S32C_Mod(mlib_s32 *z, const mlib_s32 *x,
 const mlib_s32 *y, mlib_s32 m, mlib_s32 n);
mlib_status mlib_MatrixAdd_S32C_S32C_Sat(mlib_s32 *z, const mlib_s32 *x,
 const mlib_s32 *y, mlib_s32 m, mlib_s32 n);
Each of these functions adds the first source matrix to the second source matrix and writes the output to the destina<hy>
tion matrix.
It uses the following equation:
 z[i] = x[i] + y[i]
where i = 0, 1, ..., (m*n - 1) for real data; i = 0, 1, ..., (m*n*2 - 1) for complex data.
Each of the functions takes the following arguments:
z Pointer to the destination matrix.
x Pointer to the first source matrix.
y Pointer to the second source matrix.
m Number of rows in the matrices.
n Number of columns in the matrices.
Each of the functions returns MLIB_SUCCESS if successful. Otherwise it returns MLIB_FAILURE.
See attributes(5) for descriptions of the following attributes:
tab() box; cw(2.75i) |cw(2.75i) lw(2.75i) |lw(2.75i) ATTRIBUTE TYPEATTRIBUTE VALUE _ Interface Stability<hy>
<beginning of page>
Committed _ MT-LevelMT-Safe
mlib_MatrixAdd_U8_Mod(3MLIB), attributes(5)
