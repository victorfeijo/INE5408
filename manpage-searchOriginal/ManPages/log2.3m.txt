<beginning of page>
log2, log2f, log2l <-> compute base 2 logarithm functions
c99 [ flag... ] file... -lm [ library... ]
#include <math.h>
double log2(double x);
float log2f(float x);
long double log2l(long double x);
These functions compute the base 2 logarithm of their argument x, log2(x).
Upon successful completion, these functions return the base 2 logarithm of x.
If x is <+->0, a pole error occurs and log2(), log2f(), and log2l() return <mi>HUGE_VAL, <mi>HUGE_VALF, and
<mi>HUGE_VALL, respectively.
For finite values of x that are less than 0, or if x is <mi>Inf a domain error occurs and a NaN is returned.
If x is NaN, a NaN is returned.
If x is 1, +0 is returned.
If x is +Inf, x is returned.
These functions will fail if:
Domain Error The finite value of x is less than 0, or x is <mi>Inf.
If the integer expression (math_errhandling & MATH_ERREXCEPT) is non-zero, then the invalid floating-point
exception is raised.
Pole Error The value of x is 0.
If the integer expression (math_errhandling & MATH_ERREXCEPT) is non-zero, then the divide-by-zero float<hy>
ing-point exception is raised.
An application wanting to check for exceptions should call feclearexcept(FE_ALL_EXCEPT) before calling these
functions. On return, if fetestexcept(FE_INVALID | FE_DIVBYZERO | FE_OVERFLOW | FE_UNDER<hy>
FLOW) is non-zero, an exception has been raised. An application should either examine the return value or check
the floating point exception flags to detect exceptions.
See attributes(5) for descriptions of the following attributes:
tab() box; cw(2.75i) |cw(2.75i) lw(2.75i) |lw(2.75i) ATTRIBUTE TYPEATTRIBUTE VALUE _ Interface Stability<hy>
Standard _ MT-LevelMT-Safe
feclearexcept(3M), fetestexcept(3M), log(3M), math.h(3HEAD), attributes(5), standards(5)
