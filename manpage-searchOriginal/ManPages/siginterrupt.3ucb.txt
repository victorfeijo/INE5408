<beginning of page>
siginterrupt <-> allow signals to interrupt functions
/usr/ucb/cc [ flag ... ] file ...
int siginterrupt(sig, flag)
int sig, flag;
siginterrupt() is used to change the function restart behavior when a function is interrupted by the specified signal.
If the flag is false (0), then functions will be restarted if they are interrupted by the specified signal and no data has
been transferred yet. System call restart is the default behavior when the signal(3C) routine is used.
If the flag is true, (1), then restarting of functions is disabled. If a function is interrupted by the specified signal and
no data has been transferred, the function will return <mi>1 with errno set to EINTR. Interrupted functions that have
started transferring data will return the amount of data actually transferred.
Issuing a siginterrupt() call during the execution of a signal handler will cause the new action to take place on the
next signal to be caught.
A 0 value indicates that the call succeeded. A <mi>1 value indicates that the call failed and errno is set to indicate the
error.
siginterrupt() may return the following error:
EINVAL sig is not a valid signal.
sigblock(3UCB), sigvec(3UCB), signal(3C)
Use of these interfaces should be restricted to only applications written on BSD platforms. Use of these interfaces
with any of the system libraries or in multi-threaded applications is unsupported.
This library routine uses an extension of the sigvec(3UCB) function that is not available in 4.2 BSD, hence it should
not be used if backward compatibility is needed.
