<beginning of page>
sem_post <-> increment the count of a semaphore
#include <semaphore.h>
int sem_post(sem_t *sem);
The sem_post() function unlocks the semaphore referenced by sem by performing a semaphore unlock operation on
that semaphore.
If the semaphore value resulting from this operation is positive, then no threads were blocked waiting for the sema<hy>
phore to become unlocked; the semaphore value is simply incremented.
If the value of the semaphore resulting from this operation is 0, then one of the threads blocked waiting for the sem<hy>
aphore will be allowed to return successfully from its call to sem_wait(3C). If the symbol _POSIX_PRIORI<hy>
TY_SCHEDULING is defined, the thread to be unblocked will be chosen in a manner appropriate to the schedul<hy>
ing policies and parameters in effect for the blocked threads. In the case of the schedulers SCHED_FIFO and
SCHED_RR, the highest priority waiting thread will be unblocked, and if there is more than one highest priority
thread blocked waiting for the semaphore, then the highest priority thread that has been waiting the longest will be
unblocked. If the symbol _POSIX_PRIORITY_SCHEDULING is not defined, the choice of a thread to unblock
is unspecified.
If successful, sem_post() returns 0; otherwise it returns <mi>1 and sets errno to indicate the error.
The sem_post() function will fail if:
EINVAL The sem argument does not refer to a valid semaphore.
ENOSYS The sem_post() function is not supported by the system.
EOVERFLOW The semaphore value exceeds SEM_VALUE_MAX.
The sem_post() function is reentrant with respect to signals and may be invoked from a signal-catching function.
The semaphore functionality described on this manual page is for the POSIX (see standards(5)) threads implemen<hy>
tation. For the documentation of the Solaris threads interface, see semaphore(3C)).
See sem_wait(3C).
See attributes(5) for descriptions of the following attributes:
tab() box; cw(2.75i) |cw(2.75i) lw(2.75i) |lw(2.75i) ATTRIBUTE TYPEATTRIBUTE VALUE _ Interface Stability<hy>
Committed _ MT-LevelAsync-Signal-Safe _ StandardSee standards(5).
sched_setscheduler(3C), sem_wait(3C), semaphore(3C), attributes(5), standards(5)
