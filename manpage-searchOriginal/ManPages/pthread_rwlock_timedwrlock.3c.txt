<beginning of page>
pthread_rwlock_timedwrlock, pthread_rwlock_reltimedwrlock_np <-> lock a read-write lock for writing
cc -mt [ flag... ] file... [ library... ]
#include <pthread.h>
#include <time.h>
int pthread_rwlock_timedwrlock(pthread_rwlock_t *restrict rwlock,
 const struct timespec *restrict abs_timeout);
int pthread_rwlock_reltimedwrlock_np(pthread_rwlock_t *restrict rwlock,
 const struct timespec *restrict rel_timeout);
The pthread_rwlock_timedwrlock() function applies a write lock to the read-write lock referenced by rwlock as in
the pthread_rwlock_wrlock(3C) function. If the lock cannot be acquired without waiting for other threads to un<hy>
lock the lock, this wait will be terminated when the specified timeout expires. The timeout expires when the absolute
time specified by abs_timeout passes, as measured by the CLOCK_REALTIME clock (that is, when the value of
that clock equals or exceeds abs_timeout), or if the absolute time specified by abs_timeout has already been passed
at the time of the call.
The pthread_rwlock_reltimedwrlock_np() function is identical to the pthread_rwlock_timedwrlock() function,
except that the timeout is specified as a relative time interval. The timeout expires when the time interval specified
by rel_timeout passes, as measured by the CLOCK_REALTIME clock, or if the time interval specified by
rel_timeout is negative at the time of the call.
The resolution of the timeout is the resolution of the CLOCK_REALTIME clock. The timespec data type is de<hy>
fined in the <time.h> header. Under no circumstances does either function fail with a timeout if the lock can be ac<hy>
quired immediately. The validity of the abs_timeout parameter need not be checked if the lock can be immediately
acquired.
If a signal that causes a signal handler to be executed is delivered to a thread blocked on a read- write lock with a
call to pthread_rwlock_timedwrlock() or pthread_rwlock_reltimedwrlock_np(), upon return from the signal
handler the thread resumes waiting for the lock as if it was not interrupted.
The calling thread can deadlock if at the time the call is made it holds the read-write lock. The results are undefined
if this function is called with an uninitialized read-write lock.
The pthread_rwlock_timedwrlock() and pthread_rwlock_reltimedwrlock_np() functions return 0 if the lock for
writing on the read-write lock object referenced by rwlock is acquired. Otherwise, an error number is returned to in<hy>
dicate the error.
The pthread_rwlock_timedwrlock() and pthread_rwlock_reltimedwrlock_np() functions will fail if:
ETIMEDOUT The lock could not be acquired before the specified timeout expired.
The pthread_rwlock_timedwrlock() and pthread_rwlock_reltimedwrlock_np() functions may fail if:
EDEADLK The calling thread already holds the rwlock.
EINVAL The value specified by rwlock does not refer to an initialized read-write lock object, or the timeout
nanosecond value is less than zero or greater than or equal to 1,000 million.
See attributes(5) for descriptions of the following attributes:
tab() box; cw(2.75i) |cw(2.75i) lw(2.75i) |lw(2.75i) ATTRIBUTE TYPEATTRIBUTE VALUE _ Interface Stability<hy>
See below. _ MT-LevelMT-Safe
The pthread_rwlock_timedwrlock() function is Standard. The pthread_rwlock_reltimedwrlock_np() function is
Stable.
pthread_rwlock_destroy(3C), pthread_rwlock_rdlock(3C), pthread_rwlock_timedrdlock(3C),
<beginning of page>
pthread_rwlock_trywrlock(3C), pthread_rwlock_unlock(3C), pthread_rwlock_wrlock(3C), attributes(5),
standards(5)
