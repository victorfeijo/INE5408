<beginning of page>
t_snddis <-> send user-initiated disconnection request
#include <xti.h>
int t_snddis(int fd, const struct t_call *call);
This routine is part of the XTI interfaces which evolved from the TLI interfaces. XTI represents the future evolution
of these interfaces. However, TLI interfaces are supported for compatibility. When using a TLI routine that has the
same name as an XTI routine, the tiuser.h header file must be used. Refer to the TLI COMPATIBILITY section
for a description of differences between the two interfaces.
This function is used to initiate an abortive release on an already established connection, or to reject a connection re<hy>
quest. The argument fd identifies the local transport endpoint of the connection, and call specifies information asso<hy>
ciated with the abortive release. The argument call points to a t_call structure which contains the following mem<hy>
bers:
 struct netbuf addr;
 struct netbuf opt;
 struct netbuf udata;
 int sequence;
The values in call have different semantics, depending on the context of the call to t_snddis(). When rejecting a con<hy>
nection request, call must be non-null and contain a valid value of sequence to uniquely identify the rejected connec<hy>
tion indication to the transport provider. The sequence field is only meaningful if the transport connection is in the
T_INCON state. The addr and opt fields of call are ignored. In all other cases, call need only be used when data is
being sent with the disconnection request. The addr, opt and sequence fields of the t_call structure are ignored. If
the user does not wish to send data to the remote user, the value of call may be a null pointer.
The udata structure specifies the user data to be sent to the remote user. The amount of user data must not exceed the
limits supported by the transport provider, as returned in the discon field, of the info argument of t_open(3NSL) or
t_getinfo(3NSL). If the len field of udata is zero, no data will be sent to the remote user.
Upon successful completion, a value of 0 is returned. Otherwise, a value of -1 is returned and t_errno is set to in<hy>
dicate an error.
T_DATAXFER, T_OUTCON, T_OUTREL, T_INREL, T_INCON(ocnt > 0).
On failure, t_errno is set to one of the following:
TBADF The specified file descriptor does not refer to a transport endpoint.
TBADDATA The amount of user data specified was not within the bounds allowed by the transport provider.
TBADSEQ An invalid sequence number was specified, or a null call pointer was specified, when rejecting a connec<hy>
tion request.
TLOOK An asynchronous event, which requires attention, has occurred.
TNOTSUPPORT This function is not supported by the underlying transport provider.
TOUTSTATE The communications endpoint referenced by fd is not in one of the states in which a call to this func<hy>
tion is valid.
TPROTO This error indicates that a communication problem has been detected between XTI and the transport
provider for which there is no other suitable XTI error (t_errno).
<beginning of page>
TSYSERR A system error has occurred during execution of this function.
The XTI and TLI interface definitions have common names but use different header files. This, and other semantic
differences between the two interfaces are described in the subsections below.
The XTI interfaces use the header file, xti.h. TLI interfaces should not use this header. They should use the header:
 #include <tiuser.h>
The t_errno value TPROTO can be set by the XTI interface but not by the TLI interface.
The format of the options in an opt buffer is dictated by the transport provider. Unlike the XTI interface, the TLI in<hy>
terface does not fix the buffer format.
See attributes(5) for descriptions of the following attributes:
tab() box; cw(2.75i) |cw(2.75i) lw(2.75i) |lw(2.75i) ATTRIBUTE TYPEATTRIBUTE VALUE _ MT LevelSafe
t_connect(3NSL), t_getinfo(3NSL), t_listen(3NSL), t_open(3NSL), t_snd(3NSL), attributes(5)
t_snddis() is an abortive disconnection. Therefore a t_snddis() issued on a connection endpoint may cause data pre<hy>
viously sent by means of t_snd(3NSL), or data not yet received, to be lost, even if an error is returned.
