<beginning of page>
pthread_once <-> initialize dynamic package
cc -mt [ flag... ] file... -lpthread [ library... ]
#include <pthread.h>
pthread_once_t once_control = PTHREAD_ONCE_INIT;
int pthread_once(pthread_once_t *once_control,
 void (*init_routine)(void));
If any thread in a process with a once_control parameter makes a call to pthread_once(), the first call will summon
the init_routine(), but subsequent calls will not. The once_control parameter determines whether the associated ini<hy>
tialization routine has been called. The init_routine() is complete upon return of pthread_once().
pthread_once() is not a cancellation point; however, if the function init_routine() is a cancellation point and is can<hy>
celed, the effect on once_control is the same as if pthread_once() had never been called.
The constant PTHREAD_ONCE_INIT is defined in the <pthread.h> header.
If once_control has automatic storage duration or is not initialized by PTHREAD_ONCE_INIT, the behavior of
pthread_once() is undefined.
Upon successful completion, pthread_once() returns 0. Otherwise, an error number is returned to indicate the error.
EINVAL once_control or init_routine is NULL.
See attributes(5) for descriptions of the following attributes:
tab() box; cw(2.75i) |cw(2.75i) lw(2.75i) |lw(2.75i) ATTRIBUTE TYPEATTRIBUTE VALUE _ Interface Stability<hy>
Standard _ MT-LevelMT-Safe
attributes(5), standards(5)
Solaris threads do not offer this functionality.
