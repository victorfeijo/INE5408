<beginning of page>
wstring, wscasecmp, wsncasecmp, wsdup, wscol <-> Process Code string operations
#include <widec.h>
int wscasecmp(const wchar_t *s1, const wchar_t *s2);
int wsncasecmp(const wchar_t *s1, const wchar_t *s2, int n);
wchar_t *wsdup(const wchar_t *s);
int wscol(const wchar_t *s);
These functions operate on Process Code strings terminated by wchar_t null characters. During appending or copy<hy>
ing, these routines do not check for an overflow condition of the receiving string. In the following, s, s1, and s2 point
to Process Code strings terminated by a wchar_t null.
The wscasecmp() function compares its arguments, ignoring case, and returns an integer greater than, equal to, or
less than 0, depending upon whether s1 is lexicographically greater than, equal to, or less than s2. It makes the same
comparison but compares at most n Process Code characters. The four Extended Unix Code (EUC) codesets are or<hy>
dered from lowest to highest as 0, 2, 3, 1 when characters from different codesets are compared.
The wsdup() function returns a pointer to a new Process Code string, which is a duplicate of the string pointed to by
s. The space for the new string is obtained using malloc(3C). If the new string cannot be created, a null pointer is re<hy>
turned.
The wscol() function returns the screen display width (in columns) of the Process Code string s.
See attributes(5) for descriptions of the following attributes:
tab() box; lw(2.75i) lw(2.75i) lw(2.75i) lw(2.75i) ATTRIBUTE TYPEATTRIBUTE VALUE MT-LevelMT-Safe
malloc(3C), string(3C), wcstring(3C), attributes(5)
