<beginning of page>
mlib_MatrixScale_U8_U8_Mod, mlib_MatrixScale_U8_U8_Sat, mlib_MatrixScale_U8C_U8C_Mod, mlib_Ma<hy>
trixScale_U8C_U8C_Sat, mlib_MatrixScale_S8_S8_Mod, mlib_MatrixScale_S8_S8_Sat, mlib_MatrixS<hy>
cale_S8C_S8C_Mod, mlib_MatrixScale_S8C_S8C_Sat, mlib_MatrixScale_S16_U8_Mod, mlib_MatrixS<hy>
cale_S16_U8_Sat, mlib_MatrixScale_S16_S8_Mod, mlib_MatrixScale_S16_S8_Sat, mlib_MatrixS<hy>
cale_S16_S16_Mod, mlib_MatrixScale_S16_S16_Sat, mlib_MatrixScale_S16C_U8C_Mod, mlib_MatrixS<hy>
cale_S16C_U8C_Sat, mlib_MatrixScale_S16C_S8C_Mod, mlib_MatrixScale_S16C_S8C_Sat, mlib_MatrixS<hy>
cale_S16C_S16C_Mod, mlib_MatrixScale_S16C_S16C_Sat, mlib_MatrixScale_S32_S16_Mod, mlib_MatrixS<hy>
cale_S32_S16_Sat, mlib_MatrixScale_S32_S32_Mod, mlib_MatrixScale_S32_S32_Sat, mlib_MatrixS<hy>
cale_S32C_S16C_Mod, mlib_MatrixScale_S32C_S16C_Sat, mlib_MatrixScale_S32C_S32C_Mod, mlib_MatrixS<hy>
cale_S32C_S32C_Sat <-> matrix linear scaling
cc [ flag... ] file... -lmlib [ library... ]
#include <mlib.h>
mlib_status mlib_MatrixScale_U8_U8_Mod(mlib_u8 *z,
 const mlib_u8 *x, const mlib_u8 *a, const mlib_u8 *b,
 mlib_s32 m, mlib_s32 n);
mlib_status mlib_MatrixScale_U8_U8_Sat(mlib_u8 *z,
 const mlib_u8 *x, const mlib_u8 *a, const mlib_u8 *b,
 mlib_s32 m, mlib_s32 n);
mlib_status mlib_MatrixScale_U8C_U8C_Mod(mlib_u8 *z,
 const mlib_u8 *x, const mlib_u8 *a, const mlib_u8 *b,
 mlib_s32 m, mlib_s32 n);
mlib_status mlib_MatrixScale_U8C_U8C_Sat(mlib_u8 *z,
 const mlib_u8 *x, const mlib_u8 *a, const mlib_u8 *b,
 mlib_s32 m, mlib_s32 n);
mlib_status mlib_MatrixScale_S8_S8_Mod(mlib_s8 *z,
 const mlib_s8 *x, const mlib_s8 *a, const mlib_s8 *b,
 mlib_s32 m, mlib_s32 n);
mlib_status mlib_MatrixScale_S8_S8_Sat(mlib_s8 *z,
 const mlib_s8 *x, const mlib_s8 *a, const mlib_s8 *b,
 mlib_s32 m, mlib_s32 n);
mlib_status mlib_MatrixScale_S8C_S8C_Mod(mlib_s8 *z,
 const mlib_s8 *x, const mlib_s8 *a, const mlib_s8 *b,
 mlib_s32 m, mlib_s32 n);
mlib_status mlib_MatrixScale_S8C_S8C_Sat(mlib_s8 *z,
 const mlib_s8 *x, const mlib_s8 *a, const mlib_s8 *b,
 mlib_s32 m, mlib_s32 n);
mlib_status mlib_MatrixScale_S16_U8_Mod(mlib_s16 *z,
 const mlib_u8 *x, const mlib_u8 *a, const mlib_u8 *b,
 mlib_s32 m, mlib_s32 n);
mlib_status mlib_MatrixScale_S16_U8_Sat(mlib_s16 *z,
 const mlib_u8 *x, const mlib_u8 *a, const mlib_u8 *b,
 mlib_s32 m, mlib_s32 n);
mlib_status mlib_MatrixScale_S16_S8_Mod(mlib_s16 *z,
 const mlib_s8 *x, const mlib_s8 *a, const mlib_s8 *b,
 mlib_s32 m, mlib_s32 n);
mlib_status mlib_MatrixScale_S16_S8_Sat(mlib_s16 *z,
 const mlib_s8 *x, const mlib_s8 *a, const mlib_s8 *b,
 mlib_s32 m, mlib_s32 n);
mlib_status mlib_MatrixScale_S16_S16_Mod(mlib_s16 *z,
 const mlib_s16 *x, const mlib_s16 *a, const mlib_s16 *b,
 mlib_s32 m, mlib_s32 n);
mlib_status mlib_MatrixScale_S16_S16_Sat(mlib_s16 *z,
<beginning of page>
 const mlib_s16 *x, const mlib_s16 *a, const mlib_s16 *b,
 mlib_s32 m, mlib_s32 n);
mlib_status mlib_MatrixScale_S16C_U8C_Mod(mlib_s16 *z,
 const mlib_u8 *x, const mlib_u8 *a, const mlib_u8 *b,
 mlib_s32 m, mlib_s32 n);
mlib_status mlib_MatrixScale_S16C_U8C_Sat(mlib_s16 *z,
 const mlib_u8 *x, const mlib_u8 *a, const mlib_u8 *b,
 mlib_s32 m, mlib_s32 n);
mlib_status mlib_MatrixScale_S16C_S8C_Mod(mlib_s16 *z,
 const mlib_s8 *x, const mlib_s8 *a, const mlib_s8 *b,
 mlib_s32 m, mlib_s32 n);
mlib_status mlib_MatrixScale_S16C_S8C_Sat(mlib_s16 *z,
 const mlib_s8 *x, const mlib_s8 *a, const mlib_s8 *b,
 mlib_s32 m, mlib_s32 n);
mlib_status mlib_MatrixScale_S16C_S16C_Mod(mlib_s16 *z,
 const mlib_s16 *x, const mlib_s16 *a, const mlib_s16 *b,
 mlib_s32 m, mlib_s32 n);
mlib_status mlib_MatrixScale_S16C_S16C_Sat(mlib_s16 *z,
 const mlib_s16 *x, const mlib_s16 *a, const mlib_s16 *b,
 mlib_s32 m, mlib_s32 n);
mlib_status mlib_MatrixScale_S32_S16_Mod(mlib_s32 *z,
 const mlib_s16 *x, const mlib_s16 *a, const mlib_s16 *b,
 mlib_s32 m, mlib_s32 n);
mlib_status mlib_MatrixScale_S32_S16_Sat(mlib_s32 *z,
 const mlib_s16 *x, const mlib_s16 *a, const mlib_s16 *b,
 mlib_s32 m, mlib_s32 n);
mlib_status mlib_MatrixScale_S32_S32_Mod(mlib_s32 *z,
 const mlib_s32 *x, const mlib_s32 *a, const mlib_s32 *b,
 mlib_s32 m, mlib_s32 n);
mlib_status mlib_MatrixScale_S32_S32_Sat(mlib_s32 *z,
 const mlib_s32 *x, const mlib_s32 *a, const mlib_s32 *b,
 mlib_s32 m, mlib_s32 n);
mlib_status mlib_MatrixScale_S32C_S16C_Mod(mlib_s32 *z,
 const mlib_s16 *x, const mlib_s16 *a, const mlib_s16 *b,
 mlib_s32 m, mlib_s32 n);
mlib_status mlib_MatrixScale_S32C_S16C_Sat(mlib_s32 *z,
 const mlib_s16 *x, const mlib_s16 *a, const mlib_s16 *b,
 mlib_s32 m, mlib_s32 n);
mlib_status mlib_MatrixScale_S32C_S32C_Mod(mlib_s32 *z,
 const mlib_s32 *x, const mlib_s32 *a, const mlib_s32 *b,
 mlib_s32 m, mlib_s32 n);
mlib_status mlib_MatrixScale_S32C_S32C_Sat(mlib_s32 *z,
 const mlib_s32 *x, const mlib_s32 *a, const mlib_s32 *b,
 mlib_s32 m, mlib_s32 n);
Each of these functions multiplies a matrix by a scalar and then adds an offset.
For real data, the following equation is used:
 z[i] = a[0]*x[i] + b[0]
<beginning of page>
where i = 0, 1, ..., (m*n - 1).
For complex data, the following equation is used:
 z[2*i] = a[0]*x[2*i] - a[1]*x[2*i + 1] + b[0]
 z[2*i + 1] = a[1]*x[2*i] + a[0]*x[2*i + 1] + b[1]
where i = 0, 1, ..., (m*n - 1).
Each of the functions takes the following arguments:
z Pointer to the destination matrix.
x Pointer to the source matrix.
a Pointer to the source scaling factor. When the function is used with complex data types, a[0] contains the scalar for
the real part, and a[1] contains the scalar for the imaginary part.
b Pointer to the source offset. When the function is used with complex data types, b[0] contains the offset for the re<hy>
al part, and b[1] contains the offset for the imaginary part.
m Number of rows in each matrix.
n Number of columns in each matrix.
Each of the functions returns MLIB_SUCCESS if successful. Otherwise it returns MLIB_FAILURE.
See attributes(5) for descriptions of the following attributes:
tab() box; cw(2.75i) |cw(2.75i) lw(2.75i) |lw(2.75i) ATTRIBUTE TYPEATTRIBUTE VALUE _ Interface Stability<hy>
Committed _ MT-LevelMT-Safe
mlib_MatrixScale_U8_Mod(3MLIB), attributes(5)
