<beginning of page>
atomic_dec, atomic_dec_8, atomic_dec_uchar, atomic_dec_16, atomic_dec_ushort, atomic_dec_32, atom<hy>
ic_dec_uint, atomic_dec_ulong, atomic_dec_64, atomic_dec_ptr, atomic_dec_8_nv, atomic_dec_uchar_nv, atom<hy>
ic_dec_16_nv, atomic_dec_ushort_nv, atomic_dec_32_nv, atomic_dec_uint_nv, atomic_dec_ulong_nv, atom<hy>
ic_dec_64_nv, atomic_dec_ptr_nv <-> atomic decrement operations
#include <atomic.h>
void atomic_dec_8(volatile uint8_t *target);
void atomic_dec_uchar(volatile uchar_t *target);
void atomic_dec_16(volatile uint16_t *target);
void atomic_dec_ushort(volatile ushort_t *target);
void atomic_dec_32(volatile uint32_t *target);
void atomic_dec_uint(volatile uint_t *target);
void atomic_dec_ulong(volatile ulong_t *target);
void atomic_dec_64(volatile uint64_t *target);
void atomic_dec_ptr(volatile void *target);
uint8_t atomic_dec_8_nv(volatile uint8_t *target);
uchar_t atomic_dec_uchar_nv(volatile uchar_t *target);
uint16_t atomic_dec_16_nv(volatile uint16_t *target);
ushort_t atomic_dec_ushort_nv(volatile ushort_t *target);
uint32_t atomic_dec_32_nv(volatile uint32_t *target);
uint_t atomic_dec_uint_nv(volatile uint_t *target);
ulong_t atomic_dec_ulong_nv(volatile ulong_t *target);
uint64_t atomic_dec_64_nv(volatile uint64_t *target);
void *atomic_dec_ptr_nv(volatile void *target);
These functions enable the decrementing (by one) of the value stored in target to occur in an atomic manner.
The *_nv() variants of these functions return the new value of target.
No errors are defined.
See attributes(5) for descriptions of the following attributes:
tab() box; cw(2.75i) |cw(2.75i) lw(2.75i) |lw(2.75i) ATTRIBUTE TYPEATTRIBUTE VALUE _ Interface Stabili<hy>
tyStable _ MT-LevelMT-Safe
atomic_add(3C), atomic_and(3C), atomic_bits(3C), atomic_cas(3C), atomic_inc(3C), atomic_or(3C), atom<hy>
ic_swap(3C), membar_ops(3C), attributes(5), atomic_ops(9F)
The *_nv() variants are substantially more expensive on some platforms than the versions that do not return values.
Do not use them unless you need to know the new value atomically (for example, when decrementing a reference
count and checking whether it went to zero).
