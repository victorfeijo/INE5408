<beginning of page>
pbind <-> control and query bindings of processes or LWPs
pbind -b processor_id pid [/lwpid]...
pbind [-q] [pid [/lwpid]]...
pbind -Q [processor_id]...
pbind -u pid [/lwpid]...
pbind -U [processor_id]...
pbind controls and queries bindings of processes and LWPs (lightweight processes) to processors. pbind can also
remove processor bindings that were previously established.
When an LWP is bound to a processor, it will be executed only by that processor except when the LWP requires a re<hy>
source that is provided only by another processor. The binding is not exclusive, that is, the processor is free to ex<hy>
ecute other LWPs as well.
Bindings are inherited, so new LWPs and processes created by a bound LWP will have the same binding. Binding an
interactive shell to a processor, for example, binds all commands executed by the shell.
Superusers may bind or unbind any process or LWP, while other users can bind or unbind any process or LWP for
which they have permission to signal, that is, any process that has the same effective user ID as the user.
The following options are supported:
-b processor_id
Binds all or a subset of the LWPs of the specified processes to the processor processor_id. Specify processor_id as
the processor ID of the processor to be controlled or queried. processor_id must be present and on-line. Use the
psrinfo command to determine whether or not processor_id is present and on-line. See psrinfo(1M).
-q
Displays the bindings of the specified processes or of all processes. If a process is composed of multiple LWPs
which have different bindings and the LWPs are not explicitly specified, the bindings of only one of the bound LWPs
will be displayed. The bindings of a subset of LWPs can be displayed by appending "/lwpids" to the process IDs.
Multiple LWPs may be selected using "-" and "," delimiters. See EXAMPLES.
-Q
Displays the LWPs bound to the specified list of processors, or all LWPs with processor bindings. For processes
composed of multiple LWPs, the bindings of individual LWPs will be displayed.
-u
Removes the bindings of all or a subset of the LWPs of the specified processes, allowing them to be executed on any
on-line processor.
-U
Removes the bindings of all LWPs bound to the specified list of processors, or to any processor if no argument is
specified.
The following operands are supported:
pid
The process ID of the process to be controlled or queried.
<beginning of page>
lwpid
The set of LWP IDs of the specified process to be controlled or queried. The syntax for selecting LWP IDs is as fol<hy>
lows:
 2,3,4-8 LWP IDs 2, 3, and 4 through 8
 -4 LWPs whose IDs are 4 or below
 4- LWPs whose IDs are 4 or above
processor_id
The processor ID of the processor to be controlled or queried.
Example 1 Binding Processes
The following example binds processes 204 and 223 to processor 2:
 example% pbind -b 2 204 223
 process id 204: was 2, now 2
 process id 223: was 3, now 2
Example 2 Unbinding a Process
The following example unbinds process 204:
 example% pbind -u 204
Example 3 Querying Bindings
The following example queries bindings. It demonstrates that process 1 is bound to processor 0, process 149 has at
least one LWP bound to CPU3, and process 101 has no bound LWPs.
 example% pbind -q 1 149 101
 process id 1: 0
 process id 149: 3
 process id 101: not bound
Example 4 Querying LWP Bindings
The following example queries bindings of LWPs. It demonstrates that LWP 1 of process 149 is bound to CPU3, and
LWP 2 of process 149 is not bound.
 example% pbind -q 149/1-2
 lwp id 149/1: 3
 lwp id 149/2: not bound
Example 5 Querying LWP Bindings for Processor 2:
The following example queries all LWPs bound to processor 2:
 example% pbind -Q 2
 lwp id 149/4: 2
 lwp id 149/5: 2
<beginning of page>
See attributes(5) for descriptions of the following attributes:
tab() box; cw(2.75i) |cw(2.75i) lw(2.75i) |lw(2.75i) ATTRIBUTE TYPEATTRIBUTE VALUE _ AvailabilitySUN<hy>
Wcsu
The following exit values are returned:
0
Successful completion.
>0
An error occurred.
psradm(1M), psrinfo(1M), psrset(1M), processor_bind(2), processor_info(2), sysconf(3C), attributes(5)
pbind: cannot query pid 31: No such process
The process specified did not exist or has exited.
pbind: cannot bind pid 31: Not owner
The user does not have permission to bind the process.
pbind: cannot bind pid 31: Invalid argument
The specified processor is not on-line.
