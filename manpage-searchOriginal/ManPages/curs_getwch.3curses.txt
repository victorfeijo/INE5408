<beginning of page>
curs_getwch, getwch, wgetwch, mvgetwch, mvwgetwch, ungetwch <-> get (or push back) wchar_t characters from
curses terminal keyboard
cc [ flag ... ] file ... -lcurses [ library .. ]
#include <curses.h>
int getwch(void);
int wgetwch(WINDOW *win);
int mvgetwch(int y, int x);
int mvwgetwch(WINDOW *win, int y, int x);
int ungetwch(int wch);
The getwch(), wgetwch(), mvgetwch(), and mvwgetwch() routines read an EUC character from the terminal asso<hy>
ciated with the window, transform it into a wchar_t character, and return a wchar_t character. In no-delay mode, if
no input is waiting, the value ERR is returned. In delay mode, the program waits until the system passes text
through to the program. Depending on the setting of cbreak, this is after one character ( cbreak mode ), or after the
first newline (nocbreak mode ). In half-delay mode, the program waits until a character is typed or the specified
timeout has been reached. Unless noecho has been set, the character will also be echoed into the designated win<hy>
dow.
If the window is not a pad, and it has been moved or modified since the last call to wrefresh(3CURSES), wrefresh
will be called before another character is read.
If keypad is TRUE, and a function key is pressed, the token for that function key is returned instead of the raw char<hy>
acters. Possible function keys are defined in <curses.h> with integers beginning with 0401, whose names begin with
KEY_. If a character that could be the beginning of a function key (such as escape) is received, curses(3CURSES)
sets a timer. If the remainder of the sequence does not come in within the designated time, the character is passed
through; otherwise, the function key value is returned. For this reason, many terminals experience a delay between
the time a user presses the escape key and the escape is returned to the program.
The ungetwch() routine places wch back onto the input queue to be returned by the next call to wgetwch().
The following function keys, defined in <curses.h>, might be returned by getwch() if keypad has been enabled.
Note that not all of these may be supported on a particular terminal if the terminal does not transmit a unique code
when the key is pressed or if the definition for the key is not present in the terminfo(4) database.
tab() box; cw(2.75i) cw(2.75i) lw(2.75i) lw(2.75i) NameKey name _ KEY_BREAKBreak key KEY_DOWNThe
four arrow keys ... KEY_UP KEY_LEFT KEY_RIGHT KEY_HOMEHome key (upward+left arrow)
KEY_BACKSPACEBackspace KEY_F0T{ Function keys; space for 64 keys is reserved. T} KEY_F(n)For 0 <<=> n <<=>
63 KEY_DLDelete line KEY_ILInsert line KEY_DCDelete character KEY_ICInsert char or enter insert mode
KEY_EICExit insert char mode KEY_CLEARClear screen KEY_EOSClear to end of screen KEY_EOLClear to
end of line KEY_SFScroll 1 line forward
 KEY_SRScroll 1 line backward (reverse) KEY_NPAGENext page KEY_PPAGEPrevious page KEY_STABSet tab
KEY_CTABClear tab KEY_CATABClear all tabs KEY_ENTEREnter or send KEY_SRESETSoft (partial) reset
KEY_RESETReset or hard reset KEY_PRINTPrint or copy KEY_LLT{ Home down or bottom (lower left). Keypad
is arranged like this: A1 up A3 left B2 right C1 down C3 T} KEY_A1Upper left of keypad
KEY_A3Upper right of keypad KEY_B2Center of keypad KEY_C1Lower left of keypad KEY_C3Lower right of
keypad KEY_BTABBack tab key KEY_BEGBeg(inning) key KEY_CANCELCancel key KEY_CLOSEClose key
KEY_COMMANDCmd (command) key KEY_COPYCopy key KEY_CREATECreate key KEY_ENDEnd key
KEY_EXITExit key KEY_FINDFind key KEY_HELPHelp key KEY_MARKMark key KEY_MESSAGEMessage
key KEY_MOVEMove key KEY_NEXTNext object key KEY_OPENOpen key KEY_OPTIONSOptions key
KEY_PREVIOUSPrevious object key KEY_REDORedo key KEY_REFERENCEReference key KEY_REFRESH
Refresh key KEY_REPLACEReplace key KEY_RESTARTRestart key KEY_RESUMEResume key
KEY_SAVESave key KEY_SBEGShifted beginning key KEY_SCANCELShifted cancel key KEY_SCOMMAND<hy>
Shifted command key KEY_SCOPYShifted copy key KEY_SCREATEShifted create key KEY_SDCShifted delete
char key KEY_SDLShifted delete line key KEY_SELECTSelect key KEY_SENDShifted end key KEY_SEOL<hy>
Shifted clear line key KEY_SEXITShifted exit key KEY_SFINDShifted find key KEY_SHELPShifted help key
KEY_SHOMEShifted home key KEY_SICShifted input key KEY_SLEFTShifted left arrow key KEY_SMES<hy>
SAGEShifted message key KEY_SMOVEShifted move key KEY_SNEXTShifted next key KEY_SOPTIONSShift<hy>
ed options key KEY_SPREVIOUSShifted prev key KEY_SPRINTShifted print key KEY_SREDOShifted redo key
<beginning of page>
KEY_SREPLACEShifted replace key KEY_SRIGHTShifted right arrow KEY_SRSUMEShifted resume key
KEY_SSAVEShifted save key KEY_SSUSPENDShifted suspend key KEY_SUNDOShifted undo key KEY_SUS<hy>
PENDSuspend key KEY_UNDOUndo key
All routines return the integer ERR upon failure and an integer value other than ERR upon successful completion.
See attributes(5) for descriptions of the following attributes:
tab() box; cw(2.75i) |cw(2.75i) lw(2.75i) |lw(2.75i) ATTRIBUTE TYPEATTRIBUTE VALUE _ MT-LevelUnsafe
curses(3CURSES), curs_inopts(3CURSES), curs_move(3CURSES), wrefresh(3CURSES), terminfo(4), at<hy>
tributes(5)
The header file <curses.h> automatically includes the header files <stdio.h>, <unctrl.h> and <widec.h>.
Use of the escape key by a programmer for a single character function is discouraged.
When using getwch(), wgetwch(), mvgetwch(), or mvwgetwch(), nocbreak mode and echo mode should not be
used at the same time. Depending on the state of the tty driver when each character is typed, the program may pro<hy>
duce undesirable results.
Note that getwch(), mvgetwch(), and mvwgetwch() may be macros.
