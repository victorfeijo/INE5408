<beginning of page>
in.ripngd <-> network routing daemon for IPv6
/usr/sbin/in.ripngd [-s] [-q] [-t] [-p n] [-P] [-v ]
 [logfile]
in.ripngd is the IPv6 equivalent of in.routed(1M). It is invoked at boot time to manage the network routing tables.
The routing daemon uses the Routing Information Protocol for IPv6.
in.ripngd is managed by the service management facility (SMF), by means of the service identifier:
 svc:/network/routing/ripng:default
In normal operation, in.ripngd listens on the udp(7P) socket port 521 for routing information packets. If the host is
an internetwork router, it periodically supplies copies of its routing tables to any directly connected hosts and net<hy>
works.
When in.ripngd is started, it uses the SIOCGLIFCONF ioctl(2) to find those directly connected IPv6 interfaces
configured into the system and marked "up"; the software loopback interface is ignored. If multiple interfaces are
present, it is assumed the host will forward packets between networks. in.ripngd then multicasts a request packet on
each IPv6 interface and enters a loop, listening for request and response packets from other hosts.
When a request packet is received, in.ripngd formulates a reply based on the information maintained in its internal
tables. The response packet contains a list of known routes. With each route is a number specifying the number of
bits in the prefix. The prefix is the number of bits in the high order part of an address that indicate the subnet or net<hy>
work that the route describes. Each route reported also has a "hop count" metric. A count of 16 or greater is consid<hy>
ered "infinity." The metric associated with each route returned provides a metric relative to the sender.
The request packets received by in.ripngd are used to update the routing tables if one of the following conditions is
satisfied: <bu> No routing table entry exists for the destination network or host, and the metric indicates the destination
is "reachable", that is, the hop count is not infinite. <bu> The source host of the packet is the same as the router in the
existing routing table entry. That is, updated information is being received from the very internetwork router through
which packets for the destination are being routed. <bu> The existing entry in the routing table has not been updated for
a period of time, defined to be 90 seconds, and the route is at least as cost-effective as the current route. <bu> The new
route describes a shorter route to the destination than the one currently stored in the routing tables; this is determined
by comparing the metric of the new route against the one stored in the table.
When an update is applied, in.ripngd records the change in its internal tables and generates a response packet to all
directly connected hosts and networks. To allow possible unstable situations to settle, in.ripngd waits a short period
of time (no more than 30 seconds) before modifying the kernel's routing tables.
In addition to processing incoming packets, in.ripngd also periodically checks the routing table entries. If an entry
has not been updated for 3 minutes, the entry's metric is set to infinity and marked for deletion. Deletions are de<hy>
layed an additional 60 seconds to insure the invalidation is propagated throughout the internet.
Hosts acting as internetwork routers gratuitously supply their routing tables every 30 seconds to all directly connect<hy>
ed hosts and networks.
in.ripngd supports the options listed below. Listed with the options are the equivalent SMF property values. These
are set for the ripng:default service with a command of the form:
 # routeadm -m ripng:default key=value
-p n Send and receive the routing packets from other routers using the UDP port number n. Use of this option is
equivalent to setting the udp_port property.
-P Do not use poison reverse. Use of this option is equivalent to setting the poison_reverse property to false.
-q Do not supply routing information. Use of this option is equivalent to setting the quiet_mode property to true.
<beginning of page>
-s Force in.ripngd to supply routing information whether it is acting as an internetwork router or not. Use of this op<hy>
tion is equivalent to setting the supply_routes property to true.
-t Print all packets sent or received to standard output. in.ripngd will not divorce itself from the controlling terminal.
Accordingly, interrupts from the keyboard will kill the process. Not supported by the ripng service.
-v Print all changes made to the routing tables to standard output with a timestamp. Use of this option is equivalent
to setting the verbose property to true.
Any other argument supplied to this option is interpreted as the name of the file in which the actions of in.ripngd, as
specified by this option or by -t, should be logged instead of being sent to standard output.
The logfile can be specified for the ripng service by means of the log_file property.
See attributes(5) for descriptions of the following attributes:
tab() box; cw(2.75i) |cw(2.75i) lw(2.75i) |lw(2.75i) ATTRIBUTE TYPEATTRIBUTE VALUE _ AvailabilitySUN<hy>
Wroute
in.routed(1M), routeadm(1M), svcadm(1M), ioctl(2), attributes(5), smf(5), udp(7P)
G. Malkin, R. Minnear, RFC 2080, RIPng for IPv6, January 1997.
The kernel's routing tables may not correspond to those of in.ripngd for short periods of time while processes that
utilize existing routes exit; the only remedy for this is to place the routing process in the kernel.
in.ripngd currently does not support all of the functionality of in.routed(1M). Future releases may support more if
appropriate.
in.ripngd initially obtains a routing table by examining the interfaces configured on a machine. It then sends a re<hy>
quest on all directly connected networks for more routing information. in.ripngd does not recognize or use any rout<hy>
ing information already established on the machine prior to startup. With the exception of interface changes, in.rip<hy>
ngd does not see any routing table changes that have been done by other programs on the machine, for example,
routes added, deleted or flushed by means of the route(1M) command. Therefore, these types of changes should not
be done while in.ripngd is running. Rather, shut down in.ripngd, make the changes required, and then restart
in.ripngd.
