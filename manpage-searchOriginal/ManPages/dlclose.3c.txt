<beginning of page>
dlclose <-> close a shared object
#include <dlfcn.h>
int dlclose(void *handle);
The dlclose() function decrements the reference count of the supplied handle. This handle represents an executable
object file and its dependencies, acquired from a previous call to dlopen(). A handle that is no longer referenced is
processed in an attempt to unload any objects that are associated with the handle from the current process. An unref<hy>
erenced handle is no longer available to dlsym().
Any finalization code within an object is executed prior to that object being unloaded. Any routines registered by an
object using atexit(3C) are called prior to that object being unloaded. See NOTES.
If the handle was successfully unreferenced, dlclose() returns 0. If the handle is invalid, or an error occurred as a re<hy>
sult of unloading an object, dlclose() returns a non-zero value. Additional diagnostic information is available
through dlerror().
The dlclose() function is one of a family of functions that give the user direct access to the dynamic linking facili<hy>
ties. These facilities are available to dynamically-linked processes only. See the Linker and Libraries Guide.
See attributes(5) for descriptions of the following attributes:
tab() box; cw(2.75i) |cw(2.75i) lw(2.75i) |lw(2.75i) ATTRIBUTE TYPEATTRIBUTE VALUE _ Interface Stability<hy>
Standard _ MT-LevelMT-Safe
ld(1), ld.so.1(1), atexit(3C), dladdr(3C), dldump(3C), dlerror(3C), dlopen(3C), dlsym(3C), attributes(5), stan<hy>
dards(5)
Linker and Libraries Guide
A successful invocation of dlclose() does not guarantee that the objects associated with the handle are removed
from the address space of the current process. Objects can be referenced by multiple handles, or by other objects. An
object is not removed from the address space of the current process until all references to that object are removed.
Once an object has been closed by dlclose(), referencing symbols contained in that object can cause undefined be<hy>
havior.
As part of unloading an object, finalization code within the object is called before the dlclose() returns. This final<hy>
ization is user code, and as such, can produce errors that can not be caught by dlclose(). For example, an object load<hy>
ed using RTLD_LAZY that attempts to call a function that can not be located, results in process termination. Erro<hy>
neous programming practices within the finalization code can also result in process termination. The runtime linkers
debugging facility can offer help identifying these types of error. See the LD_DEBUG environment variable of
ld.so.1(1).
