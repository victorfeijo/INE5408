<beginning of page>
t_getinfo <-> get protocol-specific service information
#include <xti.h>
int t_getinfo(int fd, struct t_info *info);
This routine is part of the XTI interfaces which evolved from the TLI interfaces. XTI represents the future evolution
of these interfaces. However, TLI interfaces are supported for compatibility. When using a TLI routine that has the
same name as an XTI routine, the tiuser.h header file must be used. Refer to the TLI COMPATIBILITY section
for a description of differences between the two interfaces.
This function returns the current characteristics of the underlying transport protocol and/or transport connection as<hy>
sociated with file descriptor fd. The info pointer is used to return the same information returned by t_open(3NSL),
although not necessarily precisely the same values. This function enables a transport user to access this information
during any phase of communication.
This argument points to a t_info structure which contains the following members:
 t_scalar_t addr; /*max size in octets of the transport protocol address*/
 t_scalar_t options; /*max number of bytes of protocol-specific options */
 t_scalar_t tsdu; /*max size in octets of a transport service data unit */
 t_scalar_t etsdu; /*max size in octets of an expedited transport service*/
  /*data unit (ETSDU) */
 t_scalar_t connect; /*max number of octets allowed on connection */
  /*establishment functions */
 t_scalar_t discon; /*max number of octets of data allowed on t_snddis() */
  /*and t_rcvdis() functions */
 t_scalar_t servtype; /*service type supported by the transport provider */
 t_scalar_t flags; /*other info about the transport provider */
The values of the fields have the following meanings:
addr A value greater than zero indicates the maximum size of a transport protocol address and a value of T_IN<hy>
VALID (-2) specifies that the transport provider does not provide user access to transport protocol addresses.
options A value greater than zero indicates the maximum number of bytes of protocol-specific options supported by
the provider, and a value of T_INVALID (-2) specifies that the transport provider does not support user-settable op<hy>
tions.
tsdu A value greater than zero specifies the maximum size in octets of a transport service data unit (TSDU); a value
of T_NULL (zero) specifies that the transport provider does not support the concept of TSDU, although it does sup<hy>
port the sending of a datastream with no logical boundaries preserved across a connection; a value of T_INFINITE
(-1) specifies that there is no limit on the size in octets of a TSDU; and a value of T_INVALID (-2) specifies that
the transfer of normal data is not supported by the transport provider.
etsdu A value greater than zero specifies the maximum size in octets of an expedited transport service data unit
(ETSDU); a value of T_NULL (zero) specifies that the transport provider does not support the concept of ETSDU,
although it does support the sending of an expedited data stream with no logical boundaries preserved across a con<hy>
nection; a value of T_INFINITE (-1) specifies that there is no limit on the size (in octets) of an ETSDU; and a val<hy>
ue of T_INVALID (-2) specifies that the transfer of expedited data is not supported by the transport provider. Note
that the semantics of expedited data may be quite different for different transport providers.
connect A value greater than zero specifies the maximum number of octets that may be associated with connection
establishment functions and a value of T_INVALID (-2) specifies that the transport provider does not allow data to
be sent with connection establishment functions.
discon If the T_ORDRELDATA bit in flags is clear, a value greater than zero specifies the maximum number of
octets that may be associated with the t_snddis(3NSL) and t_rcvdis(3NSL) functions, and a value of T_INVALID
<beginning of page>
(-2) specifies that the transport provider does not allow data to be sent with the abortive release functions. If the
T_ORDRELDATA bit is set in flags, a value greater than zero specifies the maximum number of octets that may be
associated with the t_sndreldata(), t_rcvreldata(), t_snddis(3NSL) and t_rcvdis(3NSL) functions.
servtype This field specifies the service type supported by the transport provider, as described below.
flags This is a bit field used to specify other information about the communications provider. If the T_ORDREL<hy>
DATA bit is set, the communications provider supports sending user data with an orderly release. If the
T_SENDZERO bit is set in flags, this indicates that the underlying transport provider supports the sending of zero-
length TSDUs.
If a transport user is concerned with protocol independence, the above sizes may be accessed to determine how large
the buffers must be to hold each piece of information. Alternatively, the t_alloc(3NSL) function may be used to al<hy>
locate these buffers. An error will result if a transport user exceeds the allowed data size on any function. The value
of each field may change as a result of protocol option negotiation during connection establishment (the t_opt<hy>
mgmt(3NSL) call has no effect on the values returned by t_getinfo()). These values will only change from the val<hy>
ues presented to t_open(3NSL) after the endpoint enters the T_DATAXFER state.
The servtype field of info specifies one of the following values on return:
T_COTS The transport provider supports a connection-mode service but does not support the optional orderly re<hy>
lease facility.
T_COTS_ORD The transport provider supports a connection-mode service with the optional orderly release facili<hy>
ty.
T_CLTS The transport provider supports a connectionless-mode service. For this service type, t_open(3NSL) will
return T_INVALID (-1) for etsdu, connect and discon.
Upon successful completion, a value of 0 is returned. Otherwise, a value of -1 is returned and t_errno is set to in<hy>
dicate an error.
ALL - apart from T_UNINIT.
On failure, t_errno is set to one of the following:
TBADF The specified file descriptor does not refer to a transport endpoint.
TPROTO This error indicates that a communication problem has been detected between XTI and the transport
provider for which there is no other suitable XTI error (t_errno).
TSYSERR A system error has occurred during execution of this function.
The XTI and TLI interface definitions have common names but use different header files. This, and other semantic
differences between the two interfaces are described in the subsections below.
The XTI interfaces use the header file, xti.h. TLI interfaces should not use this header. They should use the header:
 #include <tiuser.h>
The t_errno value TPROTO can be set by the XTI interface but not by the TLI interface.
For TLI , the t_info structure referenced by info lacks the following structure member:
 t_scalar_t flags; /* other info about the transport provider */
<beginning of page>
This member was added to struct t_info in the XTI interfaces.
When a value of -1 is observed as the return value in various t_info structure members, it signifies that the transport
provider can handle an infinite length buffer for a corresponding attribute, such as address data, option data, TSDU
(octet size), ETSDU (octet size), connection data, and disconnection data. The corresponding structure members are
addr, options, tsdu, estdu, connect, and discon, respectively.
See attributes(5) for descriptions of the following attributes:
tab() box; cw(2.75i) |cw(2.75i) lw(2.75i) |lw(2.75i) ATTRIBUTE TYPEATTRIBUTE VALUE _ MT LevelSafe
t_alloc(3NSL), t_open(3NSL), t_optmgmt(3NSL), t_rcvdis(3NSL), t_snddis(3NSL), attributes(5)
