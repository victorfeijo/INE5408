<beginning of page>
socket <-> create an endpoint for communication
cc [ flag ... ] file ... -lxnet [ library ... ]
#include <sys/socket.h>
int socket(int domain, int type, int protocol);
The socket() function creates an unbound socket in a communications domain, and returns a file descriptor that can
be used in later function calls that operate on sockets.
The <sys/socket.h> header defines at least the following values for the domain argument:
AF_UNIX File system pathnames.
AF_INET Internet Protocol version 4 (IPv4) address.
AF_INET6 Internet Protocol version 6 (IPv6) address.
The type argument specifies the socket type, which determines the semantics of communication over the socket. The
socket types supported by the system are implementation-dependent. Possible socket types include:
SOCK_STREAM Provides sequenced, reliable, bidirectional, connection-mode byte streams, and may provide a
transmission mechanism for out-of-band data.
SOCK_DGRAM Provides datagrams, which are connectionless-mode, unreliable messages of fixed maximum
length.
SOCK_SEQPACKET Provides sequenced, reliable, bidirectional, connection-mode transmission path for records.
A record can be sent using one or more output operations and received using one or more input operations, but a sin<hy>
gle operation never transfers part of more than one record. Record boundaries are visible to the receiver via the
MSG_EOR flag.
If the protocol argument is non-zero, it must specify a protocol that is supported by the address family. The proto<hy>
cols supported by the system are implementation-dependent.
The process may need to have appropriate privileges to use the socket() function or to create some sockets.
The function takes the following arguments:
domain Specifies the communications domain in which a socket is to be created.
type Specifies the type of socket to be created.
protocol Specifies a particular protocol to be used with the socket. Specifying a protocol of 0 causes socket() to use
an unspecified default protocol appropriate for the requested socket type.
The domain argument specifies the address family used in the communications domain. The address families sup<hy>
ported by the system are implementation-dependent.
The documentation for specific address families specify which protocols each address family supports. The docu<hy>
mentation for specific protocols specify which socket types each protocol supports.
The application can determine if an address family is supported by trying to create a socket with domain set to the
protocol in question.
Upon successful completion, socket() returns a nonnegative integer, the socket file descriptor. Otherwise a value of
-1 is returned and errno is set to indicate the error.
<beginning of page>
The socket() function will fail if:
EAFNOSUPPORT The implementation does not support the specified address family.
EMFILE No more file descriptors are available for this process.
ENFILE No more file descriptors are available for the system.
EPROTONOSUPPORT The protocol is not supported by the address family, or the protocol is not supported by the
implementation.
EPROTOTYPE The socket type is not supported by the protocol.
The socket() function may fail if:
EACCES The process does not have appropriate privileges.
ENOBUFS Insufficient resources were available in the system to perform the operation.
ENOMEM Insufficient memory was available to fulfill the request.
ENOSR There were insufficient STREAMS resources available for the operation to complete.
See attributes(5) for descriptions of the following attributes:
tab() box; cw(2.75i) |cw(2.75i) lw(2.75i) |lw(2.75i) ATTRIBUTE TYPEATTRIBUTE VALUE _ Interface Stability<hy>
Standard _ MT-LevelMT-Safe
accept(3XNET), bind(3XNET), connect(3XNET), getsockname(3XNET), getsockopt(3XNET), listen(3XNET),
recv(3XNET), recvfrom(3XNET), recvmsg(3XNET), send(3XNET), sendmsg(3XNET), setsockopt(3XNET),
shutdown(3XNET), socketpair(3XNET), attributes(5), standards(5)
