<beginning of page>
mq_open <-> open a message queue
#include <mqueue.h>
mqd_t mq_open(const char *name, int oflag,
 /* unsigned long mode, mq_attr attr */ ...);
The mq_open() function establishes the connection between a process and a message queue with a message queue
descriptor. It creates a open message queue description that refers to the message queue, and a message queue de<hy>
scriptor that refers to that open message queue description. The message queue descriptor is used by other functions
to refer to that message queue.
The name argument points to a string naming a message queue. The name argument must conform to the construc<hy>
tion rules for a path-name. If name is not the name of an existing message queue and its creation is not requested,
mq_open() fails and returns an error. The first character of name must be a slash (/) character and the remaining
characters of name cannot include any slash characters. For maximum portability, name should include no more
than 14 characters, but this limit is not enforced.
The oflag argument requests the desired receive and/or send access to the message queue. The requested access per<hy>
mission to receive messages or send messages is granted if the calling process would be granted read or write access,
respectively, to a file with the equivalent permissions.
The value of oflag is the bitwise inclusive OR of values from the following list. Applications must specify exactly
one of the first three values (access modes) below in the value of oflag:
O_RDONLY Open the message queue for receiving messages. The process can use the returned message queue de<hy>
scriptor with mq_receive(3C), but not mq_send(3C). A message queue may be open multiple times in the same or
different processes for receiving messages.
O_WRONLY Open the queue for sending messages. The process can use the returned message queue descriptor
with mq_send(3C) but not mq_receive(3C). A message queue may be open multiple times in the same or different
processes for sending messages.
O_RDWR Open the queue for both receiving and sending messages. The process can use any of the functions al<hy>
lowed for O_RDONLY and O_WRONLY. A message queue may be open multiple times in the same or different
processes for sending messages.
Any combination of the remaining flags may additionally be specified in the value of oflag:
O_CREAT This option is used to create a message queue, and it requires two additional arguments: mode, which is
of type mode_t, and attr, which is pointer to a mq_attr structure. If the pathname, name, has already been used to
create a message queue that still exists, then this flag has no effect, except as noted under O_EXCL (see below).
Otherwise, a message queue is created without any messages in it.
The user ID of the message queue is set to the effective user ID of process, and the group ID of the message queue is
set to the effective group ID of the process. The file permission bits are set to the value of mode, and modified by
clearing all bits set in the file mode creation mask of the process (see umask(2)).
If attr is non-NULL and the calling process has the appropriate privilege on name, the message queue mq_maxmsg
and mq_msgsize attributes are set to the values of the corresponding members in the mq_attr structure referred to by
attr. If attr is non-NULL, but the calling process does not have the appropriate privilege on name, the mq_open()
function fails and returns an error without creating the message queue.
O_EXCL If both O_EXCL and O_CREAT are set, mq_open() will fail if the message queue name exists. The
check for the existence of the message queue and the creation of the message queue if it does not exist are atomic
with respect to other processes executing mq_open() naming the same name with both O_EXCL and O_CREAT
set. If O_EXCL and O_CREAT are not set, the result is undefined.
O_NONBLOCK The setting of this flag is associated with the open message queue description and determines
whether a mq_send(3C) or mq_receive(3C) waits for resources or messages that are not currently available, or fails
with errno set to EAGAIN. See mq_send(3C) and mq_receive(3C) for details.
<beginning of page>
Upon successful completion, mq_open() returns a message queue descriptor; otherwise the function returns
(mqd_t)<mi>1 and sets errno to indicate the error condition.
The mq_open() function will fail if:
EACCES The message queue exists and the permissions specified by oflag are denied, or the message queue does
not exist and permission to create the message queue is denied.
EEXIST O_CREAT and O_EXCL are set and the named message queue already exists.
EINTR The mq_open() operation was interrupted by a signal.
EINVAL The mq_open() operation is not supported for the given name, or O_CREAT was specified in oflag, the
value of attr is not NULL, and either mq_maxmsg or mq_msgsize was less than or equal to zero.
EMFILE The number of open message queue descriptors in this process exceeds MQ_OPEN_MAX, of the num<hy>
ber of open file descriptors in this process exceeds OPEN_MAX.
ENAMETOOLONG The length of the name string exceeds PATH_MAX, or a pathname component is longer than
NAME_MAX while _POSIX_NO_TRUNC is in effect.
ENFILE Too many message queues are currently open in the system.
ENOENT O_CREAT is not set and the named message queue does not exist.
ENOSPC There is insufficient space for the creation of the new message queue.
ENOSYS The mq_open() function is not supported by the system.
See attributes(5) for descriptions of the following attributes:
tab() box; lw(2.75i) |lw(2.75i) lw(2.75i) |lw(2.75i) ATTRIBUTE TYPEATTRIBUTE VALUE _ Interface Stabili<hy>
tyCommitted _ MT-LevelMT-Safe _ StandardSee standards(5).
exec(2), exit(2), umask(2), sysconf(3C), mqueue.h(3HEAD), mq_close(3C), mq_receive(3C), mq_send(3C),
mq_setattr(3C), mq_unlink(3C), attributes(5), standards(5)
Due to the manner in which message queues are implemented, they should not be considered secure and should not
be used in security-sensitive applications.
Solaris 2.6 was the first release to support the Asynchronous Input and Output option. Prior to this release, this func<hy>
tion always returned <mi>1 and set errno to ENOSYS.
