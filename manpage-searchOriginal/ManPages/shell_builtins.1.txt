<beginning of page>
shell_builtins, case, for, foreach, function, if, repeat, select, switch, until, while <-> shell command interpreter built-in
commands
The shell command interpreters csh(1), ksh(1), ksh93(1), and sh(1) have special built-in commands. The commands
case, for, foreach, function, if, repeat, select, switch, until, and while are commands in the syntax recognized by
the shells. They are described in the Commands section of the manual pages of the respective shells. In ksh93(1),
fc, hash, stop, suspend, times, and type are aliases by default. In ksh93, the following built-ins are bound to the
/bin pathname by default and are invoked if the pathname search encounters an executable command of that name in
the /bin or /usr/bin directory: cat, chown, getconf, head, mkdir, rmdir, tee, uniq, and wc.
The remaining commands listed in the following table are built into the shells for reasons such as efficiency or data
sharing between command invocations. They are described on their respective manual pages.
tab(); cw(2.75i) cw(2.75i) lw(2.75i) lw(2.75i) CommandShell _ ++**aliascsh, ksh, ksh93 bgcsh, ksh, ksh93, sh
+*breakcsh, ksh, ksh93, sh builtinksh93 casecsh, ksh, ksh93, sh catksh93 cdcsh, ksh, ksh93, sh chdircsh, sh
chownksh93 commandksh93 +*continuecsh, ksh, ksh93, sh dirscsh disownksh93 echocsh, ksh, ksh93, sh
+*evalcsh, ksh, ksh93, sh +*execcsh, ksh, ksh93, sh +*exitcsh, ksh, ksh93, sh ++**exportksh, ksh93, sh falseksh,
ksh93 fcksh, ksh93 fgcsh, ksh, ksh93, sh forksh, ksh93, sh foreachcsh functionksh, ksh93 getconfksh93 getopt<hy>
sksh, ksh93, sh globcsh gotocsh hashksh, ksh93, sh hashstatcsh headksh93 histksh93 historycsh ifcsh, ksh, ksh93,
sh jobscsh, ksh, ksh93, sh killcsh, ksh, ksh93, sh letksh, ksh93, limitcsh logincsh, ksh, ksh93, sh logoutcsh
mkdirksh93 nicecsh +*newgrpksh, ksh93, sh nohupcsh notifycsh onintrcsh popdcsh printksh, ksh93 printfksh93
pushdcsh pwdksh, ksh93, sh readksh, ksh93, sh ++**readonlyksh, ksh93, sh rehashcsh repeatcsh +*returnksh,
ksh93, sh selectksh, ksh93 +setcsh, ksh, ksh93, sh setenvcsh shiftcsh, ksh, ksh93, sh sleepksh93 sourcecsh stopcsh,
ksh, ksh93, sh suspendcsh, ksh, sh switchcsh teeksh93 testksh, ksh93, sh timecsh *timesksh, ksh93, sh *+trapksh,
ksh93, sh trueksh, ksh93 typeksh, ksh93, sh ++**typesetksh, ksh93 ulimitksh, ksh93, sh umaskcsh, ksh, ksh93, sh
+unaliascsh, ksh, ksh93 unhashcsh uniqksh93 unlimitcsh +unsetcsh, ksh, ksh93, sh unsetenvcsh untilksh, ksh93,
sh *waitcsh, ksh, ksh93, sh whenceksh, ksh93 whilecsh, ksh, ksh93, sh
Input/output redirection is now permitted for these commands. File descriptor 1 is the default output location. When
Job Control is enabled, additional Special Commands are added to the shell's environment.
In addition to these built-in reserved command words, sh also uses:
: No effect; the command does nothing. A zero exit code is returned.
.filename Read and execute commands from filename and return. The search path specified by PATH is used to find
the directory containing filename.
Built-in commands are executed within the C shell. If a built-in command occurs as any component of a pipeline ex<hy>
cept the last, it is executed in a subshell. In addition to these built-in reserved command words, csh also uses:
: Null command. This command is interpreted, but performs no action.
Input/Output redirection is permitted. Unless otherwise indicated, the output is written on file descriptor 1 and the
exit status, when there is no syntax error, is zero.
Commands that are preceded by one or two * (asterisks) are treated specially in the following ways: 1. Variable as<hy>
signment lists preceding the command remain in effect when the command completes. 2. I/O redirections are pro<hy>
cessed after variable assignments. 3. Errors cause a script that contains them to abort. 4. Words, following a com<hy>
mand preceded by ** that are in the format of a variable assignment, are expanded with the same rules as a variable
assignment. This means that tilde substitution is performed after the = sign and word splitting and file name genera<hy>
tion are not performed.
In addition to these built-in reserved command words, ksh also uses:
* : [ arg ... ] The command only expands parameters.
* .file [ arg ... ] Read the complete file then execute the commands. The commands are executed in the current shell
environment. The search path specified by PATH is used to find the directory containing file. If any arguments arg
<beginning of page>
are specified, they become the positional parameters. Otherwise, the positional parameters are unchanged. The exit
status is the exit status of the last command executed. the loop termination test.
Input/Output redirection is permitted. Unless otherwise indicated, the output is written on file descriptor 1 and the
exit status, when there is no syntax error, is zero.
Except for :, true, false, echo, newgrp, and login, all built-in commands accept -- to indicate end of options. They
also interpret the option --man as a request to display the manual page onto standard error and -? as a help request
which prints a usage message on standard error.
Commands that are preceded by one or two + are treated specially in the following ways: 1. Variable assignment
lists preceding the command remain in effect when the command completes. 2. I/O redirections are processed after
variable assignments. 3. Errors cause a script that contains them to abort. 4. They are not valid function names. 5.
Words, following a command preceded by ++ that are in the format of a variable assignment, are expanded with the
same rules as a variable assignment. This means that tilde substitution is performed after the = sign and field split<hy>
ting and file name generation are not performed.
In addition to these built-in reserved command words, ksh93 also uses:
: [ arg ... ] The command only expands parameters.
.name [ arg ... ] If name is a function defined with the function name reserved word syntax, the function is executed
in the current environment (as if it had been defined with the name() syntax.) Otherwise if name refers to a file, the
file is read in its entirety and the commands are executed in the current shell environment. The search path specified
by PATH is used to find the directory containing the file. If any arguments arg are specified, they become the posi<hy>
tional parameters while processing the . command and the original positional parameters are restored upon comple<hy>
tion. Otherwise the positional parameters are unchanged. The exit status is the exit status of the last command ex<hy>
ecuted.
Intro(1), alias(1), break(1), builtin(1), cd(1), chmod(1), csh(1), disown(1), echo(1), exec(1), exit(1), find(1),
getoptcvt(1), getopts(1), glob(1), hash(1), history(1), jobs(1), kill(1), ksh(1), ksh93(1), let(1), limit(1), login(1),
logout(1), newgrp(1), nice(1), nohup(1), print(1), printf(1), pwd(1), read(1), readonly(1), set(1), sh(1), shift(1),
sleep(1), suspend(1), test(1)test(1), test(1B), time(1), times(1), trap(1), typeset(1), umask(1), wait(1), chdir(2),
chmod(2), creat(2), umask(2), getopt(3C), profile(4), environ(5)
