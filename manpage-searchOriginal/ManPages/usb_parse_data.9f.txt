<beginning of page>
usb_parse_data <-> Tokenize and align the bytes of raw variable-format data
#include <sys/usb/usba.h>
size_t usb_parse_data(char *format, uchar_t *data,
 size_t datalen, void *structure, size_t structlen);
Solaris DDI specific (Solaris DDI)
format Null terminated string describing the format of the data structure for general-purpose byte swapping. The let<hy>
ters "c," "s," "l," and "L" represent 1, 2, 4 and 8 byte quantities, respectively. A descriptor that consists of a short and
two bytes would be described by "scc." A number preceding a letter serves as a multiplier of that letter. A format
equivalent to "scc" is "s2c."
data Raw descriptor data to parse.
datalen Length, in bytes, of the raw descriptor data buffer.
structure Destination data buffer where parsed data is returned.
structlen Length, in bytes, of the destination data buffer. Parsed result length will not exceed this value.
The usb_parse_data function parses data such as a variable-format class- or vendor-specific descriptor. The func<hy>
tion also tokenizes and aligns the bytes of raw descriptor data into fields of a variable-format descriptor.
While the USBA framework can parse the endpoint, interface, configuration, and string descriptors defined by the
USB 2.0 specification, the format of class- or vendor-specific descriptors cannot be explicitly defined by the specifi<hy>
cation and will be unique for each. The format argument defines how to parse such a descriptor.
While the USB specification defines bit ordering as little-endian, this routine (like the entire API), converts the data
to the endianness of the host.
The structlen parameter defines the size of the destination data buffer. Data is truncated to this size if the destination
data buffer is too small.
On success: Returns the size (in bytes) of the parsed data result.
On failure: Returns 0. (Same as USB_PARSE_ERROR).
May be called from user, kernel or interrupt context.
  /*
  * Parse raw descriptor data in buf, putting result into ret_descr.
  * ret_buf_len holds the size of ret_descr buf; routine returns
  * number of resulting bytes.
  *
  * Descriptor being parsed has 2 chars, followed by one short,
  * 3 chars and one more short.
  */
  size_t size_of_returned_descr;
  xxx_descr_t ret_descr;
  size_of_returned_descr = usb_parse_data("ccscccs",
  buf, sizeof(buf), (void *)ret_descr, (sizeof)xxx_descr_t));
  if (size_of_returned_descr < (sizeof (xxx_descr_t))) {
  /* Data truncated. */
  }
  or:
<beginning of page>
  size_of_returned_descr = usb_parse_data("2cs3cs",
  buf, sizeof(buf), (void *)ret_descr, (sizeof)xxx_descr_t));
  if (size_of_returned_descr < (sizeof (xxx_descr_t))) {
  /* Data truncated. */
  }
See attributes(5) for descriptions of the following attributes:
tab() box; cw(2.75i) |cw(2.75i) lw(2.75i) |lw(2.75i) ATTRIBUTE TYPEATTRIBUTE VALUE _ ArchitecturePCI-
based systems _ Interface stabilityCommitted _ AvailabilitySUNWusb
attributes(5), usb_get_dev_data(9F), usb_get_string_descr(9F), usb_get_cfg(9F)
