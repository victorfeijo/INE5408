<beginning of page>
exp, expf, expl <-> exponential function
c99 [ flag... ] file... -lm [ library... ]
#include <math.h>
double exp(double x);
float expf(float x);
long double expl(long double x);
These functions compute the base-e exponential of x.
Upon successful completion, these functions return the exponential value of x.
If the correct value would cause overflow, a range error occurs and exp(), expf(), and expl() return HUGE_VAL,
HUGE_VALF, and HUGE_VALL, respectively.
If x is NaN, a NaN is returned.
If x is <+->0, 1 is returned.
If x is +Inf, x is returned.
For exceptional cases, matherr(3M) tabulates the values to be returned by exp() as specified by SVID3 and XPG3.
See standards(5).
These functions will fail if:
Range Error The result overflows.
If the integer expression (math_errhandling & MATH_ERREXCEPT) is non-zero, the overflow floating-point ex<hy>
ception is raised.
The exp() function sets errno to ERANGE if the result overflows.
An application wanting to check for exceptions should call feclearexcept(FE_ALL_EXCEPT) before calling these
functions. On return, if fetestexcept(FE_INVALID | FE_DIVBYZERO | FE_OVERFLOW | FE_UNDER<hy>
FLOW) is non-zero, an exception has been raised. An application should either examine the return value or check
the floating point exception flags to detect exceptions.
An application can also set errno to 0 before calling exp(). On return, if errno is non-zero, an error has occurred.
The expf() and expl() functions do not set errno.
See attributes(5) for descriptions of the following attributes:
tab() box; cw(2.75i) |cw(2.75i) lw(2.75i) |lw(2.75i) ATTRIBUTE TYPEATTRIBUTE VALUE _ Interface Stability<hy>
Standard _ MT-LevelMT-Safe
feclearexcept(3M), fetestexcept(3M), isnan(3M), log(3M), math.h(3HEAD), matherr(3M), mp(3MP), at<hy>
tributes(5), standards(5)
