<beginning of page>
dat_evd_modify_cno <-> change the associated CNO for the Event Dispatcher
cc [ flag... ] file... -ldat [ library... ]
#include <dat/udat.h>
DAT_RETURN
 dat_evd_modify_cno (
 IN DAT_EVD_HANDLE evd_handle,
 IN DAT_CNO_HANDLE cno_handle
 )
evd_handle Handle for an instance of the Event Dispatcher.
cno_handle Handle for a CNO. The value of DAT_NULL_HANDLE specifies no CNO.
The dat_evd_modify_cno() function changes the associated CNO for the Event Dispatcher.
A Consumer can specify the value of DAT_HANDLE_NULL for cno_handle to associate not CNO with the Event
Dispatcher instance.
Upon completion of the dat_evd_modify_cno() operation, the passed IN new CNO is used for notification. During
the operation, an event arrival can be delivered to the old or new CNO. If Notification is generated by EVD, it is de<hy>
livered to the new or old CNO.
If the EVD is enabled at the time dat_evd_modify_cno() is called, the Consumer must be prepared to collect a noti<hy>
fication event on the EVD's old CNO as well as the new one. Checking immediately prior to calling dat_evd_modi<hy>
fy_cno() is not adequate. A notification could have been generated after the prior check and before the completion of
the change.
The Consumer can avoid the risk of missed notifications either by temporarily disabling the EVD, or by checking
the prior CNO after invoking this operation. The Consumer can disable EVD before a dat_evd_modify_cno() call
and enable it afterwards. This ensures that any notifications from the EVD are delivered to the new CNO only.
If this function is used to disassociate a CNO from the EVD, events arriving on this EVD might cause waiters on
that CNO to awaken after returning from this routine because of unblocking a CNO waiter already "in progress" at
the time this routine is called. If this is the case, the events causing that unblocking are present on the EVD upon re<hy>
turn from the dat_evd_modify_cno() call and can be dequeued at that time
DAT_SUCCESS The operation was successful.
DAT_INVALID_HANDLE Invalid DAT handle.
See attributes(5) for descriptions of the following attributes:
tab() box; cw(2.75i) |cw(2.75i) lw(2.75i) |lw(2.75i) ATTRIBUTE TYPEATTRIBUTE VALUE _ Interface Stability<hy>
Standard: uDAPL, 1.1, 1.2 _ MT-LevelUnsafe
libdat(3LIB), attributes(5)
