<beginning of page>
eqn, neqn, checkeq <-> typeset mathematics test
eqn [-d xy] [ -f n] [-p n] [ -s n] [file]...
neqn [file]...
checkeq [file]...
eqn and neqn are language processors to assist in describing equations. eqn is a preprocessor for troff(1) and is in<hy>
tended for devices that can print troff's output. neqn is a preprocessor for nroff(1) and is intended for use with ter<hy>
minals. Usage is almost always:
 example% eqn file ... | troff
 example% neqn file ... | nroff
If no files are specified, eqn and neqn read from the standard input. A line beginning with .EQ marks the start of an
equation. The end of an equation is marked by a line beginning with .EN. Neither of these lines is altered, so they
may be defined in macro packages to get centering, numbering, and so on. It is also possible to set two characters as
``delimiters''; subsequent text between delimiters is also treated as eqn input.
checkeq reports missing or unbalanced delimiters and .EQ/.EN pairs.
The following options are supported:
-dxy Sets equation delimiters set to characters x and y with the command-line argument. The more common way to
do this is with delim xy between .EQ and .EN. The left and right delimiters may be identical. Delimiters are turned
off by delim off appearing in the text. All text that is neither between delimiters nor between .EQ and .EN is passed
through untouched.
-fn Changes font to n globally in the document. The font can also be changed globally in the body of the document
by using the gfont n directive, where n is the font specification.
-pn Reduces subscripts and superscripts by n point sizes from the previous size. In the absence of the -p option,
subscripts and superscripts are reduced by 3 point sizes from the previous size.
-sn Changes point size to n globally in the document. The point size can also be changed globally in the body of the
document by using the gsize n directive, where n is the point size.
The following operands are supported:
file The nroff or troff file processed by eqn or neqn.
The nroff version of this description depicts the output of neqn to the terminal screen exactly as neqn is able to
display it. To see an accurate depiction of the output, view the printed version of this page.
Tokens within eqn are separated by braces, double quotes, tildes, circumflexes, SPACE, TAB, or NEWLINE charac<hy>
ters. Braces {} are used for grouping. Generally speaking, anywhere a single character like x could appear, a com<hy>
plicated construction enclosed in braces may be used instead. A tilde (~) represents a full SPACE in the output; a cir<hy>
cumflex (^) half as much.
Subscripts and superscripts:
These are produced with the keywords sub and sup.
x sub i makes delim $$ $x sub i$
<beginning of page>
a sub i sup 2 produces delim $$ $a sub i sup 2$
e sup {x sup 2 + y sup 2} gives e^(x^2+y^2)
Fractions:
Fractions are made with over.
a over b yields delim $$ $a over b$
Square Roots:
These are made with sqrt
1 over sqrt {ax sup 2 +bx+c}
results in delim $$ $1 over sqrt {ax sup 2 +bx+c}$
Limits:
The keywords from and to introduce lower and upper limits on arbitrary things:
lim from {n<->> inf } sum from 0 to n x sub i
 makes delim $$ $lim from {n<->> inf } sum from 0 to n x sub i$
Brackets and Braces:
Left and right brackets, braces, and the like, of the right height are made with left and right.
left [ x sup 2 + y sup 2 over alpha right ] ~=~1
produces delim $$ $left [ x sup 2 + y sup 2 over alpha right ] ~=~1$
The right clause is optional. Legal characters after left and right are braces, brackets, bars, c and f for ceiling and
floor, and "" for nothing at all (useful for a right-side-only bracket).
Vertical piles:
Vertical piles of things are made with pile, lpile, cpile, and rpile.
pile {a above b above c}
 produces delim $$ $pile {a above b above c}$
There can be an arbitrary number of elements in a pile. lpile left-justifies, pile and cpile center, with different verti<hy>
cal spacing, and rpile right justifies.
Matrices:
Matrices are made with matrix.
<beginning of page>
matrix { lcol { x sub i above y sub 2 } ccol { 1 above 2 } }
produces delim $$ $matrix { lcol { x sub i above y sub 2 } ccol { 1 above 2 } }$
In addition, there is rcol for a right-justified column.
Diacritical marks:
Diacritical marks are made with dot, dotdot, hat, tilde, bar, vec, dyad, and under.
x dot = f(t) bar
 is delim $$ $x dot = f(t) bar$
y dotdot bar ~=~ n under
 is delim $$ $y dotdot bar ~=~ n under$
x vec ~=~ y dyad is delim $$ $x vec ~=~ y dyad$
Sizes and Fonts:
Sizes and font can be changed with size n or size <+->n, roman, italic, bold, and font n. Size and fonts can be changed
globally in a document by gsize n and gfont n, or by the command-line arguments -sn and -fn.
Successive display arguments:
Successive display arguments can be lined up. Place mark before the desired lineup point in the first equation;
place lineup at the place that is to line up vertically in subsequent equations.
Shorthands:
Shorthands may be defined or existing keywords redefined with define:
define thing % replacement %
Defines a new token called thing which will be replaced by replacement whenever it appears thereafter. The % may
be any character that does not occur in replacement.
Keywords and Shorthands:
Keywords like sum int inf and shorthands like >= <->> and != are recognized.
Greek letters:
Greek letters are spelled out in the desired case, as in alpha or GAMMA.
Mathematical words:
Mathematical words like sin, cos, and log are made Roman automatically.
troff(1) four-character escapes like <bu> (<bu>) can be used anywhere. Strings enclosed in double quotes "..." are passed
through untouched; this permits keywords to be entered as text, and can be used to communicate with troff when all
else fails.
<beginning of page>
See attributes(5) for descriptions of the following attributes:
tab() box; cw(2.75i) |cw(2.75i) lw(2.75i) |lw(2.75i) ATTRIBUTE TYPEATTRIBUTE VALUE _ AvailabilitySUN<hy>
Wdoc
nroff(1), tbl(1), troff(1), attributes(5), ms(5)
To embolden characters such as digits and parentheses, it is necessary to quote them, as in `bold "12.3"'.
