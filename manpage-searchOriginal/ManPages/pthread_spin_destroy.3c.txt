<beginning of page>
pthread_spin_destroy, pthread_spin_init <-> destroy or initialize a spin lock object
cc -mt [ flag... ] file... [ library... ]
#include <pthread.h>
int pthread_spin_destroy(pthread_spinlock_t *lock);
int pthread_spin_init(pthread_spinlock_t *lock, int pshared);
The pthread_spin_destroy() function destroys the spin lock referenced by lock and release any resources used by
the lock. The effect of subsequent use of the lock is undefined until the lock is reinitialized by another call to
pthread_spin_init(). The results are undefined if pthread_spin_destroy() is called when a thread holds the lock, or
if this function is called with an uninitialized thread spin lock.
The pthread_spin_init() function allocates any resources required to use the spin lock referenced by lock and ini<hy>
tialize the lock to an unlocked state.
If the Thread Process-Shared Synchronization option is supported and the value of pshared is
PTHREAD_PROCESS_SHARED, the spin lock can be operated upon by any thread that has access to the memo<hy>
ry where the spin lock is allocated, even if it is allocated in memory that is shared by multiple processes.
If the Thread Process-Shared Synchronization option is supported and the value of pshared is
PTHREAD_PROCESS_PRIVATE, or if the option is not supported, the spin lock can only be operated upon by
threads created within the same process as the thread that initialized the spin lock. If threads of differing processes
attempt to operate on such a spin lock, the behavior is undefined.
The results are undefined if pthread_spin_init() is called specifying an already initialized spin lock. The results are
undefined if a spin lock is used without first being initialized.
If the pthread_spin_init() function fails, the lock is not initialized and the contents of lock are undefined.
Only the object referenced by lock can be used for performing synchronization.
The result of referring to copies of that object in calls to pthread_spin_destroy(), pthread_spin_lock(3C),
pthread_spin_trylock(3C), or pthread_spin_unlock(3C) is undefined.
Upon successful completion, these functions returns 0. Otherwise, an error number is returned to indicate the error.
The pthread_spin_init() function will fail if:
EAGAIN The system lacks the necessary resources to initialize another spin lock.
These functions may fail if:
EBUSY The system has detected an attempt to initialize or destroy a spin lock while it is in use (for example, while
being used in a pthread_spin_lock() call) by another thread.
EINVAL The value specified by lock is invalid.
See attributes(5) for descriptions of the following attributes:
tab() box; cw(2.75i) |cw(2.75i) lw(2.75i) |lw(2.75i) ATTRIBUTE TYPEATTRIBUTE VALUE _ Interface Stability<hy>
Standard _ MT-LevelMT-Safe
pthread_spin_lock(3C), pthread_spin_unlock(3C), attributes(5), standards(5)
