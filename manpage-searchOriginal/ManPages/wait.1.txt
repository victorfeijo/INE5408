<beginning of page>
wait <-> await process completion
wait [pid]...
wait [pid]...
wait [% jobid...]
wait
wait [job...]
The shell itself executes wait, without creating a new process. If you get the error message cannot fork,too many
processes, try using the wait command to clean up your background processes. If this doesn't help, the system
process table is probably full or you have too many active foreground processes. There is a limit to the number of
process IDs associated with your login, and to the number the system can keep track of.
Not all the processes of a pipeline with three or more stages are children of the shell, and thus cannot be waited for.
Wait for your background process whose process ID is pid and report its termination status. If pid is omitted, all
your shell's currently active background processes are waited for and the return code is 0. The wait utility accepts a
job identifier, when Job Control is enabled (jsh), and the argument, jobid, is preceded by a percent sign (%).
If pid is not an active process ID, the wait utility returns immediately and the return code is 0.
Wait for your background processes.
When an asynchronous list is started by the shell, the process ID of the last command in each element of the asyn<hy>
chronous list becomes known in the current shell execution environment.
If the wait utility is invoked with no operands, it waits until all process IDs known to the invoking shell have termi<hy>
nated and exit with an exit status of 0.
If one or more pid or jobid operands are specified that represent known process IDs (or jobids), the wait utility waits
until all of them have terminated. If one or more pid or jobid operands are specified that represent unknown process
IDs (or jobids), wait treats them as if they were known process IDs (or jobids) that exited with exit status 127. The
exit status returned by the wait utility is the exit status of the process requested by the last pid or jobid operand.
The known process IDs are applicable only for invocations of wait in the current shell execution environment.
wait with no operands, waits until all jobs known to the invoking shell have terminated. If one or more job operands
are specified, wait waits until all of them have completed. Each job can be specified as one of the following:
number number refers to a process ID.
-number number refers to a process group ID.
%number number refers to a job number
%string Refers to a job whose name begins with string
%?string Refers to a job whose name contains string
%+
%% Refers to the current job
%- Refers to the previous job
<beginning of page>
If one ore more job operands is a process id or process group id not known by the current shell environment, wait
treats each of them as if it were a process that exited with status 127.
The following operands are supported:
pid The unsigned decimal integer process ID of a command, for which the utility is to wait for the termination.
jobid A job control job ID that identifies a background process group to be waited for. The job control job ID nota<hy>
tion is applicable only for invocations of wait in the current shell execution environment, and only on systems sup<hy>
porting the job control option.
On most implementations, wait is a shell built-in. If it is called in a subshell or separate utility execution environ<hy>
ment, such as one of the following,
 (wait)
 nohup wait ...
 find . -exec wait ... \;
it returns immediately because there is no known process IDs to wait for in those environments. Example 1 Using
A Script To Identify The Termination Signal
Although the exact value used when a process is terminated by a signal is unspecified, if it is known that a signal ter<hy>
minated a process, a script can still reliably figure out which signal is using kill, as shown by the following (/bin/ksh
and /usr/xpg4/bin/sh):
 sleep 1000&
 pid=$!
 kill -kill $pid
 wait $pid
 echo $pid was terminated by a SIG$(kill -l $(($?<mi>128))) signal.
Example 2 Returning The Exit Status Of A Process
If the following sequence of commands is run in less than 31 seconds (/bin/ksh and /usr/xpg4/bin/sh):
 sleep 257 | sleep 31 &
 jobs -l %%
then either of the following commands returns the exit status of the second sleep in the pipeline:
 wait <pid of sleep 31>
 wait %%
See environ(5) for descriptions of the following environment variables that affect the execution of wait: LANG,
LC_ALL, LC_CTYPE, LC_MESSAGES, and NLSPATH.
The following exit values are returned by the wait built-in in ksh93:
0 wait was invoked with no operands. All processes known by the invoking process have terminated.
127 job is a process id or process group id that is unknown to the current shell environment.
<beginning of page>
See attributes(5) for descriptions of the following attributes:
tab() box; cw(2.75i) |cw(2.75i) lw(2.75i) |lw(2.75i) ATTRIBUTE TYPEATTRIBUTE VALUE _ AvailabilitySUN<hy>
Wcsu _ Interface StabilityCommitted _ StandardSee standards(5).
csh(1), jobs(1), ksh(1), ksh93(1), sh(1), attributes(5), environ(5), standards(5)
