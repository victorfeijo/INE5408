<beginning of page>
mlib_ImageComposite <-> image composition
cc [ flag... ] file... -lmlib [ library... ]
#include <mlib.h>
mlib_status mlib_ImageComposite(mlib_image *dst, const mlib_image *src1,
 const mlib_image *src2, mlib_blend bsrc1, mlib_blend bsrc2,
 mlib_s32 cmask);
The mlib_ImageComposite() function supports digital image composition.
It is a wrapper of the mlib_ImageBlend_BSCR1_BSRC2 group of functions and can perform various types of
composition based on the parameters passed in, whereas each function in that group can perform only the one kind
of composition denoted by its name.
The image type must be MLIB_BYTE. The input and output images must contain three or four channels. For three-
channel images, the alpha value is as if the alpha value is 1.
The following are predefined blend factor types used in mediaLib image composition functions.
 /* image blend factors */
 typedef enum {
  MLIB_BLEND_ZERO,
  MLIB_BLEND_ONE,
  MLIB_BLEND_DST_COLOR,
  MLIB_BLEND_SRC_COLOR,
  MLIB_BLEND_ONE_MINUS_DST_COLOR,
  MLIB_BLEND_ONE_MINUS_SRC_COLOR,
  MLIB_BLEND_DST_ALPHA,
  MLIB_BLEND_SRC_ALPHA,
  MLIB_BLEND_ONE_MINUS_DST_ALPHA,
  MLIB_BLEND_ONE_MINUS_SRC_ALPHA,
  MLIB_BLEND_SRC_ALPHA_SATURATE
 } mlib_blend;
See the following table for the definitions of the blend factors.
tab(); cw(2.97i) cw(1.85i) cw(.67i) lw(2.97i) lw(1.85i) lw(.67i) TypeBlend Factor [*]Abbr. _ MLIB_BLEND_ZE<hy>
RO(0,0,0,0)ZERO MLIB_BLEND_ONE(1,1,1,1)ONE MLIB_BLEND_DST_COLOR(Rd,Gd,Bd,Ad)DC
MLIB_BLEND_SRC_COLOR(Rs,Gs,Bs,As)SC MLIB_BLEND_ONE_MINUS_DST_COL<hy>
OR(1,1,1,1)-(Rd,Gd,Bd,Ad)OMDC MLIB_BLEND_ONE_MINUS_SRC_COLOR(1,1,1,1)-(Rs,Gs,Bs,As)OMSC
MLIB_BLEND_DST_ALPHA(Ad,Ad,Ad,Ad)DA MLIB_BLEND_SRC_ALPHA(As,As,As,As)SA
MLIB_BLEND_ONE_MINUS_DST_ALPHA(1,1,1,1)-(Ad,Ad,Ad,Ad)OMDA MLIB_BLEND_ONE_MI<hy>
NUS_SRC_ALPHA(1,1,1,1)-(As,As,As,As)OMSA MLIB_BLEND_SRC_ALPHA_SATURATE(f,f,f,1)SAS
[*]: The components of the first source image pixel are (Rd,Gd,Bd,Ad), and the components of the second source
pixel are (Rs,Gs,Bs,As). Function f = min(As, 1-Ad).
The blending formula for non-in-place processing is:
 Cd = Cs1*S1 + Cs2*S2
where Cd is the destination pixel (Rd,Gd,Bd,Ad), Cs1 is the first source pixel (Rs1,Gs1,Bs1,As1), Cs2 is the sec<hy>
ond source pixel (Rs2,Gs2,Bs2,As2), and S1 and S2 are the blend factors for the first and second sources, respec<hy>
tively.
The function takes the following arguments:
dst Pointer to destination image.
<beginning of page>
src1 Pointer to the first source image.
src2 Pointer to the second source image.
bsrc1 Blend factor type for the first source image.
bsrc2 Blend factor type for the second source image.
cmask Channel mask to indicate the alpha channel. Each bit of the mask represents a channel in the image. The
channel corresponding to the 1 bit is the alpha channel. cmask must be either 0x01 or 0x08.
The function returns MLIB_SUCCESS if successful. Otherwise it returns MLIB_FAILURE.
See attributes(5) for descriptions of the following attributes:
tab() box; cw(2.75i) |cw(2.75i) lw(2.75i) |lw(2.75i) ATTRIBUTE TYPEATTRIBUTE VALUE _ Interface Stability<hy>
Committed _ MT-LevelMT-Safe
mlib_ImageBlend_BSRC1_BSRC2(3MLIB), mlib_ImageBlend_BSRC1_BSRC2_Inp(3MLIB), mlib_Image<hy>
Composite_Inp(3MLIB), attributes(5)
