<beginning of page>
sleep <-> suspend execution for interval
/usr/ucb/cc [ flag ... ] file ...
int sleep(seconds)
unsigned seconds;
sleep() suspends the current process from execution for the number of seconds specified by the argument. The actu<hy>
al suspension time may be up to 1 second less than that requested, because scheduled wakeups occur at fixed 1-sec<hy>
ond intervals, and may be an arbitrary amount longer because of other activity in the system.
sleep() is implemented by setting an interval timer and pausing until it expires. The previous state of this timer is
saved and restored. If the sleep time exceeds the time to the expiration of the previous value of the timer, the process
sleeps only until the timer would have expired, and the signal which occurs with the expiration of the timer is sent
one second later.
See attributes(5) for descriptions of the following attributes:
tab() box; cw(2.75i) |cw(2.75i) lw(2.75i) |lw(2.75i) ATTRIBUTE TYPEATTRIBUTE VALUE _ MT-LevelAsync-
Signal-Safe
alarm(2), getitimer(2), longjmp(3C), siglongjmp(3C), sleep(3C), usleep(3C), attributes(5)
Use of these interfaces should be restricted to only applications written on BSD platforms. Use of these interfaces
with any of the system libraries or in multi-thread applications is unsupported.
SIGALRM should not be blocked or ignored during a call to sleep(). Only a prior call to alarm(2) should generate
SIGALRM for the calling process during a call to sleep(). A signal-catching function should not interrupt a call to
sleep() to call siglongjmp(3C) or longjmp(3C) to restore an environment saved prior to the sleep() call.
sleep() is slightly incompatible with alarm(2). Programs that do not execute for at least one second of clock time be<hy>
tween successive calls to sleep() indefinitely delay the alarm signal. Use sleep(3C). Each sleep(3C) call postpones
the alarm signal that would have been sent during the requested sleep period to occur one second later.
