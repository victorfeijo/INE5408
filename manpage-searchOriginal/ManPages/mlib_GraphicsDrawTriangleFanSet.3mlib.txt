<beginning of page>
mlib_GraphicsDrawTriangleFanSet, mlib_GraphicsDrawTriangleFanSet_8, mlib_GraphicsDrawTriangleFanSet_32,
mlib_GraphicsDrawTriangleFanSet_X_8, mlib_GraphicsDrawTriangleFanSet_X_32, mlib_GraphicsDrawTriangle<hy>
FanSet_A_8, mlib_GraphicsDrawTriangleFanSet_A_32, mlib_GraphicsDrawTriangleFanSet_B_8, mlib_Graphics<hy>
DrawTriangleFanSet_B_32, mlib_GraphicsDrawTriangleFanSet_G_8, mlib_GraphicsDrawTriangleFanSet_G_32,
mlib_GraphicsDrawTriangleFanSet_Z_8, mlib_GraphicsDrawTriangleFanSet_Z_32, mlib_GraphicsDrawTriangle<hy>
FanSet_AB_8, mlib_GraphicsDrawTriangleFanSet_AB_32, mlib_GraphicsDrawTriangleFanSet_ABG_8,
mlib_GraphicsDrawTriangleFanSet_ABG_32, mlib_GraphicsDrawTriangleFanSet_ABGZ_8, mlib_GraphicsDraw<hy>
TriangleFanSet_ABGZ_32, mlib_GraphicsDrawTriangleFanSet_ABZ_8, mlib_GraphicsDrawTriangle<hy>
FanSet_ABZ_32, mlib_GraphicsDrawTriangleFanSet_AG_8, mlib_GraphicsDrawTriangleFanSet_AG_32,
mlib_GraphicsDrawTriangleFanSet_AGZ_8, mlib_GraphicsDrawTriangleFanSet_AGZ_32, mlib_GraphicsDrawTri<hy>
angleFanSet_AZ_8, mlib_GraphicsDrawTriangleFanSet_AZ_32, mlib_GraphicsDrawTriangleFanSet_BG_8,
mlib_GraphicsDrawTriangleFanSet_BG_32, mlib_GraphicsDrawTriangleFanSet_BGZ_8, mlib_GraphicsDrawTri<hy>
angleFanSet_BGZ_32, mlib_GraphicsDrawTriangleFanSet_BZ_8, mlib_GraphicsDrawTriangleFanSet_BZ_32,
mlib_GraphicsDrawTriangleFanSet_GZ_8, mlib_GraphicsDrawTriangleFanSet_GZ_32 <-> draw triangle set where
all members of the set have a common vertex
cc [ flag... ] file... -lmlib [ library... ]
#include <mlib.h>
mlib_status mlib_GraphicsDrawTriangleFanSet_8(mlib_image *buffer,
 const mlib_s16 *x, const mlib_s16 *y, mlib_s32 npoints, mlib_s32 c);
mlib_status mlib_GraphicsDrawTriangleFanSet_32(mlib_image *buffer,
 const mlib_s16 *x, const mlib_s16 *y, mlib_s32 npoints, mlib_s32 c);
mlib_status mlib_GraphicsDrawTriangleFanSet_X_8(mlib_image *buffer,
 const mlib_s16 *x, const mlib_s16 *y, mlib_s32 npoints, mlib_s32 c,
 mlib_s32 c2);
mlib_status mlib_GraphicsDrawTriangleFanSet_X_32(mlib_image *buffer,
 const mlib_s16 *x, const mlib_s16 *y, mlib_s32 npoints, mlib_s32 c,
 mlib_s32 c2);
mlib_status mlib_GraphicsDrawTriangleFanSet_A_8(mlib_image *buffer,
 const mlib_s16 *x, const mlib_s16 *y, mlib_s32 npoints, mlib_s32 c);
mlib_status mlib_GraphicsDrawTriangleFanSet_A_32(mlib_image *buffer,
 const mlib_s16 *x, const mlib_s16 *y, mlib_s32 npoints, mlib_s32 c);
mlib_status mlib_GraphicsDrawTriangleFanSet_B_8(mlib_image *buffer,
 const mlib_s16 *x, const mlib_s16 *y, mlib_s32 npoints, mlib_s32 c,
 mlib_s32 a);
mlib_status mlib_GraphicsDrawTriangleFanSet_B_32(mlib_image *buffer,
 const mlib_s16 *x, const mlib_s16 *y, mlib_s32 npoints, mlib_s32 c,
 mlib_s32 a);
mlib_status mlib_GraphicsDrawTriangleFanSet_G_8(mlib_image *buffer,
 const mlib_s16 *x, const mlib_s16 *y, mlib_s32 npoints,
 const mlib_s32 *c);
mlib_status mlib_GraphicsDrawTriangleFanSet_G_32(mlib_image *buffer,
 const mlib_s16 *x, const mlib_s16 *y, mlib_s32 npoints,
 const mlib_s32 *c);
mlib_status mlib_GraphicsDrawTriangleFanSet_Z_8(mlib_image *buffer,
 mlib_image *zbuffer, const mlib_s16 *x, const mlib_s16 *y,
 const mlib_s16 *z, mlib_s32 npoints, mlib_s32 c);
mlib_status mlib_GraphicsDrawTriangleFanSet_Z_32(mlib_image *buffer,
 mlib_image *zbuffer, const mlib_s16 *x, const mlib_s16 *y,
 const mlib_s16 *z, mlib_s32 npoints, mlib_s32 c);
mlib_status mlib_GraphicsDrawTriangleFanSet_AB_8(mlib_image *buffer,
 const mlib_s16 *x, const mlib_s16 *y, mlib_s32 npoints, mlib_s32 c,
 mlib_s32 a);
<beginning of page>
mlib_status mlib_GraphicsDrawTriangleFanSet_AB_32(mlib_image *buffer,
 const mlib_s16 *x, const mlib_s16 *y, mlib_s32 npoints, mlib_s32 c,
 mlib_s32 a);
mlib_status mlib_GraphicsDrawTriangleFanSet_ABG_8(mlib_image *buffer,
 const mlib_s16 *x, const mlib_s16 *y, mlib_s32 npoints,
 const mlib_s32 *c, mlib_s32 a);
mlib_status mlib_GraphicsDrawTriangleFanSet_ABG_32(mlib_image *buffer,
 const mlib_s16 *x, const mlib_s16 *y,
 mlib_s32 npoints,
 const mlib_s32 *c, mlib_s32 a);
mlib_status mlib_GraphicsDrawTriangleFanSet_ABGZ_8(mlib_image *buffer,
 mlib_image *zbuffer, const mlib_s16 *x, const mlib_s16 *y,
 const mlib_s16 *z,
 mlib_s32 npoints, const mlib_s32 *c, mlib_s32 a);
mlib_status mlib_GraphicsDrawTriangleFanSet_ABGZ_32(mlib_image *buffer,
 mlib_image *zbuffer, const mlib_s16 *x, const mlib_s16 *y,
 const mlib_s16 *z, mlib_s32 npoints, const mlib_s32 *c, mlib_s32 a);
mlib_status mlib_GraphicsDrawTriangleFanSet_ABZ_8(mlib_image *buffer,
 mlib_image *zbuffer, const mlib_s16 *x, const mlib_s16 *y,
 const mlib_s16 *z, mlib_s32 npoints, mlib_s32 c, mlib_s32 a);
mlib_status mlib_GraphicsDrawTriangleFanSet_ABZ_32(mlib_image *buffer,
 mlib_image *zbuffer, const mlib_s16 *x, const mlib_s16 *y,
 const mlib_s16 *z,
 mlib_s32 npoints, mlib_s32 c, mlib_s32 a);
mlib_status mlib_GraphicsDrawTriangleFanSet_AG_8(mlib_image *buffer,
 const mlib_s16 *x, const mlib_s16 *y, mlib_s32 npoints,
 const mlib_s32 *c);
mlib_status mlib_GraphicsDrawTriangleFanSet_AG_32(mlib_image *buffer,
 const mlib_s16 *x, const mlib_s16 *y, mlib_s32 npoints,
 const mlib_s32 *c);
mlib_status mlib_GraphicsDrawTriangleFanSet_AGZ_8(mlib_image *buffer,
 mlib_image *zbuffer, const mlib_s16 *x, const mlib_s16 *y,
 const mlib_s16 *z, mlib_s32 npoints, const mlib_s32 *c);
mlib_status mlib_GraphicsDrawTriangleFanSet_AGZ_32(mlib_image *buffer,
 mlib_image *zbuffer, const mlib_s16 *x, const mlib_s16 *y,
 const mlib_s16 *z, mlib_s32 npoints,
 const mlib_s32 *c);
mlib_status mlib_GraphicsDrawTriangleFanSet_AZ_8(mlib_image *buffer,
 mlib_image *zbuffer, const mlib_s16 *x, const mlib_s16 *y,
 const mlib_s16 *z, mlib_s32 npoints, mlib_s32 c);
mlib_status mlib_GraphicsDrawTriangleFanSet_AZ_32(mlib_image *buffer,
 mlib_image *zbuffer, const mlib_s16 *x, const mlib_s16 *y,
 const mlib_s16 *z, mlib_s32 npoints, mlib_s32 c);
mlib_status mlib_GraphicsDrawTriangleFanSet_BG_8(mlib_image *buffer,
 const mlib_s16 *x, const mlib_s16 *y, mlib_s32 npoints,
 const mlib_s32 *c, mlib_s32 a);
mlib_status mlib_GraphicsDrawTriangleFanSet_BG_32(mlib_image *buffer,
 const mlib_s16 *x, const mlib_s16 *y, mlib_s32 npoints,
 const mlib_s32 *c, mlib_s32 a);
mlib_status mlib_GraphicsDrawTriangleFanSet_BGZ_8(mlib_image *buffer,
 mlib_image *zbuffer, const mlib_s16 *x, const mlib_s16 *y,
<beginning of page>
 const mlib_s16 *z, mlib_s32 npoints, const mlib_s32 *c, mlib_s32 a);
mlib_status mlib_GraphicsDrawTriangleFanSet_BGZ_32(mlib_image *buffer,
 mlib_image *zbuffer, const mlib_s16 *x, const mlib_s16 *y,
 const mlib_s16 *z, mlib_s32 npoints, const mlib_s32 *c, mlib_s32 a);
mlib_status mlib_GraphicsDrawTriangleFanSet_BZ_8(mlib_image *buffer,
 mlib_image *zbuffer, const mlib_s16 *x, const mlib_s16 *y,
 const mlib_s16 *z, mlib_s32 npoints, mlib_s32 c, mlib_s32 a);
mlib_status mlib_GraphicsDrawTriangleFanSet_BZ_32(mlib_image *buffer,
 mlib_image *zbuffer, const mlib_s16 *x, const mlib_s16 *y,
 const mlib_s16 *z, mlib_s32 npoints, mlib_s32 c, mlib_s32 a);
mlib_status mlib_GraphicsDrawTriangleFanSet_GZ_8(mlib_image *buffer,
 mlib_image *zbuffer, const mlib_s16 *x, const mlib_s16 *y,
 const mlib_s16 *z, mlib_s32 npoints, const mlib_s32 *c);
mlib_status mlib_GraphicsDrawTriangleFanSet_GZ_32(mlib_image *buffer,
 mlib_image *zbuffer, const mlib_s16 *x, const mlib_s16 *y,
 const mlib_s16 *z, mlib_s32 npoints, const mlib_s32 *c);
Each of the mlib_GraphicsDrawTriangleFanSet_*() functions draws a set of triangles with vertices at {(x1,y1),
(x2,y2), (x3,y3)}, {(x1,y1), (x3,y3), (x4,y4)}, ..., and {(x1,y1), (xn-1,yn-1), (xn,yn)}.
Each of the mlib_GraphicsDrawTriangleFanSet_X_*() functions draws a set of triangles in Xor mode as follows:
  data[x,y] ^= c ^ c2
Each of the mlib_GraphicsDrawTriangleFanSet_A_*() functions draws a set of triangles with antialiasing.
Each of the mlib_GraphicsDrawTriangleFanSet_B_*() functions draws a set of triangles with alpha blending as
follows:
  data[x,y] = (data[x,y] * (255 - a) + c * a) / 255
Each of the mlib_GraphicsDrawTriangleFanSet_G_*() functions draws a set of triangles with Gouraud shading.
Each of the mlib_GraphicsDrawTriangleFanSet_Z_*() functions draws a set of triangles with Z buffering.
Each of the other functions draws a set of triangles with a combination of two or more features like antialiasing (A),
alpha blending (B), Gouraud shading (G), and Z buffering (Z).
Each of the functions takes some of the following arguments:
buffer Pointer to the image into which the function is drawing.
zbuffer Pointer to the image that holds the Z buffer.
x Pointer to array of X coordinates of the points.
y Pointer to array of Y coordinates of the points.
z Pointer to array of Z coordinates of the points.
npoints Number of points in the arrays.
<beginning of page>
c Color used in the drawing, or pointer to array of colors of the points in the case of Gouraud shading.
c2 Alternation color.
a Alpha value for blending. 0 <<=> a <<=> 255.
Each of the functions returns MLIB_SUCCESS if successful. Otherwise it returns MLIB_FAILURE.
See attributes(5) for descriptions of the following attributes:
tab() box; cw(2.75i) |cw(2.75i) lw(2.75i) |lw(2.75i) ATTRIBUTE TYPEATTRIBUTE VALUE _ Interface Stability<hy>
Committed _ MT-LevelMT-Safe
mlib_GraphicsDrawTriangle(3MLIB), mlib_GraphicsDrawTriangleSet(3MLIB), mlib_GraphicsDrawTrian<hy>
gleStripSet(3MLIB), attributes(5)
