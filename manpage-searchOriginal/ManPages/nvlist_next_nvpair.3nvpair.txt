<beginning of page>
nvlist_next_nvpair, nvpair_name, nvpair_type <-> return data regarding name-value pairs
cc [ flag... ] file... -lnvpair [ library... ]
#include <libnvpair.h>
nvpair_t *nvlist_next_nvpair(nvlist_t *nvl, nvpair_t *nvpair);
char *nvpair_name(nvpair_t *nvpair);
data_type_t nvpair_type(nvpair_t *nvpair);
nvl The nvlist_t to be processed.
nvpair Handle to a name-value pair.
The nvlist_next_nvpair() function returns a handle to the next nvpair in the list following nvpair. If nvpair is
NULL, the first pair is returned. If nvpair is the last pair in the nvlist, NULL is returned.
The nvpair_name() function returns a string containing the name of nvpair.
The nvpair_type() function retrieves the value of the nvpair in the form of enumerated type data_type_t. This is
used to determine the appropriate nvpair_*() function to call for retrieving the value.
Upon successful completion, nvpair_name() returns a string containing the name of the name-value pair.
Upon successful completion, nvpair_type() returns an enumerated data type data_type_t. Possible values for da<hy>
ta_type_t are as follows: <bu> DATA_TYPE_BOOLEAN <bu> DATA_TYPE_BOOLEAN_VALUE <bu> DA<hy>
TA_TYPE_BYTE <bu> DATA_TYPE_INT8 <bu> DATA_TYPE_UINT8 <bu> DATA_TYPE_INT16 <bu> DA<hy>
TA_TYPE_UINT16 <bu> DATA_TYPE_INT32 <bu> DATA_TYPE_UINT32 <bu> DATA_TYPE_INT64 <bu> DA<hy>
TA_TYPE_UINT64 <bu> DATA_TYPE_STRING <bu> DATA_TYPE_NVLIST <bu> DATA_TYPE_BOOLEAN_ARRAY
<bu> DATA_TYPE_BYTE_ARRAY <bu> DATA_TYPE_INT8_ARRAY <bu> DATA_TYPE_UINT8_ARRAY <bu> DA<hy>
TA_TYPE_INT16_ARRAY <bu> DATA_TYPE_UINT16_ARRAY <bu> DATA_TYPE_INT32_ARRAY <bu> DA<hy>
TA_TYPE_UINT32_ARRAY <bu> DATA_TYPE_INT64_ARRAY <bu> DATA_TYPE_UINT64_ARRAY <bu> DA<hy>
TA_TYPE_STRING_ARRAY <bu> DATA_TYPE_NVLIST_ARRAY
Upon reaching the end of a list, nvlist_next_pair() returns NULL. Otherwise, the function returns a handle to next
nvpair in the list.
These and other libnvpair(3LIB) functions cannot manipulate nvpairs after they have been removed from or re<hy>
placed in an nvlist. Replacement can occur during pair additions to nvlists created with
NV_UNIQUE_NAME_TYPE and NV_UNIQUE_NAME. See nvlist_alloc(3NVPAIR).
No errors are defined. Example 1 Example of usage of nvlist_next_nvpair().
 /*
  * usage of nvlist_next_nvpair()
  */
  static int
  edit_nvl(nvlist_t *nvl)
  {
  nvpair_t *curr = nvlist_next_nvpair(nvl, NULL);
  while (curr != NULL) {
  int err;
  nvpair_t *next = nvlist_next_nvpair(nvl, curr);
  if (!nvl_check(curr))
  if ((err = nvlist_remove(nvl, nvpair_name(curr),
  nvpair_type(curr))) != 0)
  return (err);
  curr = next;
  }
  return (0);
<beginning of page>
  }
See attributes(5) for descriptions of the following attributes:
tab() box; cw(2.69i) |cw(2.81i) lw(2.69i) |lw(2.81i) ATTRIBUTE TYPEATTRIBUTE VALUE _ Interface Stabili<hy>
tyEvolving _ MT-LevelMT-Safe
libnvpair(3LIB), nvlist_alloc(3NVPAIR), attributes(5)
The enumerated nvpair data types might not be an exhaustive list and new data types can be added. An application
using the data type enumeration, data_type_t, should be written to expect or ignore new data types.
