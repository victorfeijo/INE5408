<beginning of page>
msgids <-> discover all message queue identifiers
#include <sys/msg.h>
int msgids(int *buf, uint_t nids, uint_t *pnids);
The msgids() function copies all active message queue identifiers from the system into the user-defined buffer speci<hy>
fied by buf, provided that the number of such identifiers is not greater than the number of integers the buffer can con<hy>
tain, as specified by nids. If the size of the buffer is insufficient to contain all of the active message queue identifiers
in the system, none are copied.
Whether or not the size of the buffer is sufficient to contain all of them, the number of active message queue identi<hy>
fiers in the system is copied into the unsigned integer pointed to by pnids.
If nids is 0 or less than the number of active message queue identifiers in the system, buf is ignored.
Upon successful completion, msgids() returns 0. Otherwise, <mi>1 is returned and errno is set to indicate the error.
The msgids() function will fail if:
EFAULT The buf or pnids argument points to an illegal address.
The msgids() function returns a snapshot of all the active message queue identifiers in the system. More may be
added and some may be removed before they can be used by the caller. Example 1 msgids() example
This is sample C code indicating how to use the msgids() function (see msgsnap(2)):
 void
 examine_queues()
 {
  int *ids = NULL;
  uint_t nids = 0;
  uint_t n;
  int i;
  for (;;) {
  if (msgids(ids, nids, &n) != 0) {
  perror("msgids");
  exit(1);
  }
  if (n <= nids) /* we got them all */
  break;
  /* we need a bigger buffer */
  ids = realloc(ids, (nids = n) * sizeof (int));
  }
  for (i = 0; i < n; i++)
  process_msgid(ids[i]);
  free(ids);
 }
See attributes(5) for descriptions of the following attributes:
tab() box; cw(2.75i) |cw(2.75i) lw(2.75i) |lw(2.75i) ATTRIBUTE TYPEATTRIBUTE VALUE _ MT-LevelAsync-
Signal-Safe
ipcrm(1), ipcs(1), Intro(2), msgctl(2), msgget(2), msgsnap(2), msgrcv(2), msgsnd(2), attributes(5)
