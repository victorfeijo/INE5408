<beginning of page>
syncinit <-> set serial line interface operating parameters
/usr/sbin/syncinit device
 [ [baud_rate] | [keyword=value,]... | [single-word option]]
The syncinit utility allows the user to modify some of the hardware operating modes common to synchronous serial
lines. This can be useful in troubleshooting a link, or necessary to the operation of a communications package.
If run without options, syncinit reports the options as presently set on the port. If options are specified, the new set<hy>
tings are reported after they have been made.
Options to syncinit normally take the form of a keyword, followed by an equal sign and a value. The exception is
that a baud rate may be specified as a decimal integer by itself. Keywords must begin with the value shown in the
options table, but may contain additional letters up to the equal sign. For example, loop= and loopback= are equiv<hy>
alent.
The following options are supported:
tab(); lw(.87i) lw(.87i) lw(3.76i) lw(.87i) lw(.87i) lw(3.76i) KeywordValueEffect loopyesT{ Set the port to operate
in internal loopback mode. The receiver is electrically disconnected from the DCE receive data input and tied to the
outgoing transmit data line. Transmit data is available to the DCE. The Digital Phase-Locked Loop (DPLL) may not
be used as a clock source in this mode. If no other clocking options have been specified, perform the equivalent of
txc=baud and rxc=baud. T} noT{ Disable internal loopback mode. If no other clocking options have been speci<hy>
fied, perform the equivalent of txc=txc and rxc=rxc. T} echoyesT{ Set the port to operate in auto-echo mode. The
transmit data output is electrically disconnected from the transmitter and tied to the receive data input. Incoming re<hy>
ceive data is still visible. Use of this mode in combination with local loopback mode has no value, and should be re<hy>
jected by the device driver. The auto-echo mode is useful to make a system become the endpoint of a remote loop<hy>
back test. T} noDisable auto-echo mode. nrziyesT{ Set the port to operate with NRZI data encoding. T} noT{
Set the port to operate with NRZ data encoding. T} txctxcT{ Transmit clock source will be the TxC signal (pin
15). T} rxcT{ Transmit clock source will be the RxC signal (pin 17). T} baud T{ Transmit clock source will be
the internal baud rate generator. T} pllT{ Transmit clock source will be the output of the DPLL circuit. T} rx<hy>
crxcT{ Receive clock source will be the RxC signal (pin 17). T} txcT{ Receive clock source will be the TxC signal
(pin 15). T} baudT{ Receive clock source will be the internal baud rate generator. T} pllT{ Receive clock
source will be the output of the DPLL circuit. T} speedintegerT{ Set the baud rate to integer bits per second. T}
There are also several single-word options that set one or more paramaters at a time:
tab(); lw(2.75i) lw(2.75i) lw(2.75i) lw(2.75i) KeywordEquivalent to Options: externaltxc=txc rxc=rxc loop=no
sendertxc=baud rxc=rxc loop=no internaltxc=pll rxc=pll loop=no stopspeed=0
Example 1 Using syncinit
The following command sets the first CPU port to loop internally, using internal clocking and operating at 38400
baud:
 example# syncinit zsh0 38400 loop=yes
 device: /dev/zsh ppa: 0
 speed=38400, loopback=yes, echo=no, nrzi=no, txc=baud, rxc=baud
The following command sets the same port's clocking, local loopback and baud rate settings to their default values:
 example# syncinit zsh0 stop loop=no
 device: /dev/zsh ppa: 0
 speed=0, loopback=no, echo=no, nrzi=no, txc=txc, rxc=rxc
<beginning of page>
See attributes(5) for descriptions of the following attributes:
tab() box; cw(2.75i) |cw(2.75i) lw(2.75i) |lw(2.75i) ATTRIBUTE TYPEATTRIBUTE VALUE _ AvailabilitySUN<hy>
Wcsu
syncloop(1M), syncstat(1M), intro(2), ioctl(2), attributes(5), zsh(7D)
device missing minor device number
The name device does not end in a decimal number that can be used as a minor device number.
bad speed: arg
The string arg that accompanied the speed= option could not be interpreted as a decimal integer.
Bad arg: arg
The string arg did not make sense as an option.
ioctl failure code = errno
An ioctl(2) system called failed. The meaning of the value of errno may be found in intro(2).
Do not use syncinit on an active serial link, unless needed to resolve an error condition. Do not use this command
casually or without being aware of the consequences.
