<beginning of page>
curs_util, unctrl, keyname, filter, use_env, putwin, getwin, delay_output, flushinp <-> curses miscellaneous utility rou<hy>
tines
cc [ flag ... ] file ... -lcurses [ library ... ]
#include <curses.h>
char *unctrl(chtype c);
char *keyname(int c);
int filter(void);
void use_env(char bool);
int putwin(WINDOW *win, FILE *filep);
WINDOW *getwin(FILE *filep);
int delay_output(int ms);
int flushinp(void);
The unctrl() macro expands to a character string which is a printable representation of the character c. Control char<hy>
acters are displayed in the ^X notation. Printing characters are displayed as is.
With the keyname() routine, a character string corresponding to the key c is returned.
The filter() routine, if used, is called before initscr() or newterm() are called. It makes curses think that there is a
one-line screen. curses does not use any terminal capabilities that assume that they know on what line of the screen
the cursor is positioned.
The use_env() routine, if used, is called before initscr() or newterm() are called. When called with FALSE as an ar<hy>
gument, the values of lines and columns specified in the terminfo database will be used, even if environment vari<hy>
ables LINES and COLUMNS (used by default) are set, or if curses is running in a window (in which case default
behavior would be to use the window size if LINES and COLUMNS are not set).
With the putwin() routine, all data associated with window win is written into the file to which filep points. This in<hy>
formation can be later retrieved using the getwin() function.
The getwin() routine reads window related data stored in the file by putwin(). The routine then creates and initial<hy>
izes a new window using that data. It returns a pointer to the new window.
The delay_output() routine inserts an ms millisecond pause in output. This routine should not be used extensively
because padding characters are used rather than a CPU pause.
The flushinp() routine throws away any typeahead that has been typed by the user and has not yet been read by the
program.
Except for flushinp(), routines that return an integer return ERR upon failure and an integer value other than ERR
upon successful completion.
flushinp() always returns OK.
Routines that return pointers return NULL on error.
See attributes(5) for descriptions of the following attributes:
tab() box; cw(2.75i) |cw(2.75i) lw(2.75i) |lw(2.75i) ATTRIBUTE TYPEATTRIBUTE VALUE _ MT-LevelUnsafe
curs_initscr(3CURSES), curs_scr_dump(3CURSES), curses(3CURSES), attributes(5)
The header <curses.h> automatically includes the headers <stdio.h> and <unctrl.h>.
<beginning of page>
Note that unctrl() is a macro, which is defined in <unctrl.h>.
