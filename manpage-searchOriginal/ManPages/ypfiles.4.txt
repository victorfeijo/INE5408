<beginning of page>
ypfiles <-> Network Information Service Version 2, formerly knows as YP
The NIS network information service uses a distributed, replicated database of dbm files , in ASCII form, that are
contained in the /var/yp directory hierarchy on each NIS server.
A dbm database served by the NIS server is called a NIS map. A NIS domain is a subdirectory of /var/yp that con<hy>
tains a set of NIS maps on each NIS server.
Standard nicknames are defined in the file /var/yp/nicknames. These names can be used in place of the full map
name in the ypmatch and ypcat commands. Use the command ypwhich -x to display the current set of nicknames.
Use the command ypwhich -m to display all the available maps. Each line of the nickname file contains two fields
separated by white space. The first field is the nickname, and the second field is the name of the map that it expands
to. The nickname cannot contain a ".".
If the /var/yp/NISLDAPmapping configuration file is present, the NIS server operates in NIS to LDAP (N2L)
mode. In this mode, NIS maps are stored in a new set of DBM files, prepended by the LDAP_ prefix, at /var/yp/do<hy>
mainename. These files are used as a cache backed by information from an LDAP server. Additional DBM files are
created in the same directory to hold the cache's TTL values.
N2L mode enables NIS clients to be supported in an LDAP environment.
In N2L mode, the old style DBM files, NIS source files, and the ypmake(1M) utility have to role. They are retained
to enable easy conversion back to the traditional mode, if required.
When NIS is operating in N2L mode, it uses a new set of NIS maps with an LDAP_ prefix, based on the contents of
the LDAP DIT. The NIS source files are unused and become out of date. If you wish to convert back to the tradition<hy>
al NIS mode, the N2L configuration file should be deleted. The system will then return to using the standard map
files. Optionally, the N2L mode map files, /var/yp/*/LDAP_* can also be deleted.
If you want to run the system in traditional mode with information based on the DIT, then the NIS source files must
be regenerated based on the N2L maps. To regenerate the NIS source files based on the N2L maps, run
ypmap2src(1M).
NIS+ also provides a NIS service when it runs in YP-compatibility mode. See NIS+(1) and rpc.nisd(1M). NIS+, in
any mode, cannot be run on the same system as ypserv, whether ypserv is in traditional or N2L mode.
/var/yp
Directory containing NIS configuration files.
/var/yp/binding
Stores the information required to bind the NIS client to the NIS server.
/var/yp/binding/ypdomain/ypservers
Contains the servers to which the NIS client is allowed to bind.
/var/yp/Makefile
Builds the NIS ndbm databases.
/var/yp/nicknames
Nicknames file.
/var/yp/securenets
Defines the hosts and networks that are granted access to information in the served domain. This file is read at start<hy>
up time by ypserv and ypxfrd.
<beginning of page>
/var/yp/ypdomain
Directory containing ndbm databases.
/var/yp/NISLDAPmapping
NIS to LDAP configuration file
/var/yp/*/LDAP_*
NIS to LDAP mode map files
ldap(1), NIS+(1), makedbm(1M), nisaddent(1M), nissetup(1M), rpc.nisd(1M), ypbind(1M), ypinit(1M), yp<hy>
make(1M), ypmap2src(1M), ypserv(1M), ypxfrd(1M), ndbm(3C), ypclnt(3NSL)
The NIS+ server, rpc.nisd, when run in "YP-compatibility mode", can support NIS clients only for the standard NIS
maps listed below, provided that it has been set up to serve the corresponding NIS+ tables using nissetup(1M) and
nisaddent(1M). The NIS+ server should serve the directory with the same name (case sensitive) as the domainname
of the NIS client. NIS+ servers use secure RPC to verify client credentials but the NIS clients do not authenticate
their requests using secure RPC. Therefore, NIS clients can look up the information stored by the NIS+ server only
if the information has "read" access for an unauthenticated client, that is, one with nobody NIS+ credentials.
NIS maps
 NIS+ tables
passwd.byname passwd.org_dir
passwd.byuid passwd.org_dir
group.byname group.org_dir
group.bygid group.org_dir
publickey.byname cred.org_dir
hosts.byaddr hosts.org_dir
hosts.byname hosts.org_dir
mail.byaddr mail_aliases.org_dir
mail.aliases mail_aliases.org_dir
services.byname services.org_dir
services.byservicename services.org_dir
rpc.bynumber rpc.org_dir
rpc.byname rpc.org_dir
<beginning of page>
protocols.bynumber protocols.org_dir
protocols.byname protocols.org_dir
networks.byaddr networks.org_dir
networks.byname networks.org_dir
netmasks.byaddr netmasks.org_dir
ethers.byname ethers.org_dir
ethers.byaddr ethers.byname
bootparams bootparams
auto.master auto_master.org_dir
auto.home auto_home.org_dir
auto.direct auto_direct.org_dir
auto.src auto_src.org_dir
