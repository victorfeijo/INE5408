<beginning of page>
rtld_audit, la_activity, la_i86_pltenter, la_objsearch, la_objopen, la_objfilter, la_pltexit, la_pltexit64, la_preinit,
la_sparcv8_pltenter, la_sparcv9_pltenter, la_amd64_pltenter, la_symbind32, la_symbind64, la_version <-> runtime
linker auditing functions
void la_activity(uintptr_t *cookie, uint_t flag);
uintptr_t la_i86_pltenter(Elf32_Sym *sym, uint_t ndx, uintptr_t *refcook,
 uintptr_t *defcook, La_i86_regs *regs, uint_t *flags);
char *la_objsearch(const char *name, uintptr_t *cookie, uint_t flag);
uint_t la_objopen(Link_map *lmp, Lmid_t lmid, uintptr_t *cookie);
int la_objfilter(uintptr_t *fltrcook, uintptr_t *fltecook,
 uint_t *flags);
uintptr_t la_pltexit(Elf32_Sym *sym, uint_t ndx, uintptr_t *refcook,
 uintptr_t *defcook, uintptr_t retval);
uintptr_t la_pltexit64(Elf64_Sym *sym, uint_t ndx, uintptr_t *refcook,
 uintptr_t *defcook, uintptr_t retval, const char *sym_name);
void la_preinit(uintptr_t *cookie);
uintptr_t la_sparcv8_pltenter(Elf32_Sym *sym, uint_t ndx,
 uintptr_t *refcook, uintptr_t *defcook, La_amd64_regs *regs,
 uint_t *flags);
uintptr_t la_sparcv9_pltenter(Elf64_Sym *sym, uint_t ndx,
 uintptr_t *refcook, uintptr_t *defcook, La_sparcv8_regs *regs,
 uint_t *flags, const char *sym_name);
uintptr_t la_amd64_pltenter(Elf32_Sym *sym, uint_t ndx,
 uintptr_t *refcook, uintptr_t *defcook, La_sparcv8_regs *regs,
 uint_t *flags, const char *sym_name);
uintptr_t la_symbind32(Elf32_Sym *sym, uint_t ndx, uintptr_t *refcook,
 uintptr_t *defcook, uint_t *flags);
uintptr_t la_symbind64(Elf64_Sym *sym, uint_t ndx,
 uintptr_t *refcook,uintptr_t *defcook, uint_t *flags,
 const char *sym_name);
uint_t la_version(uint_t version);
A runtime linker auditing library is a user-created shared object offering one or more of these interfaces. The run<hy>
time linker ld.so.1(1), calls these interfaces during process execution. See the Linker and Libraries Guide for a full
description of the link auditing mechanism.
ld.so.1(1)
Linker and Libraries Guide
