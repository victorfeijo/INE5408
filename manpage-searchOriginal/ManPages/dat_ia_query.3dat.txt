<beginning of page>
dat_ia_query <-> query an IA
cc [ flag... ] file... -ldat [ library... ]
#include <dat/udat.h>
DAT_RETURN
 dat_ia_query (
 IN DAT_IA_HANDLE ia_handle,
 OUT DAT_EVD_HANDLE *async_evd_handle,
 IN DAT_IA_ATTR_MASK ia_attr_mask,
 OUT DAT_IA_ATTR *ia_attributes,
 IN DAT_PROVIDER_ATTR_MASK provider_attr_mask,
 OUT DAT_PROVIDER_ATTR *provider_attributes
 )
ia_handle Handle for an open instance of an IA.
async_evd_handle Handle for an Event Dispatcher for asynchronous events generated by the IA.
ia_attr_mask Mask for the ia_attributes.
ia_attributes Pointer to a Consumer-allocated structure that the Provider fills with IA attributes.
provider_attr_mask Mask for the provider_attributes.
provider_attributes Pointer to a Consumer-allocated structure that the Provider fills with Provider attributes.
The dat_ia_query() functions provides the Consumer with the IA parameters, as well as the IA and Provider at<hy>
tributes. Consumers pass in pointers to Consumer-allocated structures for the IA and Provider attributes that the
Provider fills.
The ia_attr_mask and provider_attr_mask parameters allow the Consumer to specify which attributes to query. The
Provider returns values for requested attributes. The Provider can also return values for any of the other attributes.
The IA attributes are common to all open instances of the IA. DAT defines a method to query the IA attributes but
does not define a method to modify them.
If IA is multiported, each port is presented to a Consumer as a separate IA.
Adapter name:

The name of the IA controlled by the Provider. The same as ia_name_ptr.
Vendor name:
Vendor if IA hardware.
HW version major:
Major version of IA hardware.
HW version minor:
Minor version of IA hardware.
<beginning of page>
Firmware version major:
Major version of IA firmware.
Firmware version minor:
Minor version of IA firmware.
IA_address_ptr:
An address of the interface Adapter.
Max EPs:
Maximum number of Endpoints that the IA can support. This covers all Endpoints in all states, including the ones
used by the Providers, zero or more applications, and management.
Max DTOs per EP:
Maximum number of DTOs and RMR_binds that any Endpoint can support for a single direction. This means the
maximum number of outstanding and in-progress Send, RDMA Read, RDMA Write DTOs, and RMR Binds at any
one time for any Endpoint; and maximum number of outstanding and in-progress Receive DTOs at any one time for
any Endpoint.
Max incoming RDMA Reads per EP:
Maximum number of RDMA Reads that can be outstanding per (connected) Endpoint with the IA as the target.
Max outgoing RDMA Reads per EP:
Maximum number of RDMA Reads that can be outstanding per (connected) Endpoint with the IA as the originator.
Max EVDs:
Maximum number of Event Dispatchers that an IA can support. An IA cannot support an Event Dispatcher directly,
but indirectly by Transport-specific Objects, for example, Completion Queues for Infiniband<tm> and VI. The Event
Dispatcher Objects can be shared among multiple Providers and similar Objects from other APIs, for example,
Event Queues for uDAPL.
Max EVD queue size:
Maximum size of the EVD queue supported by an IA.
Max IOV segments per DTO:
Maximum entries in an IOV list that an IA supports. Notice that this number cannot be explicit but must be implicit
to transport-specific Object entries. For example, for IB, it is the maximum number of scatter/gather entries per
Work Request, and for VI it is the maximum number of data segments per VI Descriptor.
Max LMRs:
Maximum number of Local Memory Regions IA supports among all Providers and applications of this IA.
Max LMR block size:
Maximum contiguous block that can be registered by the IA.
<beginning of page>
Mac LMR VA:
Highest valid virtual address within the context of an LMR. Frequently, IAs on 32-bit architectures support only
32-bit local virtual addresses.
Max PZs:
Maximum number of Protection Zones that the IA supports.
Max MTU size:
Maximum message size supported by the IA
Max RDMA size:
Maximum RDMA size supported by the IA
Max RMRs:
Maximum number of RMRs an IA supports among all Providers and applications of this IA.
Max RMR target address:
Highest valid target address with the context of a local RMR. Frequently, IAs on 32-bit architectures support only
32-bit local virtual addresses.
Num transport attributes:
Number of transport-specific attributes.
Transport-specific attributes:
Array of transport-specific attributes. Each entry has the format of DAT_NAMED_ATTR, which is a structure with
two elements. The first element is the name of the attribute. The second element is the value of the attribute as a
string.
Num vendor attributes:
Number of vendor-specific attributes.
Vendor-specific attributes:
Array of vendor-specific attributes. Each entry has the format of DAT_NAMED_ATTR, which is a structure with
two elements. The first element is the name of the attribute. The second element is the value of the attribute as a
string.
The provider attributes are specific to the open instance of the IA. DAT defines a method to query Provider attributes
but does not define a method to modify them.
Provider name:
Name of the Provider vendor.
Provider version major:
Major Version of uDAPL Provider.
<beginning of page>
Provider version minor:
Minor Version of uDAPL Provider.
DAPL API version major:
Major Version of uDAPL API supported.
DAPL API version minor:
Minor Version of uDAPL API supported.
LMR memory types supported:
Memory types that LMR Create supports for memory registration. This value is a union of LMR Memory Types
DAT_MEM_TYPE_VIRTUAL, DAT_MEM_TYPE_LMR, and DAT_MEM_TYPE_SHARED_VIRTUAL that
the Provider supports. All Providers must support the following Memory Types: DAT_MEM_TYPE_VIRTUAL,
DAT_MEM_TYPE_LMR, and DAT_MEM_TYPE_SHARED_VIRTUAL.
IOV ownership:
An enumeration flag that specifies the ownership of the local buffer description (IOV list) after post DTO returns.
The three values are as follows: <bu> DAT_IOV_CONSUMER indicates that the Consumer has the ownership of the
local buffer description after a post returns. <bu> DAT_IOV_PROVIDER_NOMOD indicates that the Provider still
has ownership of the local buffer description of the DTO when the post DTO returns, but the Provider does not mod<hy>
ify the buffer description. <bu> DAT_IOV_PROVIDER_MOD indicates that the Provider still has ownership of the lo<hy>
cal buffer description of the DTO when the post DTO returns and can modify the buffer description. In any case, the
Consumer obtains ownership of the local buffer description after the DTO transfer is completed and the Consumer is
notified through a DTO completion event.
QOS supported:
The union of the connection QOS supported by the Provider.
Completion flags supported:
The following values for the completion flag DAT_COMPLETION_FLAGS are supported by the Provider:
DAT_COMPLETION_SUPPRESS_FLAG, DAT_COMPLETION_UNSIGNALLED_FLAG, DAT_COM<hy>
PLETION_SOLICITED_WAIT_FLAG, and DAT_COMPLETION_BARRIER_FENCE_FLAG.
Thread safety:
Provider Library thread safe or not. The Provider Library is not required to be thread safe.
Max private data size:
Maximum size of private data the Provider supports. This value is at least 64 bytes.
Multipathing support:
Capability of the Provider to support Multipathing for connection establishment.
EP creator for PSP:
Indicator for who can create an Endpoint for a Connection Request. For the Consumer it is DAT_PSP_CRE<hy>
ATES_EP_NEVER. For the Provider it is DAT_PSP_CREATES_EP_ALWAYS. For both it is DAT_PSP_CRE<hy>
ATES_EP_IFASKED. This attribute is used for Public Service Point creation.
<beginning of page>
PZ support:
Indicator of what kind of protection the Provider's PZ provides.
Optimal Buffer Alignment:
Local and remote DTO buffer alignment for optimal performance on the Platform. The DAT_OPTIMAL_ALIGM<hy>
NEMT must be divisible by this attribute value. The maximum allowed value is DAT_OPTIMAL_ALIGMNEMT,
or 256.
EVD stream merging support:
A 2D binary matrix where each row and column represent an event stream type. Each binary entry is 1 if the event
streams of its row and column can be fed to the same EVD, and 0 otherwise.
More than two different event stream types can feed the same EVD if for each pair of the event stream types the en<hy>
try is 1.
The Provider should support merging of all event stream types.
The Consumer should check this attribute before requesting an EVD that merges multiple event stream types.
Num provider attributes:
Number of Provider-specific attributes.
Provider-specific attributes:
Array of Provider-specific attributes. Each entry has the format of DAT_NAMED_ATTR, which is a structure with
two elements. The first element is the name of the attribute. The second element is the value of the attribute as a
string.
DAT_SUCCESS The operation was successful.
DAT_INVALID_PARAMETER Invalid parameter;
DAT_INVALID_HANDLE Invalid DAT handle; ia_handle is invalid.
See attributes(5) for descriptions of the following attributes:
tab() box; cw(2.75i) |cw(2.75i) lw(2.75i) |lw(2.75i) ATTRIBUTE TYPEATTRIBUTE VALUE _ Interface Stability<hy>
Standard: uDAPL, 1.1, 1.2 _ MT-LevelSafe
libdat(3LIB), attributes(5)
