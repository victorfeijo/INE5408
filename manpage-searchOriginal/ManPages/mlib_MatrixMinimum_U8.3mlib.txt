<beginning of page>
mlib_MatrixMinimum_U8, mlib_MatrixMinimum_S8, mlib_MatrixMinimum_S16, mlib_MatrixMinimum_S32,
mlib_MatrixMinimum_F32, mlib_MatrixMinimum_D64 <-> find the minimum value in a matrix
cc [ flag... ] file... -lmlib [ library... ]
#include <mlib.h>
mlib_status mlib_MatrixMinimum_U8(mlib_u8 *min, const mlib_u8 *x,
 mlib_s32 m, mlib_s32 n);
mlib_status mlib_MatrixMinimum_S8(mlib_s8 *min, const mlib_s8 *x,
 mlib_s32 m, mlib_s32 n);
mlib_status mlib_MatrixMinimum_S16(mlib_s16 *min, const mlib_s16 *x,
 mlib_s32 m, mlib_s32 n);
mlib_status mlib_MatrixMinimum_S32(mlib_s32 *min, const mlib_s32 *x,
 mlib_s32 m, mlib_s32 n);
mlib_status mlib_MatrixMinimum_F32(mlib_f32 *min, const mlib_f32 *x,
 mlib_s32 m, mlib_s32 n);
mlib_status mlib_MatrixMinimum_D64(mlib_d64 *min, const mlib_d64 *x,
 mlib_s32 m, mlib_s32 n);
Each of these functions finds the minimum value of all elements in a matrix.
It uses the following equation:
 min[0] = MIN{ x[i] i = 0, 1, ..., (m*n - 1) }
Each of the functions takes the following arguments:
min Pointer to the minimum value.
x Pointer to the first element of the source matrix.
m Number of rows in the source matrix.
n Number of columns in the source matrix.
Each of the functions returns MLIB_SUCCESS if successful. Otherwise it returns MLIB_FAILURE.
See attributes(5) for descriptions of the following attributes:
tab() box; cw(2.75i) |cw(2.75i) lw(2.75i) |lw(2.75i) ATTRIBUTE TYPEATTRIBUTE VALUE _ Interface Stability<hy>
Committed _ MT-LevelMT-Safe
mlib_MatrixMaximum_U8(3MLIB), mlib_VectorMaximum_U8(3MLIB), mlib_VectorMinimum_U8(3MLIB),
attributes(5)
