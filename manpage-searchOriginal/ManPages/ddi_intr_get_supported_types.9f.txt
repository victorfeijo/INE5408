<beginning of page>
ddi_intr_get_supported_types <-> return information on supported hardware interrupt types
#include <sys/types.h>
#include <sys/conf.h>
#include <sys/ddi.h>
#include <sys/sunddi.h>
int ddi_intr_get_supported_types(dev_info_t *dip, int *typesp);
Solaris DDI specific (Solaris DDI)
dip Pointer to dev_info structure
typesp Pointer to supported interrupt types
The ddi_intr_get_supported_types() function retrieves the interrupt types supported by a particular hardware de<hy>
vice and by the system software. Upon successful return, the supported types are returned as a bit mask in the integer
pointed to by the typesp argument. See <sys/ddi_intr.h> for a list of interrupts that can be returned by a hardware
device.
For PCI devices that support MSI and/or MSI-X based hardware, this interface returns only the interrupt types that
are supported by all the hardware in the path to the hardware device.
An interrupt type is usable by the hardware device if it is returned by the ddi_intr_get_supported_types() function.
The device driver can be programmed to use one of the returned interrupt types to receive hardware interrupts.
The ddi_intr_get_supported_types() function returns:
DDI_SUCCESS On success.
DDI_EINVAL On encountering invalid input parameters.
DDI_INTR_NOTFOUND Returned when the hardware device is found not to support any hardware interrupts.
The ddi_intr_get_supported_types() function can be called from user or kernel non-interrupt context.
See attributes(5) for descriptions of the following attributes:
tab() box; cw(2.75i) |cw(2.75i) lw(2.75i) |lw(2.75i) ATTRIBUTE TYPEATTRIBUTE VALUE _ Interface Stability<hy>
Committed
pci(4), attributes(5), pcmcia(7D), sysbus(4), ddi_intr_add_handler(9F), ddi_intr_alloc(9F), ddi_intr_en<hy>
able(9F)
Writing Device Drivers
The ddi_intr_get_supported_types() function can be called by the device driver even at any time if the driver has
added an interrupt handler for a given interrupt type.
Soft interrupts are always usable and are not returned by this interface.
Any consumer of this interface should verify that the return value is not equal to DDI_SUCCESS. Incomplete
checking for failure codes could result in inconsistent behavior among platforms.
