<beginning of page>
net_event_notify_register, net_event_notify_unregister <-> add/delete a function to be called for changes to a event
#include <sys/hook.h>
#include <sys/neti.h>
int net_event_notify_register(net_handle_t family, char
 *event, hook_notify_fn_t *callback, void *arg);
int net_event_notify_unregister(net_handle_t family, char
 *event, hook_notify_fn_t *callback);
typedef int (* hook_notify_fn_t)(hook_notify_cmd_t command,
 void *arg, const char *name1, const char *name2, const char
 *name3);
Solaris DDI specific (Solaris DDI).
family value returned from a successful call to net_protocol_lookup().
callback function to call when a change occurs.
event name of the event for which notification of change is desired.
arg pointer to pass into the callback() function when a change occurs.
The net_event_notify_register() function registers a function represented by the pointer callback to be called when
there is a change to the event represented by family. The types of changes for which notifications are available for is
currently limited to the addition and removal of hooks.
The net_event_notify_unregister() function indicates that there is no longer any desire to receive notification of
changes to the event through function calls to the specified callback.
The name of a hook should be considered a private interface unless otherwise specified. The hook names used by
IPFilter in Solaris are a public, but uncommitted, interface.
Multiple callback functions may be registered through this interface. The same set of parameters is passed to each
callback function. The memory referenced through the pointers passed to the callback should be treated as pointing
to read-only memory. Changing this data is strictly prohibited.
The function that is called when the event occurs must not block any other events.
The arguments passed through to the callback are as follows (the command is either HN_REGISTER or HN_UN<hy>
REGISTER):
name1 is the name of the protocol.
name2 is the name of the event
name3 is the name of the hook being added/removed
If these functions succeed, 0 is returned. Otherwise, the following error is returned:
EEXIST the given callback function is already registered.
These functions may be called from user or kernel context.
See attributes(5) for descriptions of the following attributes:
<beginning of page>
tab() box; cw(2.75i) |cw(2.75i) lw(2.75i) |lw(2.75i) ATTRIBUTE TYPEATTRIBUTE VALUE _ AvailabilitySUN<hy>
Wcsu _ Interface StabilityCommitted
attributes(5), net_hook_register(9F), net_hook_unregister(9F), net_protocol_lookup(9F)
