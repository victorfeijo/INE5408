<beginning of page>
sem_timedwait, sem_reltimedwait_np <-> lock a semaphore
#include <semaphore.h>
#include <time.h>
int sem_timedwait(sem_t *restrict sem,
 const struct timespec *restrict abs_timeout);
int sem_reltimedwait_np(sem_t *restrict sem,
 const struct timespec *restrict rel_timeout);
The sem_timedwait() function locks the semaphore referenced by sem as in the sem_wait(3C) function. However,
if the semaphore cannot be locked without waiting for another process or thread to unlock the semaphore by per<hy>
forming a sem_post(3C) function, this wait is terminated when the specified timeout expires.
The sem_reltimedwait_np() function is identical to the sem_timedwait() function, except that the timeout is speci<hy>
fied as a relative time interval.
For sem_timedwait(), the timeout expires when the absolute time specified by abs_timeout passes, as measured by
the CLOCK_REALTIME clock (that is, when the value of that clock equals or exceeds abs_timeout), or if the ab<hy>
solute time specified by abs_timeout has already been passed at the time of the call.
For sem_reltimedwait_np(), the timeout expires when the time interval specified by rel_timeout passes, as mea<hy>
sured by the CLOCK_REALTIME clock, or if the time interval specified by rel_timeout is negative at the time of
the call.
The resolution of the timeout is the resolution of the CLOCK_REALTIME clock. The timespec data type is de<hy>
fined as a structure in the <time.h> header.
Under no circumstance does the function fail with a timeout if the semaphore can be locked immediately. The validi<hy>
ty of the abs_timeout need not be checked if the semaphore can be locked immediately.
The sem_timedwait() and sem_reltimedwait_np() functions return 0 if the calling process successfully performed
the semaphore lock operation on the semaphore designated by sem. If the call was unsuccessful, the state of the sem<hy>
aphore is be unchanged and the function returns -1 and sets errno to indicate the error.
The sem_timedwait() and sem_reltimedwait_np() functions will fail if:
EINVAL The sem argument does not refer to a valid semaphore.
EINVAL The process or thread would have blocked, and the timeout parameter specified a nanoseconds field value
less than zero or greater than or equal to 1,000 million.
ETIMEDOUT The semaphore could not be locked before the specified timeout expired.
The sem_timedwait() and sem_reltimedwait_np() functions may fail if:
EDEADLK A deadlock condition was detected.
EINTR A signal interrupted this function.
See attributes(5) for descriptions of the following attributes:
tab() box; cw(2.75i) |cw(2.75i) lw(2.75i) |lw(2.75i) ATTRIBUTE TYPEATTRIBUTE VALUE _ Interface Stability<hy>
Commmitted _ MT-LevelMT-Safe _ StandardSee below.
For sem_timedwait(), see standards(5).
<beginning of page>
semctl(2), semget(2), semop(2), time(2), sem_post(3C), sem_trywait(3C)sem_wait(3C), attributes(5), stan<hy>
dards(5)
