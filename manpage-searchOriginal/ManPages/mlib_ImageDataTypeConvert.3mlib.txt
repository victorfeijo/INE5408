<beginning of page>
mlib_ImageDataTypeConvert <-> data type conversion
cc [ flag... ] file... -lmlib [ library... ]
#include <mlib.h>
mlib_status mlib_ImageDataTypeConvert(mlib_image *dst, const mlib_image *src);
The mlib_ImageDataTypeConvert() function converts between data types MLIB_BIT, MLIB_BYTE,
MLIB_SHORT, MLIB_USHORT, MLIB_INT, MLIB_FLOAT, and MLIB_DOUBLE.
The input and output data images must have the same width, height, and number of channels. Conversion to a small<hy>
er pixel format clamps the source value to the dynamic range of the destination pixel.
See the following table for available variations of the data type conversion function.
tab(); cw(0i) cw(0i) cw(5.5i) lw(0i) lw(0i) lw(5.5i) Source TypeDest. TypeAction _ MLIB_BYTEMLIB_BIT(x > 0)
? 1 : 0 MLIB_SHORTMLIB_BIT(x > 0) ? 1 : 0 _ MLIB_USHORTMLIB_BIT(x > 0) ? 1 : 0 _ MLIB_INTM<hy>
LIB_BIT(x > 0) ? 1 : 0 _ MLIB_FLOATMLIB_BIT(x > 0) ? 1 : 0 _ MLIB_DOUBLEMLIB_BIT(x > 0) ? 1 : 0 _
MLIB_BITMLIB_BYTE(x == 1) ? 1 : 0 _ MLIB_SHORTMLIB_BYTE(mlib_u8)clamp(x, 0, 255) _
MLIB_USHORTMLIB_BYTE(mlib_u8)clamp(x, 0, 255) _ MLIB_INTMLIB_BYTE(mlib_u8)clamp(x, 0, 255) _
MLIB_FLOATMLIB_BYTE(mlib_u8)clamp(x, 0, 255) _ MLIB_DOUBLEMLIB_BYTE(mlib_u8)clamp(x, 0, 255)
_ MLIB_BITMLIB_SHORT(x == 1) ? 1 : 0 _ MLIB_BYTEMLIB_SHORT(mlib_s16)x _ MLIB_USHORTM<hy>
LIB_SHORT(mlib_s16)clamp(x, -32768, 32767) _ MLIB_INTMLIB_SHORT(mlib_s16)clamp(x, -32768, 32767) _
MLIB_FLOATMLIB_SHORT(mlib_s16)clamp(x, -32768, 32767) _ MLIB_DOUBLEM<hy>
LIB_SHORT(mlib_s16)clamp(x, -32768, 32767) _ MLIB_BITMLIB_USHORT(x == 1) ? 1 : 0 _ MLIB_BYTEM<hy>
LIB_USHORT(mlib_u16)x _ MLIB_SHORTMLIB_USHORT(mlib_u16)clamp(x, 0, 65535) _ MLIB_INTM<hy>
LIB_USHORT(mlib_u16)clamp(x, 0, 65535) _ MLIB_FLOATMLIB_USHORT(mlib_u16)clamp(x, 0, 65535) _
MLIB_DOUBLEMLIB_USHORT(mlib_u16)clamp(x, 0, 65535) _ MLIB_BITMLIB_INT(x == 1) ? 1 : 0 _
MLIB_BYTEMLIB_INT(mlib_s32)x _ MLIB_SHORTMLIB_INT(mlib_s32)x _ MLIB_USHORTM<hy>
LIB_INT(mlib_s32)x _ MLIB_FLOATMLIB_INTT{ (mlib_s32)clamp(x, -2147483647-1, 2147483647) T} _
MLIB_DOUBLEMLIB_INTT{ (mlib_s32)clamp(x, -2147483647-1, 2147483647) T} _ MLIB_BITM<hy>
LIB_FLOAT(x == 1) ? 1.0 : 0.0 _ MLIB_BYTEMLIB_FLOAT(mlib_f32)x _ MLIB_SHORTM<hy>
LIB_FLOAT(mlib_f32)x _ MLIB_USHORTMLIB_FLOAT(mlib_f32)x _ MLIB_INTMLIB_FLOAT(mlib_f32)x _
MLIB_DOUBLEMLIB_FLOAT(mlib_f32)x _ MLIB_BITMLIB_DOUBLE(x == 1) ? 1.0 : 0.0 _ MLIB_BYTEM<hy>
LIB_DOUBLE(mlib_d64)x _ MLIB_SHORTMLIB_DOUBLE(mlib_d64)x _ MLIB_USHORTMLIB_DOU<hy>
BLE(mlib_d64)x _ MLIB_INTMLIB_DOUBLE(mlib_d64)x _ MLIB_FLOATMLIB_DOUBLE(mlib_d64)x
The actions are defined in C-style pseudo-code. All type casts follow the rules of standard C. clamp() can be defined
as a macro: #define clamp(x, low, high) (((x) < (low)) ? (low) : (((x) > (high)) ? (high) : (x)))
The function takes the following arguments:
dst Pointer to destination image.
src Pointer to source image.
The function returns MLIB_SUCCESS if successful. Otherwise it returns MLIB_FAILURE.
See attributes(5) for descriptions of the following attributes:
tab() box; cw(2.75i) |cw(2.75i) lw(2.75i) |lw(2.75i) ATTRIBUTE TYPEATTRIBUTE VALUE _ Interface Stability<hy>
Committed _ MT-LevelMT-Safe
mlib_ImageReformat(3MLIB), attributes(5)
