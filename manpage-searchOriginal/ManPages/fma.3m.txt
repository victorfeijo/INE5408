<beginning of page>
fma, fmaf, fmal <-> floating-point multiply-add
c99 [ flag... ] file... -lm [ library... ]
#include <math.h>
double fma(double x, double y, double z);
float fmaf(float x, float y, float z);
long double fmal(long double x, long double y, long double z);
These functions compute (x * y) + z, rounded as one ternary operation. They compute the value (as if) to infinite pre<hy>
cision and round once to the result format, according to the rounding mode characterized by the value of
FLT_ROUNDS.
Upon successful completion, these functions return (x * y) + z, rounded as one ternary operation.
If x or y are NaN, a NaN is returned.
If x multiplied by y is an exact infinity and z is also an infinity but with the opposite sign, a domain error occurs and
a NaN is returned.
If one of x and y is infinite, the other is 0, and z is not a NaN, a domain error occurs and a NaN is returned.
If x*y is not 0*Inf nor Inf*0 and z is a NaN, a NaN is returned.
These functions will fail if:
Domain Error The value of x*y+z is invalid or the value x*y is invalid.
If the integer expression (math_errhandling & MATH_ERREXCEPT) is non-zero, the invalid floating-point ex<hy>
ception will be raised.
Range Error The result overflows.
If the integer expression (math_errhandling & MATH_ERREXCEPT) is non-zero, the overflow floating-point ex<hy>
ception will be raised.
An application wanting to check for exceptions should call feclearexcept(FE_ALL_EXCEPT) before calling these
functions. On return, if fetestexcept(FE_INVALID | FE_DIVBYZERO | FE_OVERFLOW | FE_UNDER<hy>
FLOW) is non-zero, an exception has been raised. An application should either examine the return value or check
the floating point exception flags to detect exceptions.
See attributes(5) for descriptions of the following attributes:
tab() box; cw(2.75i) |cw(2.75i) lw(2.75i) |lw(2.75i) ATTRIBUTE TYPEATTRIBUTE VALUE _ Interface Stability<hy>
Standard _ MT-LevelMT-Safe
feclearexcept(3M), fetestexcept(3M), math.h(3HEAD), attributes(5), standards(5)
