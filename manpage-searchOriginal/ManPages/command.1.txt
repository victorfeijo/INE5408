<beginning of page>
command <-> execute a simple command
command [-p] command_name [argument]...
command [-v | -V] command_name
command [-pvxV] [command_name [argument...]]
The command utility causes the shell to treat the arguments as a simple command, suppressing the shell function
lookup.
If the command_name is the same as the name of one of the special built-in utilities, the special properties do not oc<hy>
cur. In every other respect, if command_name is not the name of a function, the effect of command (with no op<hy>
tions) are the same as omitting command.
The command utility also provides information concerning how a command name is interpreted by the shell. See -v
and -V.
Without the -v or -V option, command executes command_name with arguments specified by argument, suppress<hy>
ing the shell function lookup that normally occurs. In addition, if command is a special built-in command, the spe<hy>
cial properties are removed so that failures do not cause the script that executes it to terminate.
If the -v or -V options are specified, command is equivalent to whence(1).
The following options are supported by /usr/bin/command:
-p Performs the command search using a default value for PATH that is guaranteed to find all of the standard utili<hy>
ties.
-v Writes a string to standard output that indicates the path or command that is be used by the shell, in the current
shell execution environment to invoke command_name, but does not invoke command_name. <bu> Utilities, regular
built-in utilities, command_names including a slash character, and any implementation-provided functions that are
found using the PATH variable is written as absolute path names. <bu> Shell functions, special built-in utilities, regular
built-in utilities not associated with a PATH search, and shell reserved words are written as just their names. <bu> An
alias is written as a command line that represents its alias definition. <bu> Otherwise, no output is written and the exit
status reflects that the name was not found.
-V Writes a string to standard output that indicates how the name specified in the command_name operand is inter<hy>
preted by the shell, in the current shell execution environment, but does not invoke command_name. Although the
format of this string is unspecified, it indicates in which of the following categories command_name falls and in<hy>
clude the information stated: <bu> Utilities, regular built-in utilities, and any implementation-provided functions that are
found using the PATH variable is identified as such and include the absolute path name in the string. <bu> Other shell
functions is identified as functions. <bu> Aliases are identified as aliases and their definitions are included in the string.
<bu> Special built-in utilities are identified as special built-in utilities. <bu> Regular built-in utilities not associated with a
PATH search is identified as regular built-in utilities. <bu> Shell reserved words are identified as reserved words.
The following options are supported by ksh93 command:
-p Causes a default path to be searched rather than the one defined by the value of PATH.
-v Equivalent to:
 whence command [argument ...]
-V Equivalent to:
 whence -v command [argument ...]
<beginning of page>
-x If command fails because there are too many arguments, it is invoked multiple times with a subset of the argu<hy>
ments on each invocation. Arguments that occur prior to the first word that expand to multiple arguments and argu<hy>
ments that occur after the last word that expands to multiple arguments are passed on each invocation. The exit sta<hy>
tus is the maximum invocation exit status.
The following operands are supported:
argument One of the strings treated as an argument to command_name.
command_name The name of a utility or a special built-in utility.
Example 1 Making a Version of cd That Always Prints Out the New Working Directory
The following example takes a version of cd that always prints out the new working directory exactly once:
 cd() {
  command cd "$@" >/dev/null
  pwd
 }
Example 2 Starting Off a secure shell script in Which the Script Avoids Being Spoofed by Its Parent
The following example starts off a secure shell script in which the script avoids being spoofed by its parent:
 IFS='
 '
 # The preceding value should be <space><tab><newline>.
 # Set IFS to its default value.
 \unalias -a
 # Unset all possible aliases.
 # Note that unalias is escaped to prevent an alias
 # being used for unalias.
 unset -f command
 # Ensure command is not a user function.
 PATH="$(command -p getconf _CS_PATH):$PATH"
 # Put on a reliable PATH prefix.
 # ...
At this point, given correct permissions on the directories called by PATH, the script has the ability to ensure that
any utility it calls is the intended one. It is being very cautious because it assumes that implementation extensions
can be present that would allow user functions to exist when it is invoked. This capability is not specified by this
document, but it is not prohibited as an extension. For example, the ENV variable precedes the invocation of the
script with a user startup script. Such a script could define functions to spoof the application.
See environ(5) for descriptions of the following environment variables that affect the execution of command:
LANG, LC_ALL, LC_CTYPE, LC_MESSAGES, and NLSPATH.
PATH Determine the search path used during the command search, except as described under the -p option.
When the -v or -V options are specified, the following exit values are returned:
0 Successful completion.
<beginning of page>
>0 The command_name could not be found or an error occurred.
Otherwise, the following exit values are returned:
126 The utility specified by command_name was found but could not be invoked.
127 An error occurred in the command utility or the utility specified by command_name could not be found.
Otherwise, the exit status of command is that of the simple command specified by the arguments to command.
If command is invoked, the exit status of command is that of command. Otherwise, it is one of the following:
0 command_name completed successfully.
>0 -v or -V has been specified and an error occurred.
126 command_name was found but could not be invoked.
127 command_name could not be found.
See attributes(5) for descriptions of the following attributes:
tab() box; cw(2.75i) |cw(2.75i) lw(2.75i) |lw(2.75i) ATTRIBUTE TYPEATTRIBUTE VALUE _ AvailabilitySUN<hy>
Wcsu _ Interface StabilityCommitted _ StandardSee standards(5).
tab() box; cw(2.75i) |cw(2.75i) lw(2.75i) |lw(2.75i) ATTRIBUTE TYPEATTRIBUTE VALUE _ AvailabilitySUN<hy>
Wcsu _ Interface StabilityUncommitted
ksh93(1), sh(1), type(1), whence(1), attributes(5), environ(5), standards(5)
