<beginning of page>
mlib_VectorSub_U8_U8_Mod, mlib_VectorSub_U8_U8_Sat, mlib_VectorSub_U8C_U8C_Mod, mlib_Vector<hy>
Sub_U8C_U8C_Sat, mlib_VectorSub_S8_S8_Mod, mlib_VectorSub_S8_S8_Sat, mlib_VectorSub_S8C_S8C_Mod,
mlib_VectorSub_S8C_S8C_Sat, mlib_VectorSub_S16_U8_Mod, mlib_VectorSub_S16_U8_Sat, mlib_Vector<hy>
Sub_S16_S8_Mod, mlib_VectorSub_S16_S8_Sat, mlib_VectorSub_S16_S16_Mod, mlib_VectorSub_S16_S16_Sat,
mlib_VectorSub_S16C_U8C_Mod, mlib_VectorSub_S16C_U8C_Sat, mlib_VectorSub_S16C_S8C_Mod,
mlib_VectorSub_S16C_S8C_Sat, mlib_VectorSub_S16C_S16C_Mod, mlib_VectorSub_S16C_S16C_Sat,
mlib_VectorSub_S32_S16_Mod, mlib_VectorSub_S32_S16_Sat, mlib_VectorSub_S32_S32_Mod, mlib_Vector<hy>
Sub_S32_S32_Sat, mlib_VectorSub_S32C_S16C_Mod, mlib_VectorSub_S32C_S16C_Sat, mlib_Vector<hy>
Sub_S32C_S32C_Mod, mlib_VectorSub_S32C_S32C_Sat <-> vector subtraction
cc [ flag... ] file... -lmlib [ library... ]
#include <mlib.h>
mlib_status mlib_VectorSub_U8_U8_Mod(mlib_u8 *z,
 const mlib_u8 *x, const mlib_u8 *y, mlib_s32 n);
mlib_status mlib_VectorSub_U8_U8_Sat(mlib_u8 *z,
 const mlib_u8 *x, const mlib_u8 *y, mlib_s32 n);
mlib_status mlib_VectorSub_U8C_U8C_Mod(mlib_u8 *z,
 const mlib_u8 *x, const mlib_u8 *y, mlib_s32 n);
mlib_status mlib_VectorSub_U8C_U8C_Sat(mlib_u8 *z,
 const mlib_u8 *x, const mlib_u8 *y, mlib_s32 n);
mlib_status mlib_VectorSub_S8_S8_Mod(mlib_s8 *z,
 const mlib_s8 *x, const mlib_s8 *y, mlib_s32 n);
mlib_status mlib_VectorSub_S8_S8_Sat(mlib_s8 *z,
 const mlib_s8 *x, const mlib_s8 *y, mlib_s32 n);
mlib_status mlib_VectorSub_S8C_S8C_Mod(mlib_s8 *z,
 const mlib_s8 *x, const mlib_s8 *y, mlib_s32 n);
mlib_status mlib_VectorSub_S8C_S8C_Sat(mlib_s8 *z,
 const mlib_s8 *x, const mlib_s8 *y, mlib_s32 n);
mlib_status mlib_VectorSub_S16_U8_Mod(mlib_s16 *z,
 const mlib_u8 *x, const mlib_u8 *y, mlib_s32 n);
mlib_status mlib_VectorSub_S16_U8_Sat(mlib_s16 *z,
 const mlib_u8 *x, const mlib_u8 *y, mlib_s32 n);
mlib_status mlib_VectorSub_S16_S8_Mod(mlib_s16 *z,
 const mlib_s8 *x, const mlib_s8 *y, mlib_s32 n);
mlib_status mlib_VectorSub_S16_S8_Sat(mlib_s16 *z,
 const mlib_s8 *x, const mlib_s8 *y, mlib_s32 n);
mlib_status mlib_VectorSub_S16_S16_Mod(mlib_s16 *z,
 const mlib_s16 *x, const mlib_s16 *y, mlib_s32 n);
mlib_status mlib_VectorSub_S16_S16_Sat(mlib_s16 *z,
 const mlib_s16 *x, const mlib_s16 *y, mlib_s32 n);
mlib_status mlib_VectorSub_S16C_U8C_Mod(mlib_s16 *z,
 const mlib_u8 *x, const mlib_u8 *y, mlib_s32 n);
mlib_status mlib_VectorSub_S16C_U8C_Sat(mlib_s16 *z,
 const mlib_u8 *x, const mlib_u8 *y, mlib_s32 n);
mlib_status mlib_VectorSub_S16C_S8C_Mod(mlib_s16 *z,
 const mlib_s8 *x, const mlib_s8 *y, mlib_s32 n);
mlib_status mlib_VectorSub_S16C_S8C_Sat(mlib_s16 *z,
 const mlib_s8 *x, const mlib_s8 *y, mlib_s32 n);
<beginning of page>
mlib_status mlib_VectorSub_S16C_S16C_Mod(mlib_s16 *z,
 const mlib_s16 *x, const mlib_s16 *y, mlib_s32 n);
mlib_status mlib_VectorSub_S16C_S16C_Sat(mlib_s16 *z,
 const mlib_s16 *x, const mlib_s16 *y, mlib_s32 n);
mlib_status mlib_VectorSub_S32_S16_Mod(mlib_s32 *z,
 const mlib_s16 *x, const mlib_s16 *y, mlib_s32 n);
mlib_status mlib_VectorSub_S32_S16_Sat(mlib_s32 *z,
 const mlib_s16 *x, const mlib_s16 *y, mlib_s32 n);
mlib_status mlib_VectorSub_S32_S32_Mod(mlib_s32 *z,
 const mlib_s32 *x, const mlib_s32 *y, mlib_s32 n);
mlib_status mlib_VectorSub_S32_S32_Sat(mlib_s32 *z,
 const mlib_s32 *x, const mlib_s32 *y, mlib_s32 n);
mlib_status mlib_VectorSub_S32C_S16C_Mod(mlib_s32 *z,
 const mlib_s16 *x, const mlib_s16 *y, mlib_s32 n);
mlib_status mlib_VectorSub_S32C_S16C_Sat(mlib_s32 *z,
 const mlib_s16 *x, const mlib_s16 *y, mlib_s32 n);
mlib_status mlib_VectorSub_S32C_S32C_Mod(mlib_s32 *z,
 const mlib_s32 *x, const mlib_s32 *y, mlib_s32 n);
mlib_status mlib_VectorSub_S32C_S32C_Sat(mlib_s32 *z,
 const mlib_s32 *x, const mlib_s32 *y, mlib_s32 n);
Each of these functions subtracts one vector from another vector.
It uses the following equation:
 z[i] = x[i] - y[i]
where i = 0, 1, ..., (n - 1) for real data; i = 0, 1, ..., (2*n - 1) for complex data.
Each of the functions takes the following arguments:
z Pointer to the first element of the destination vector.
x Pointer to the first element of the first source vector.
y Pointer to the first element of the second source vector.
n Number of elements in the vectors.
Each of the functions returns MLIB_SUCCESS if successful. Otherwise it returns MLIB_FAILURE.
See attributes(5) for descriptions of the following attributes:
tab() box; cw(2.75i) |cw(2.75i) lw(2.75i) |lw(2.75i) ATTRIBUTE TYPEATTRIBUTE VALUE _ Interface Stability<hy>
Committed _ MT-LevelMT-Safe
mlib_VectorSub_U8_Mod(3MLIB), attributes(5)
