<beginning of page>
csx_Put8, csx_Put16, csx_Put32, csx_Put64 <-> write to device register
#include <sys/pccard.h>
void csx_Put8(acc_handle_t handle, uint32_t offset, uint8_t value);
void csx_Put16(acc_handle_t handle, uint32_t offset, uint16_t value);
void csx_Put32(acc_handle_t handle, uint32_t offset, uint32_t value);
void csx_Put64(acc_handle_t handle, uint32_t offset, uint64_t value);
Solaris DDI Specific (Solaris DDI)
handle The access handle returned from csx_RequestIO(9F), csx_RequestWindow(9F), or csx_DupHandle(9F).
offset The offset in bytes from the base of the mapped resource.
value The data to be written to the device.
These functions generate a write of various sizes to the mapped memory or device register.
The csx_Put8(), csx_Put16(), csx_Put32(), and csx_Put64() functions write 8 bits, 16 bits, 32 bits, and 64 bits of
data, respectively, to the device address represented by the handle, handle, at an offset in bytes represented by the
offset, offset.
Data that consists of more than one byte will automatically be translated to maintain a consistent view between the
host and the device based on the encoded information in the data access handle. The translation may involve byte
swapping if the host and the device have incompatible endian characteristics.
These functions may be called from user, kernel, or interrupt context.
csx_DupHandle(9F), csx_Get8(9F), csx_GetMappedAddr(9F), csx_RepGet8(9F), csx_RepPut8(9F), csx_Re<hy>
questIO(9F), csx_RequestWindow(9F)
PC Card 95 Standard, PCMCIA/JEIDA
