<beginning of page>
usb_pipe_close <-> Close and cleanup a USB device pipe
#include <sys/usb/usba.h>
void usb_pipe_close(dev_info_t *dip, usb_pipe_handle_t pipe_handle,
 usb_flags_t flags,
 void (*callback)(usb_pipe_handle_t pipe_handle,
 usb_opaque_t arg, int rval,
 usb_cb_flags_t flags), usb_opaque_t callback_arg);
Solaris DDI specific (Solaris DDI)
dip Pointer to the device's dev_info structure.
pipe_handle Handle of pipe to close. Cannot be a handle to the default control pipe.
flags USB_FLAGS_SLEEP is the only flag recognized. Set it to wait for resources, for pipe to become free, and for
all pending request callbacks to complete.
callback This function is called on completion if the USB_FLAGS_SLEEP flag is not specified. Mandatory if the
USB_FLAGS_SLEEP flag has not been specified.
callback_arg Second argument to callback function.
The usb_pipe_close() function closes the pipe pointed to by pipe_handle, releases all related resources and then
frees the pipe handle. This function stops polling if the pipe to be closed is an interrupt-IN or isochronous-IN pipe.
The default control pipe cannot be closed.
Pipe cleanup includes waiting for the all pending requests in the pipe to finish, and then flushing residual requests re<hy>
maining after waiting for several seconds. Exception handlers of flushed requests are called with a completion rea<hy>
son of USB_CR_FLUSHED.
If USB_FLAGS_SLEEP is specified in flags, wait for all cleanup operations to complete before calling the callback
handler and returning.
If USB_FLAGS_SLEEP is not specified in flags, an asynchronous close (to be done in a separate thread) is request<hy>
ed. Return immediately. The callback handler is called after all pending operations are completed.
The callback parameter is the callback handler and takes the following arguments:
usb_pipe_handle_t pipe_handle
Handle of the pipe to close.
usb_opaque_t callback_arg
Callback_arg specified to usb_pipe_close().
int rval
Return value of close operation
usb_cb_flags_t callback_flags
Status of queueing operation. Can be:
<beginning of page>
USB_CB_NO_INFO Callback was uneventful.
USB_CB_ASYNC_REQ_FAILED Error starting asynchronous request.
Status is returned to the caller via the callback handler's rval argument. Possible callback hander rval argument val<hy>
ues are:
USB_INVALID_PIPE Pipe handle specifies a pipe which is closed or closing.
USB_INVALID_ARGS dip or pipe_handle arguments are NULL.
USB_INVALID_CONTEXT Called from interrupt context.
USB_INVALID_PERM Pipe handle specifies the default control pipe.
USB_FAILURE Asynchronous resources are unavailable. In this case, USB_CB_ASYNC_REQ_FAILED is passed
in as the callback_flags arg to the callback hander.
Exception handlers of any queued requests which were flushed are called with a completion reason of
USB_CR_FLUSHED. Exception handlers of periodic pipe requests which were terminated are called with
USB_CR_PIPE_CLOSING.
Note that messages mirroring the above errors are logged to the console logfile on error. (This provides status for
calls which otherwise could provide status).
May be called from user or kernel context regardless of arguments. May not be called from a callback executing in
interrupt context. Please see usb_callback_flags(9S) for more information on callbacks.
If the USB_CB_ASYNC_REQ_FAILED bit is clear in usb_cb_flags_t, the callback, if supplied, can block because
it is executing in kernel context. Otherwise the callback cannot block. Please see usb_callback_flags(9S) for more
information on callbacks.
 /* Synchronous close of pipe. */
 usb_pipe_close(dip, pipe, USB_FLAGS_SLEEP, NULL, NULL);
  --------
 /* Template callback. */
 void close_callback(usb_pipe_handle_t, usb_opaque_t, usb_cb_flags_t);
 /* Asynchronous close of pipe. */
 usb_pipe_close(dip, pipe, 0, close_callback, callback_arg);
See attributes(5) for descriptions of the following attributes:
tab() box; cw(2.75i) |cw(2.75i) lw(2.75i) |lw(2.75i) ATTRIBUTE TYPEATTRIBUTE VALUE _ ArchitecturePCI-
based systems _ Interface stabilityCommitted _ AvailabilitySUNWusb
attributes(5), usb_get_status(9F), usb_pipe_drain_reqs(9F), usb_pipe_get_state(9F), usb_pipe_open(9F),
usb_pipe_reset(9F), usb_callback_flags(9S)
