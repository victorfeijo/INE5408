<beginning of page>
elf_version <-> coordinate ELF library and application versions
cc [ flag ... ] file ... -lelf [ library ... ]
#include <libelf.h>
unsigned elf_version(unsigned ver);
As elf(3ELF) explains, the program, the library, and an object file have independent notions of the latest ELF ver<hy>
sion. elf_version() lets a program query the ELF library's internal version. It further lets the program specify what
memory types it uses by giving its own working version, ver, to the library. Every program that uses the ELF library
must coordinate versions as described below.
The header <libelf.h> supplies the version to the program with the macro EV_CURRENT. If the library's internal
version (the highest version known to the library) is lower than that known by the program itself, the library may
lack semantic knowledge assumed by the program. Accordingly, elf_version() will not accept a working version un<hy>
known to the library.
Passing ver equal to EV_NONE causes elf_version() to return the library's internal version, without altering the
working version. If ver is a version known to the library, elf_version() returns the previous (or initial) working ver<hy>
sion number. Otherwise, the working version remains unchanged and elf_version() returns EV_NONE. Example 1
A sample display of using the elf_version() function.
The following excerpt from an application program protects itself from using an older library:
 if (elf_version(EV_CURRENT) == EV_NONE) {
  /* library out of date */
  /* recover from error */
 }
See attributes(5) for descriptions of the following attributes:
tab() box; cw(2.75i) |cw(2.75i) lw(2.75i) |lw(2.75i) ATTRIBUTE TYPEATTRIBUTE VALUE _ Interface Stabili<hy>
tyStable _ MT-LevelMT-Safe
elf(3ELF), elf32_xlatetof(3ELF), elf_begin(3ELF), libelf(3LIB), attributes(5)
The working version should be the same for all operations on a particular ELF descriptor. Changing the version be<hy>
tween operations on a descriptor will probably not give the expected results.
