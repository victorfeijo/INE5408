<beginning of page>
ldexp, ldexpf, ldexpl <-> load exponent of a floating point number
c99 [ flag... ] file... -lm [ library... ]
#include <math.h>
double ldexp(double x, int exp);
float ldexpf(float x, int exp);
long double ldexpl(long double x, int exp);
These functions computes the quantity x* 2^exp.
Upon successful completion, these functions return x multiplied by 2 raised to the power exp.
If these functions would cause overflow, a range error occurs and ldexp(), ldexpf(), and ldexpl() return
<+->HUGE_VAL, <+->HUGE_VALF, and <+->HUGE_VALL (according to the sign of x), respectively.
If x is NaN, a NaN is returned.
If x is <+->0 or <+->Inf, x is returned.
If exp is 0, x is returned.
These functions will fail if:
Range Error The result overflows.
If the integer expression (math_errhandling & MATH_ERREXCEPT) is non-zero, the overflow floating-point ex<hy>
ception is raised.
The ldexp() function sets errno to ERANGE if the result overflows.
An application wanting to check for exceptions should call feclearexcept(FE_ALL_EXCEPT) before calling these
functions. On return, if fetestexcept(FE_INVALID | FE_DIVBYZERO | FE_OVERFLOW | FE_UNDER<hy>
FLOW) is non-zero, an exception has been raised. An application should either examine the return value or check
the floating point exception flags to detect exceptions.
An application can also set errno to 0 before calling ldexp(). On return, if errno is non-zero, an error has occurred.
The ldexpf() and ldexpl() functions do not set errno.
See attributes(5) for descriptions of the following attributes:
tab() box; cw(2.75i) |cw(2.75i) lw(2.75i) |lw(2.75i) ATTRIBUTE TYPEATTRIBUTE VALUE _ Interface Stability<hy>
Standard _ MT-LevelMT-Safe
frexp(3M), isnan(3M), modf(3M), attributes(5), standards(5)
