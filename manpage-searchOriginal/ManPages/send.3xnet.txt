<beginning of page>
send <-> send a message on a socket
cc [ flag ... ] file ... -lxnet [ library ... ]
#include <sys/socket.h>
ssize_t send(int socket, const void *buffer, size_t length, int flags);
socket Specifies the socket file descriptor.
buffer Points to the buffer containing the message to send.
length Specifies the length of the message in bytes.
flags Specifies the type of message transmission. Values of this argument are formed by logically OR'ing zero or
more of the following flags:
MSG_EOR Terminates a record (if supported by the protocol)
MSG_OOB Sends out-of-band data on sockets that support out-of-band communications. The significance and se<hy>
mantics of out-of-band data are protocol-specific.
The send() function initiates transmission of a message from the specified socket to its peer. The send() function
sends a message only when the socket is connected (including when the peer of a connectionless socket has been set
via connect(3XNET)).
The length of the message to be sent is specified by the length argument. If the message is too long to pass through
the underlying protocol, send() fails and no data is transmitted.
Successful completion of a call to send() does not guarantee delivery of the message. A return value of <mi>1 indicates
only locally-detected errors.
If space is not available at the sending socket to hold the message to be transmitted and the socket file descriptor
does not have O_NONBLOCK set, send() blocks until space is available. If space is not available at the sending
socket to hold the message to be transmitted and the socket file descriptor does have O_NONBLOCK set, send()
will fail. The select(3C) and poll(2) functions can be used to determine when it is possible to send more data.
The socket in use may require the process to have appropriate privileges to use the send() function.
The send() function is identical to sendto(3XNET) with a null pointer dest_len argument, and to write() if no flags
are used.
Upon successful completion, send() returns the number of bytes sent. Otherwise, <mi>1 is returned and errno is set to
indicate the error.
The send() function will fail if:
EAGAIN
EWOULDBLOCK The socket's file descriptor is marked O_NONBLOCK and the requested operation would
block.
EBADF The socket argument is not a valid file descriptor.
ECONNRESET A connection was forcibly closed by a peer.
EDESTADDRREQ The socket is not connection-mode and no peer address is set.
<beginning of page>
EFAULT The buffer parameter can not be accessed.
EINTR A signal interrupted send() before any data was transmitted.
EMSGSIZE The message is too large be sent all at once, as the socket requires.
ENOTCONN The socket is not connected or otherwise has not had the peer prespecified.
ENOTSOCK The socket argument does not refer to a socket.
EOPNOTSUPP The socket argument is associated with a socket that does not support one or more of the values set
in flags.
EPIPE The socket is shut down for writing, or the socket is connection-mode and is no longer connected. In the lat<hy>
ter case, and if the socket is of type SOCK_STREAM, the SIGPIPE signal is generated to the calling thread.
The send() function may fail if:
EACCES The calling process does not have the appropriate privileges.
EIO An I/O error occurred while reading from or writing to the file system.
ENETDOWN The local interface used to reach the destination is down.
ENETUNREACH No route to the network is present.
ENOBUFS Insufficient resources were available in the system to perform the operation.
ENOSR There were insufficient STREAMS resources available for the operation to complete.
See attributes(5) for descriptions of the following attributes:
tab() box; cw(2.75i) |cw(2.75i) lw(2.75i) |lw(2.75i) ATTRIBUTE TYPEATTRIBUTE VALUE _ Interface Stability<hy>
Standard _ MT-LevelMT-Safe
connect(3XNET), getsockopt(3XNET), poll(2), recv(3XNET), recvfrom(3XNET), recvmsg(3XNET), select(3C),
sendmsg(3XNET), sendto(3XNET), setsockopt(3XNET), shutdown(3XNET), socket(3XNET), attributes(5),
standards(5)
