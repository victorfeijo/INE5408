<beginning of page>
mlib_GraphicsDrawArc, mlib_GraphicsDrawArc_8, mlib_GraphicsDrawArc_32, mlib_GraphicsDrawArc_X_8,
mlib_GraphicsDrawArc_X_32, mlib_GraphicsDrawArc_A_8, mlib_GraphicsDrawArc_A_32, mlib_Graphics<hy>
DrawArc_B_8, mlib_GraphicsDrawArc_B_32, mlib_GraphicsDrawArc_AB_8, mlib_GraphicsDrawArc_AB_32 <->
draw arc
cc [ flag... ] file... -lmlib [ library... ]
#include <mlib.h>
mlib_status mlib_GraphicsDrawArc_8(mlib_image *buffer, mlib_s16 x,
 mlib_s16 y, mlib_s32 r, mlib_f32 t1, mlib_f32 t2, mlib_s32 c);
mlib_status mlib_GraphicsDrawArc_32(mlib_image *buffer, mlib_s16 x,
 mlib_s16 y, mlib_s32 r, mlib_f32 t1, mlib_f32 t2, mlib_s32 c);
mlib_status mlib_GraphicsDrawArc_X_8(mlib_image *buffer, mlib_s16 x,
 mlib_s16 y, mlib_s32 r, mlib_f32 t1, mlib_f32 t2, mlib_s32 c,
 mlib_s32 c2);
mlib_status mlib_GraphicsDrawArc_X_32(mlib_image *buffer, mlib_s16 x,
 mlib_s16 y, mlib_s32 r, mlib_f32 t1, mlib_f32 t2, mlib_s32 c,
 mlib_s32 c2);
mlib_status mlib_GraphicsDrawArc_A_8(mlib_image *buffer, mlib_s16 x,
 mlib_s16 y, mlib_s32 r, mlib_f32 t1, mlib_f32 t2, mlib_s32 c);
mlib_status mlib_GraphicsDrawArc_A_32(mlib_image *buffer, mlib_s16 x,
 mlib_s16 y, mlib_s32 r, mlib_f32 t1, mlib_f32 t2, mlib_s32 c);
mlib_status mlib_GraphicsDrawArc_B_8(mlib_image *buffer, mlib_s16 x,
 mlib_s16 y, mlib_s32 r, mlib_f32 t1, mlib_f32 t2, mlib_s32 c,
 mlib_s32 a);
mlib_status mlib_GraphicsDrawArc_B_32(mlib_image *buffer, mlib_s16 x,
 mlib_s16 y, mlib_s32 r, mlib_f32 t1, mlib_f32 t2, mlib_s32 c,
 mlib_s32 a);
mlib_status mlib_GraphicsDrawArc_AB_8(mlib_image *buffer, mlib_s16 x,
 mlib_s16 y, mlib_s32 r, mlib_f32 t1, mlib_f32 t2, mlib_s32 c,
 mlib_s32 a);
mlib_status mlib_GraphicsDrawArc_AB_32(mlib_image *buffer, mlib_s16 x,
 mlib_s16 y, mlib_s32 r, mlib_f32 t1, mlib_f32 t2, mlib_s32 c,
 mlib_s32 a);
Each of the mlib_GraphicsDrawArc_*() functions draws an arc with the center at (x, y), radius r, start angle t1, and
end angle t2.
Each of the mlib_GraphicsDrawArc_X_*() functions draws an arc in Xor mode as follows:
  data[x,y] ^= c ^ c2
Each of the mlib_GraphicsDrawArc_A_*() functions draws an arc with antialiasing.
Each of the mlib_GraphicsDrawArc_B_*() functions draws an arc with alpha blending as follows:
  data[x,y] = (data[x,y] * (255 - a) + c * a) / 255
Each of the mlib_GraphicsDrawArc_AB_*() functions draws an arc with antialiasing and alpha blending.
Each of the functions takes some of the following arguments:
buffer Pointer to the image into which the function is drawing.
<beginning of page>
x X coordinate of the center.
y Y coordinate of the center.
r Radius of the arc.
t1 Start angle of the arc in radians.
t2 End angle of the arc in radians.
c Color used in the drawing.
c2 Alternation color.
a Alpha value for blending. 0 <<=> a <<=> 255.
Each of the functions returns MLIB_SUCCESS if successful. Otherwise it returns MLIB_FAILURE.
See attributes(5) for descriptions of the following attributes:
tab() box; cw(2.75i) |cw(2.75i) lw(2.75i) |lw(2.75i) ATTRIBUTE TYPEATTRIBUTE VALUE _ Interface Stability<hy>
Committed _ MT-LevelMT-Safe
mlib_GraphicsDrawCircle(3MLIB), mlib_GraphicsDrawEllipse(3MLIB), attributes(5)
