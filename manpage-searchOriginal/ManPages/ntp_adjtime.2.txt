<beginning of page>
ntp_adjtime <-> adjust local clock parameters
#include <sys/timex.h>
int ntp_adjtime(struct timex *tptr);
The ntp_adjtime() function adjusts the parameters used to discipline the local clock, according to the values in the
struct timex pointed to by tptr. Before returning, it fills in the structure with the most recent values kept in the ker<hy>
nel.
The adjustment is effected in part by speeding up or slowing down the clock, as necessary, and in part by phase-
locking onto a once-per second pulse (PPS) provided by a driver, if available.
 struct timex {
  uint32_t modes; /* clock mode bits (w) */
  int32_t offset; /* time offset (us) (rw) */
  int32_t freq; /* frequency offset (scaled ppm) (rw) */
  int32_t maxerror; /* maximum error (us) (rw) */
  int32_t esterror; /* estimated error (us) (rw) */
  int32_t status; /* clock status bits (rw) */
  int32_t constant; /* pll time constant (rw) */
  int32_t precision; /* clock precision (us) (r) */
  int32_t tolerance; /* clock frequency tolerance
  (scaled ppm) (r) */
  int32_t ppsfreq; /* pps frequency (scaled ppm) (r) */
  int32_t jitter; /* pps jitter (us) (r) */
  int32_t shift; /* interval duration (s) (shift) (r) */
  int32_t stabil; /* pps stability (scaled ppm) (r) */
  int32_t jitcnt; /* jitter limit exceeded (r) */
  int32_t calcnt; /* calibration intervals (r) */
  int32_t errcnt; /* calibration errors (r) */
  int32_t stbcnt; /* stability limit exceeded (r) */
 };
Upon successful completion, ntp_adjtime() returns the current clock state (see <sys/timex.h>). Otherwise, it re<hy>
turns <mi>1 and sets errno to indicate the error.
The ntp_adjtime() function will fail if:
EFAULT The tptr argument is an invalid pointer.
EINVAL The constant member of the structure pointed to by tptr is less than 0 or greater than 30.
EPERM The {PRIV_SYS_TIME} privilege is not asserted in the effective set of the calling process.
ntp_gettime(2), privileges(5)
See the ntpd man page, delivered in the SUNWntpu package (not a SunOS man page).
