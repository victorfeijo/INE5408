<beginning of page>
aio_suspend <-> wait for asynchronous I/O request
#include <aio.h>
int aio_suspend(const struct aiocb * const list[], int nent,
 const struct timespec *timeout);
The aio_suspend() function suspends the calling thread until at least one of the asynchronous I/O operations refer<hy>
enced by the list argument has completed, until a signal interrupts the function, or, if timeout is not NULL, until the
time interval specified by timeout has passed. If any of the aiocb structures in the list correspond to completed asyn<hy>
chronous I/O operations (that is, the error status for the operation is not equal to EINPROGRESS) at the time of the
call, the function returns without suspending the calling thread. The list argument is an array of pointers to asynchro<hy>
nous I/O control blocks. The nent argument indicates the number of elements in the array and is limited to
_AIO_LISTIO_MAX = 4096. Each aiocb structure pointed to will have been used in initiating an asynchronous
I/O request via aio_read(3C), aio_write(3C), or lio_listio(3C). This array may contain null pointers, which are ig<hy>
nored. If this array contains pointers that refer to aiocb structures that have not been used in submitting asynchro<hy>
nous I/O, the effect is undefined.
If the time interval indicated in the timespec structure pointed to by timeout passes before any of the I/O operations
referenced by list are completed, then aio_suspend() returns with an error.
If aio_suspend() returns after one or more asynchronous I/O operations have completed, it returns 0. Otherwise, it
returns <mi>1, and sets errno to indicate the error.
The application may determine which asynchronous I/O completed by scanning the associated error and return sta<hy>
tus using aio_error(3C) and aio_return(3C), respectively.
The aio_suspend() function will fail if:
EAGAIN No asynchronous I/O indicated in the list referenced by list completed in the time interval indicated by
timeout.
EINTR A signal interrupted the aio_suspend() function. Since each asynchronous I/O operation might provoke a
signal when it completes, this error return can be caused by the completion of one or more of the very I/O operations
being awaited.
EINVAL The nent argument is less than or equal to 0 or greater than _AIO_LISTIO_MAX, or the timespec struc<hy>
ture pointed to by timeout is not properly set because tv_sec is less than 0 or tv_nsec is either less than 0 or greater
than 10^9.
ENOMEM There is currently not enough available memory; the application can try again later.
ENOSYS The aio_suspend() function is not supported by the system.
The aio_suspend() function has a transitional interface for 64-bit file offsets. See lf64(5).
See attributes(5) for descriptions of the following attributes:
tab() box; cw(2.75i) |cw(2.75i) lw(2.75i) |lw(2.75i) ATTRIBUTE TYPEATTRIBUTE VALUE _ Interface Stability<hy>
Committed _ MT-LevelAsync-Signal-Safe _ StandardSee standards(5).
aio.h(3HEAD), aio_fsync(3C), aio_read(3C), aio_return(3C), aio_write(3C), lio_listio(3C), signal.h(3HEAD),
attributes(5), lf64(5), standards(5)
Solaris 2.6 was the first release to support the Asynchronous Input and Output option. Prior to this release, this func<hy>
tion always returned <mi>1 and set errno to ENOSYS.
