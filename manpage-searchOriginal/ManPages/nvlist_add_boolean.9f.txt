<beginning of page>
nvlist_add_boolean, nvlist_add_boolean_value, nvlist_add_byte, nvlist_add_int8, nvlist_add_uint8,
nvlist_add_int16, nvlist_add_uint16, nvlist_add_int32, nvlist_add_uint32, nvlist_add_int64, nvlist_add_uint64,
nvlist_add_string, nvlist_add_nvlist, nvlist_add_nvpair, nvlist_add_boolean_array, nvlist_add_int8_array,
nvlist_add_uint8_array, nvlist_add_nvlist_array, nvlist_add_byte_array, nvlist_add_int16_array,
nvlist_add_uint16_array, nvlist_add_int32_array, nvlist_add_uint32_array, nvlist_add_int64_array,
nvlist_add_uint64_array, nvlist_add_string_array, nvlist_t <-> value pair functions
#include <sys/nvpair.h>
int nvlist_add_boolean(nvlist_t *nvl, const char *name);
int nvlist_add_boolean_value(nvlist_t *nvl, const char *name,
 boolean_t val);
int nvlist_add_byte(nvlist_t *nvl, const char *name, uchar_t val);
int nvlist_add_int8(nvlist_t *nvl, const char *name, int8_t val);
int nvlist_add_uint8(nvlist_t *nvl, const char *name, uint8_t val);
int nvlist_add_int16(nvlist_t *nvl, const char *name, int16_t val);
int nvlist_add_uint16(nvlist_t *nvl, const char *name, uint16_t val);
int nvlist_add_int32(nvlist_t *nvl, const char *name, int32_t val);
int nvlist_add_uint32(nvlist_t *nvl, const char *name, uint32_t val);
int nvlist_add_int64(nvlist_t *nvl, const char *name, int64_t val);
int nvlist_add_uint64(nvlist_t *nvl, const char *name, uint64_t val);
int nvlist_add_string(nvlist_t *nvl, const char *name, char *val);
int nvlist_add_nvlist(nvlist_t *nvl, const char *name, nvlist_t *val);
int nvlist_add_nvpair(nvlist_t *nvl, nvpair_t *nvp);
int nvlist_add_boolean_array(nvlist_t *nvl, const char *name,
 boolean_t *val, uint_t nelem);
int nvlist_add_byte_array(nvlist_t *nvl, const char *name, uchar_t *val,
 uint_t nelem);
int nvlist_add_int8_array(nvlist_t *nvl, const char *name, int8_t *val,
 uint_t nelem);
int nvlist_add_uint8_array(nvlist_t *nvl, const char *name,
 uint8_t *val uint_t nelem);
int nvlist_add_int16_array(nvlist_t *nvl, const char *name, int16_t *val,
 uint_t nelem);
int nvlist_add_uint16_array(nvlist_t *nvl, const char *name, uint16_t *val,
 uint_t nelem);
int nvlist_add_int32_array(nvlist_t *nvl, const char *name, int32_t *val,
 uint_t nelem);
int nvlist_add_uint32_array(nvlist_t *nvl, const char *name, uint32_t *val,
 uint_t nelem);
int nvlist_add_int64_array(nvlist_t *nvl, const char *name, int64_t *val,
 uint_t nelem);
int nvlist_add_uint64_array(nvlist_t *nvl, const char *name, uint64_t *val,
 uint_t nelem);
<beginning of page>
int nvlist_add_string_array(nvlist_t *nvl, const char *name,
 const *char *val, uint_t nelem);
int nvlist_add_nvlist_array(nvlist_t *nvl, const char *name,
 nvlist_t **val, uint_t nelem);
Solaris DDI specific (Solaris DDI)
nvl The nvlist_t to be processed.
nvp The nvpair_t (name-value pair) to be processed.
name Name of the name-value pair (nvpair).
nelem Number of elements in value (that is, array size).
val Value or starting address of the array value.
These functions add a new name-value pair to an nvlist_t. The memory allocation policy follows that specified in
nvlist_alloc(), nvlist_unpack(), or nvlist_dup(). See nvlist_alloc(9F). The uniqueness of nvpair name and data
types follows the nvflag argument specified in nvlist_alloc().
If NV_UNIQUE_NAME was specified for nvflag, existing nvpairs with matching names are removed before the
new nvpair is added.
If NV_UNIQUE_NAME_TYPE was specified for nvflag, existing nvpairs with matching names and data types are
removed before the new nvpair is added.
If neither was specified for nvflag, the new nvpair is unconditionally added at the end of the list. The library pre<hy>
serves the order of the name-value pairs across packing, unpacking, and duplication.
Multiple threads can simultaneously read the same nvlist_t, but only one thread may actively change a given nvlist_t
at a time. The caller is responsible for the synchronization.
The nvlist_add_boolean() function is deprecated and the nvlist_add_boolean_value() function is used instead.
0 success
EINVAL invalid argument
ENOMEM insufficient memory
These functions can be called from interrupt context only if (1) the default allocator is used and the KM_NOSLEEP
flag is set, or (2) the specified allocator did not sleep for free memory (for example, if it uses a pre-allocated buffer
for memory allocations).
See nvlist_alloc(9F) for a description of pluggable allocators and KM_NOSLEEP. These functions can be called
from user or kernel context in all cases.
