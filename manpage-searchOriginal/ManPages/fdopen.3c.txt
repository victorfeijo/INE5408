<beginning of page>
fdopen <-> associate a stream with a file descriptor
#include <stdio.h>
FILE *fdopen(int fildes, const char *mode);
The fdopen() function associates a stream with a file descriptor fildes.
The mode argument is a character string having one of the following values:
tab(); lw(1.9i) lw(3.6i) lw(1.9i) lw(3.6i) r or rbOpen a file for reading. w or wbOpen a file for writing. a or
abOpen a file for writing at end of file. r+, rb+ or r+bT{ Open a file for update (reading and writing). T} w+, wb+
or w+bT{ Open a file for update (reading and writing). T} a+, ab+ or a+bT{ Open a file for update (reading and
writing) at end of file. T}
The meaning of these flags is exactly as specified for the fopen(3C) function, except that modes beginning with w do
not cause truncation of the file. A trailing F character can also be included in the mode argument as described in
fopen(3C) to enable extended FILE facility.
The mode of the stream must be allowed by the file access mode of the open file. The file position indicator associat<hy>
ed with the new stream is set to the position indicated by the file offset associated with the file descriptor.
The fdopen() function preserves the offset maximum previously set for the open file description corresponding to
fildes.
The error and end-of-file indicators for the stream are cleared. The fdopen() function may cause the st_atime field
of the underlying file to be marked for update.
If fildes refers to a shared memory object, the result of the fdopen() function is unspecified.
Upon successful completion, fdopen() returns a pointer to a stream. Otherwise, a null pointer is returned and errno
is set to indicate the error.
The fdopen() function may fail and not set errno if there are no free stdio streams.
The fdopen() function may fail if:
EBADF The fildes argument is not a valid file descriptor.
EINVAL The mode argument is not a valid mode.
EMFILE {FOPEN_MAX} streams are currently open in the calling process.
{STREAM_MAX} streams are currently open in the calling process.
ENOMEM There is insufficient space to allocate a buffer.
A process is allowed to have at least {FOPEN_MAX} stdio streams open at a time. For 32-bit applications, howev<hy>
er, the underlying ABIs formerly required that no file descriptor used to access the file underlying a stdio stream
have a value greater than 255. To maintain binary compatibility with earlier Solaris releases, this limit still constrains
32-bit applications.
File descriptors are obtained from calls like open(2), dup(2), creat(2) or pipe(2), which open files but do not return
streams. Streams are necessary input for almost all of the standard I/O library functions.
See attributes(5) for descriptions of the following attributes:
<beginning of page>
tab() box; cw(2.75i) |cw(2.75i) lw(2.75i) |lw(2.75i) ATTRIBUTE TYPEATTRIBUTE VALUE _ Interface Stability<hy>
See below. _ MT-LevelMT-Safe
The F character in the mode argument is Evolving. In all other respects this function is Standard.
creat(2), dup(2), open(2), pipe(2), fclose(3C), fopen(3C), attributes(5), standards(5)
