<beginning of page>
media_getattr, media_setattr <-> get and set media attributes
cc [ flag ... ] file ... -lvolmgt [ library ... ]
#include <volmgt.h>
char *media_getattr(char *vol_path, char *attr);
int media_setattr(char *vol_path, char *attr, char *value);
This function is obsolete. The management of removable media by the Volume Management feature, including vold,
has been replaced by software that supports the Hardware Abstraction Layer (HAL). Programmatic support for HAL
is through the HAL APIs, which are documented on the HAL web site. See hal(5). The return value of this function
is undefined.
media_setattr() and media_getattr() respectively set and get attribute-value pairs (called properties) on a per-vol<hy>
ume basis.
Volume management supports system properties and user properties. System properties are ones that volume man<hy>
agement predefines. Some of these system properties are writable, but only by the user that owns the volume being
specified, and some system properties are read only:
tab(); cw(.91i) cw(.83i) cw(1.2i) cw(2.56i) lw(.91i) lw(.83i) lw(1.2i) lw(2.56i) AttributeWritableValueDescription
_ s-accessRO"seq", "rand"sequential or random access s-densityRO"low", "medium", "high"media density s-part<hy>
sROcomma separated list of slice numbers list of partitions on this volume s-locationROpathnamevolume manage<hy>
ment pathname to media s-mejectableRO"true", "false"T{ whether or not media is manually ejectable T} s-rmone<hy>
jectR/W"true", "false"T{ should media access points be removed from database upon ejection T} s-enxioR/W"true",
"false"T{ if set return ENXIO when media access attempted T}
Properties can also be defined by the user. In this case the value can be any string the user wishes.
The return from this function is undefined.
Both media_getattr() and media_setattr() can fail returning a null pointer if an open(2) of the specified vol_path
fails, if an fstat(2) of that pathname fails, or if that pathname is not a block or character special device.
media_getattr() can also fail if the specified attribute was not found, and media_setattr() can also fail if the caller
doesn't have permission to set the attribute, either because it's is a system attribute, or because the caller doesn't own
the specified volume. Example 1 Using media_getattr()
The following example checks to see if the volume called fred that volume management is managing can be ejected
by means of software, or if it can only be manually ejected:
 if (media_getattr("/rdsk/fred", "s-mejectable") != NULL) {
  (void) printf("\"fred\" must be manually ejected\n");
 } else {
  (void) printf("software can eject \"fred\"\n");
 }
This example shows setting the s-enxio property for the floppy volume currently in the first floppy drive:
 int res;
 if ((res = media_setattr("/dev/aliases/floppy0", "s-enxio",
  "true")) == 0) {
  (void) printf("can't set s-enxio flag for floppy0\n");
 }
See attributes(5) for descriptions of the following attributes:
<beginning of page>
tab() box; cw(2.75i) |cw(2.75i) lw(2.75i) |lw(2.75i) ATTRIBUTE TYPEATTRIBUTE VALUE _ MT-LevelMT-Safe
_ Interface StabilityObsolete
lstat(2), open(2), readlink(2), stat(2), free(3C), malloc(3C), media_findname(3VOLMGT),
volmgt_check(3VOLMGT), volmgt_inuse(3VOLMGT), volmgt_root(3VOLMGT), volmgt_run<hy>
ning(3VOLMGT), volmgt_symname(3VOLMGT), attributes(5), hal(5)
