<beginning of page>
pthread_exit <-> terminate calling thread
cc -mt [ flag... ] file... -lpthread [ library... ]
#include <pthread.h>
void pthread_exit(void *value_ptr);
The pthread_exit() function terminates the calling thread, in a similar way that exit(3C) terminates the calling
process. If the thread is not detached, the exit status specified by value_ptr is made available to any successful join
with the terminating thread. See pthread_join(3C). Any cancellation cleanup handlers that have been pushed and
not yet popped are popped in the reverse order that they were pushed and then executed. After all cancellation
cleanup handlers have been executed, if the thread has any thread-specific data, appropriate destructor functions will
be called in an unspecified order. Thread termination does not release any application visible process resources, in<hy>
cluding, but not limited to, mutexes and file descriptors, nor does it perform any process level cleanup actions, in<hy>
cluding, but not limited to, calling any atexit() routines that might exist.
An exiting thread runs with all signals blocked. All thread termination functions, including cancellation cleanup han<hy>
dlers and thread-specific data destructor functions, are called with all signals blocked.
An implicit call to pthread_exit() is made when a thread other than the thread in which main() was first invoked re<hy>
turns from the start routine that was used to create it. The function's return value serves as the thread's exit status.
The behavior of pthread_exit() is undefined if called from a cancellation cleanup handler or destructor function that
was invoked as a result of either an implicit or explicit call to pthread_exit().
After a thread has terminated, the result of access to local (auto) variables of the thread is undefined. Thus, refer<hy>
ences to local variables of the exiting thread should not be used for the pthread_exit() value_ptr parameter value.
The process exits with an exit status of 0 after the last thread has been terminated. The behavior is as if the imple<hy>
mentation called exit() with a 0 argument at thread termination time.
The pthread_exit() function cannot return to its caller.
No errors are defined.
See attributes(5) for descriptions of the following attributes:
tab() box; cw(2.75i) |cw(2.75i) lw(2.75i) |lw(2.75i) ATTRIBUTE TYPEATTRIBUTE VALUE _ Interface Stability<hy>
Committed _ MT-LevelMT-Safe _ StandardSee standards(5).
exit(3C), pthread_cancel(3C), pthread_create(3C), pthread_join(3C), pthread_key_create(3C), attributes(5),
standards(5)
