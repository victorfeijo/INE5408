<beginning of page>
mlib_MatrixMulShift_S16_S16_Mod, mlib_MatrixMulShift_S16_S16_Sat, mlib_MatrixMul<hy>
Shift_S16C_S16C_Mod, mlib_MatrixMulShift_S16C_S16C_Sat <-> matrix multiplication plus shifting
cc [ flag... ] file... -lmlib [ library... ]
#include <mlib.h>
mlib_status mlib_MatrixMulShift_S16_S16_Mod(mlib_s16 *z,
 const mlib_s16 *x, const mlib_s16 *y, mlib_s32 m,
 mlib_s32 l, mlib_s32 n, mlib_s32 shift);
mlib_status mlib_MatrixMulShift_S16_S16_Sat(mlib_s16 *z,
 const mlib_s16 *x, const mlib_s16 *y, mlib_s32 m,
 mlib_s32 l, mlib_s32 n, mlib_s32 shift);
mlib_status mlib_MatrixMulShift_S16C_S16C_Mod(mlib_s16 *z,
 const mlib_s16 *x, const mlib_s16 *y, mlib_s32 m,
 mlib_s32 l, mlib_s32 n, mlib_s32 shift);
mlib_status mlib_MatrixMulShift_S16C_S16C_Sat(mlib_s16 *z,
 const mlib_s16 *x, const mlib_s16 *y, mlib_s32 m,
 mlib_s32 l, mlib_s32 n, mlib_s32 shift);
Each of these functions performs a multiplication of two matrices and shifts the result.
For real data, the following equation is used:
  l-1
 z[i*n + j] = {SUM (x[i*l + k] * y[k*n + j])} * 2**(-shift)
  k=0
where i = 0, 1, ..., (m - 1); j = 0, 1, ..., (n - 1).
For complex data, the following equation is used:
  l-1
 z[2*(i*n + j)] = {SUM (xR*yR - xI*yI)} * 2**(-shift)
  k=0
  l-1
 z[2*(i*n + j) + 1] = {SUM (xR*yI + xI*yR)} * 2**(-shift)
  k=0
where
 xR = x[2*(i*l + k)]
 xI = x[2*(i*l + k) + 1]
 yR = y[2*(k*n + j)]
 yI = y[2*(k*n + j) + 1]
 i = 0, 1, ..., (m - 1)
 j = 0, 1, ..., (n - 1)
Each of the functions takes the following arguments:
z Pointer to the first element of the result matrix, in row major order.
x Pointer to the first element of the first matrix, in row major order.
y Pointer to the first element of the second matrix, in row major order.
<beginning of page>
m Number of rows in the first matrix. m > 0.
l Number of columns in the first matrix, and the number of rows in the second matrix. l > 0.
n Number of columns in the second matrix. n > 0.
shift Right shifting factor. 1 <<=> shift <<=> 16.
Each of the functions returns MLIB_SUCCESS if successful. Otherwise it returns MLIB_FAILURE.
See attributes(5) for descriptions of the following attributes:
tab() box; cw(2.75i) |cw(2.75i) lw(2.75i) |lw(2.75i) ATTRIBUTE TYPEATTRIBUTE VALUE _ Interface Stability<hy>
Committed _ MT-LevelMT-Safe
mlib_MatrixMul_U8_U8_Mod(3MLIB), attributes(5)
