<beginning of page>
mlib_ImageReformat <-> image data buffer reformat
cc [ flag... ] file... -lmlib [ library... ]
#include <mlib.h>
mlib_status mlib_ImageReformat(void **dstData, const void **srcData,
 mlib_s32 numBands, mlib_s32 xSize, mlib_s32 ySize,
 mlib_type dstDataType, const mlib_s32 *dstBandoffsets,
 mlib_s32 dstScanlinestride, mlib_s32 dstPixelstride,
 mlib_type srcDataType, const mlib_s32 *srcBandoffsets,
 mlib_s32 srcScanlinestride, mlib_s32 srcPixelstride);
The mlib_ImageReformat() function copies and casts, if needed, an image from one buffer to another. The formats
and data types of the two buffers may be different.
 dstPixel[x][y][i] = (dstDataType) srcPixel[x][y][i]
where the values of a pixel at position (x, y) and in channel i are:
 srcPixel[x][y][i] = srcData[i][srcBandoffsets[i] +
  srcScanlinestride*y +
  srcPixelstride*x]
 dstPixel[x][y][i] = dstData[i][dstBandoffsets[i] +
  dstScanlinestride*y +
  dstPixelstride*x]
It is the user's responsibility to make sure that the data buffers supplied are suitable for this operation. The srcData
and dstData can have 1, 2, 3, or 4 channels, and they must have the same number of channels. The srcDataType and
dstDataType can be MLIB_BYTE, MLIB_SHORT, MLIB_USHORT, MLIB_INT, MLIB_FLOAT, or
MLIB_DOUBLE.
The conversions between different data types are implemented as described in the following table:
tab(); cw(0i) cw(0i) cw(5.5i) lw(0i) lw(0i) lw(5.5i) Source TypeDest. TypeAction _ MLIB_SHORTM<hy>
LIB_BYTE(mlib_u8)clamp(x, 0, 255) MLIB_USHORTMLIB_BYTE(mlib_u8)clamp(x, 0, 255) _ MLIB_INTM<hy>
LIB_BYTE(mlib_u8)clamp(x, 0, 255) _ MLIB_FLOATMLIB_BYTE(mlib_u8)clamp(x, 0, 255) _ MLIB_DOU<hy>
BLEMLIB_BYTE(mlib_u8)clamp(x, 0, 255) _ MLIB_BYTEMLIB_SHORT(mlib_s16)x _ MLIB_USHORTM<hy>
LIB_SHORT(mlib_s16)clamp(x, -32768, 32767) _ MLIB_INTMLIB_SHORT(mlib_s16)clamp(x, -32768, 32767) _
MLIB_FLOATMLIB_SHORT(mlib_s16)clamp(x, -32768, 32767) _ MLIB_DOUBLEM<hy>
LIB_SHORT(mlib_s16)clamp(x, -32768, 32767) _ MLIB_BYTEMLIB_USHORT(mlib_u16)x _ MLIB_SHORTM<hy>
LIB_USHORT(mlib_u16)clamp(x, 0, 65535) _ MLIB_INTMLIB_USHORT(mlib_u16)clamp(x, 0, 65535) _
MLIB_FLOATMLIB_USHORT(mlib_u16)clamp(x, 0, 65535) _ MLIB_DOUBLEM<hy>
LIB_USHORT(mlib_u16)clamp(x, 0, 65535) _ MLIB_BYTEMLIB_INT(mlib_s32)x _ MLIB_SHORTM<hy>
LIB_INT(mlib_s32)x _ MLIB_USHORTMLIB_INT(mlib_s32)x _ MLIB_FLOATMLIB_INTT{
(mlib_s32)clamp(x, -2147483647-1, 2147483647) T} _ MLIB_DOUBLEMLIB_INTT{ (mlib_s32)clamp(x,
-2147483647-1, 2147483647) T} _ MLIB_BYTEMLIB_FLOAT(mlib_f32)x _ MLIB_SHORTM<hy>
LIB_FLOAT(mlib_f32)x _ MLIB_USHORTMLIB_FLOAT(mlib_f32)x _ MLIB_INTMLIB_FLOAT(mlib_f32)x _
MLIB_DOUBLEMLIB_FLOAT(mlib_f32)x _ MLIB_BYTEMLIB_DOUBLE(mlib_d64)x _ MLIB_SHORTM<hy>
LIB_DOUBLE(mlib_d64)x _ MLIB_USHORTMLIB_DOUBLE(mlib_d64)x _ MLIB_INTMLIB_DOU<hy>
BLE(mlib_d64)x _ MLIB_FLOATMLIB_DOUBLE(mlib_d64)x
The actions are defined in C-style pseudo-code. All type casts follow the rules of standard C. clamp() can be defined
as a macro: #define clamp(x, low, high) (((x) < (low)) ? (low) : (((x) > (high)) ? (high) : (x)))
The function takes the following arguments:
dstData The pointer to the destination image data buffer.
<beginning of page>
srcData The pointer to the source image data buffer.
numBands The number of channels of the image data buffers.
xSize The width of the image.
ySize The height of the image.
dstDataType The data type of the dstData buffer.
dstBandoffsets The initial pixel's offsets in the dstData buffer in terms of destination data buffer elements.
dstScanlinestride The scanline stride of the dstData buffer in terms of destination data buffer elements.
dstPixelstride The pixel stride of the dstData buffer in terms of destination data buffer elements.
srcDataType The data type of the srcData buffer.
srcBandoffsets The initial pixel's offsets in the srcData buffer in terms of source data buffer elements.
srcScanlinestride The scanline stride of the srcData buffer in terms of source data buffer elements.
srcPixelstride The pixel stride of the srcData buffer in terms of source data buffer elements.
The function returns MLIB_SUCCESS if successful. Otherwise it returns MLIB_FAILURE.
See attributes(5) for descriptions of the following attributes:
tab() box; cw(2.75i) |cw(2.75i) lw(2.75i) |lw(2.75i) ATTRIBUTE TYPEATTRIBUTE VALUE _ Interface Stability<hy>
Committed _ MT-LevelMT-Safe
mlib_ImageDataTypeConvert(3MLIB), attributes(5)
