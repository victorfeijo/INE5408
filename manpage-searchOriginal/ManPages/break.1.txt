<beginning of page>
break, continue <-> shell built-in functions to escape from or advance within a controlling while, for, foreach, or until
loop
break [n]
continue [n]
break
continue
*break [n]
*continue [n]
+break [n]
+continue [n]
The break utility exits from the enclosing for or while loop, if any. If n is specified, break n levels.
The continue utility resumes the next iteration of the enclosing for or while loop. If n is specified, resume at the n-th
enclosing loop.
The break utility resumes execution after the end of the nearest enclosing foreach or while loop. The remaining
commands on the current line are executed. This allows multilevel breaks to be written as a list of break commands,
all on one line.
The continue utility continues execution of the next iteration of the nearest enclosing while or foreach loop.
The break utility exits from the enclosed for, while, until, or select loop, if any. If n is specified, then break n lev<hy>
els. If n is greater than the number of enclosing loops, the outermost enclosing loop shall be exited.
The continue utility resumes the next iteration of the enclosed for, while, until, or select loop. If n is specified then
resume at the n-th enclosed loop. If n is greater than the number of enclosing loops, the outermost enclosing loop
shall be used.
On this manual page, ksh(1) commands that are preceded by one or two * (asterisks) are treated specially in the fol<hy>
lowing ways: 1. Variable assignment lists preceding the command remain in effect when the command completes.
2. I/O redirections are processed after variable assignments. 3. Errors cause a script that contains them to abort. 4.
Words that follow a command preceded by ** that are in the format of a variable assignment are expanded with the
same rules as a variable assignment. This means that tilde substitution is performed after the = sign, and also that
word splitting and file name generation are not performed.
break is a shell special built-in that exits the smallest enclosing for, select, while, or until loop. It also exits the nth
enclosing loop if n is specified. Execution continues at the command following the loop or loops.
If n is specified, it must be a positive integer <>=>1. If n is larger than the number of enclosing loops, the last enclosing
loop is exited.
continue is a shell special built-in that continues execution at the top of the smallest enclosing for, select, while, or
until loop, if any; or of the top of the nth enclosing loop if n is specified.
If n is specified, it must be a positive integer <>=>1. If n is larger than the number of enclosing loops, the last enclosing
loop is used.
On this manual page, ksh93(1) commands that are preceded by one or two + symbols are special built-in commands
and are treated the following ways: 1. Variable assignment lists preceding the command remain in effect when the
command completes. 2. I/O redirections are processed after variable assignments. 3. Errors cause a script that con<hy>
tains them to abort. 4. Built-in commands are not valid function names. 5. Words following a command preceded
by ++ that are in the format of a variable assignment are expanded with rules as a variable assignment. This means
that tilde substitution is performed after the = sign and field splitting and file name generation are not performed.
See attributes(5) for descriptions of the following attributes:
<beginning of page>
tab() box; cw(2.75i) |cw(2.75i) lw(2.75i) |lw(2.75i) ATTRIBUTE TYPEATTRIBUTE VALUE _ AvailabilitySUN<hy>
Wcsu
csh(1), exit(1), ksh(1), ksh93(1), sh(1), attributes(5)
