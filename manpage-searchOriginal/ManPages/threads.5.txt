<beginning of page>
threads, pthreads <-> POSIX pthreads and Solaris threads concepts
cc -mt [ flag... ] file... [ -lrt library... ]
#include <pthread.h>
cc -mt [ flag... ] file... [ library... ]
#include <sched.h>
#include <thread.h>
POSIX and Solaris threads each have their own implementation within libc(3LIB). Both implementations are inter<hy>
operable, their functionality similar, and can be used within the same application. Only POSIX threads are guaran<hy>
teed to be fully portable to other POSIX-compliant environments. POSIX and Solaris threads require different
source, include files and linking libraries. See SYNOPSIS.
Most of the POSIX and Solaris threading functions have counterparts with each other. POSIX function names, with
the exception of the semaphore names, have a "pthread" prefix. Function names for similar POSIX and Solaris
functions have similar endings. Typically, similar POSIX and Solaris functions have the same number and use of ar<hy>
guments.
POSIX pthreads and Solaris threads differ in the following ways: <bu> POSIX threads are more portable. <bu> POSIX
threads establish characteristics for each thread according to configurable attribute objects. <bu> POSIX pthreads im<hy>
plement thread cancellation. <bu> POSIX pthreads enforce scheduling algorithms. <bu> POSIX pthreads allow for clean-up
handlers for fork(2) calls. <bu> Solaris threads can be suspended and continued. <bu> Solaris threads implement daemon
threads, for whose demise the process does not wait.
The following table compares the POSIX pthreads and Solaris threads functions. When a comparable interface is not
available either in POSIX pthreads or Solaris threads, a hyphen (-) appears in the column.
tab(); lw(2.75i) lw(2.75i) lw(2.75i) lw(2.75i) POSIXSolaris pthread_create()thr_create() pthread_attr_init()-
pthread_attr_setdetachstate()- pthread_attr_getdetachstate()- pthread_attr_setinheritsched()- pthread_at<hy>
tr_getinheritsched()- pthread_attr_setschedparam()- pthread_attr_getschedparam()- pthread_attr_setsched<hy>
policy()- pthread_attr_getschedpolicy()- pthread_attr_setscope()- pthread_attr_getscope()- pthread_attr_set<hy>
stackaddr()- pthread_attr_getstackaddr()- pthread_attr_setstacksize()- pthread_attr_getstacksize()-
pthread_attr_getguardsize()- pthread_attr_setguardsize()- pthread_attr_destroy()- -thr_min_stack()
tab(); lw(2.75i) lw(2.75i) lw(2.75i) lw(2.75i) POSIXSolaris pthread_exit()thr_exit() pthread_join()thr_join()
pthread_detach()-
tab(); lw(2.75i) lw(2.75i) lw(2.75i) lw(2.75i) POSIXSolaris pthread_key_create()thr_keycreate() pthread_set<hy>
specific()thr_setspecific() pthread_getspecific()thr_getspecific() pthread_key_delete()-
tab(); lw(2.75i) lw(2.75i) lw(2.75i) lw(2.75i) POSIXSolaris pthread_sigmask()thr_sigsetmask()
pthread_kill()thr_kill()
tab(); lw(2.75i) lw(2.75i) lw(2.75i) lw(2.75i) POSIXSolaris pthread_self()thr_self() pthread_equal()-
-thr_main()
<beginning of page>
tab(); lw(2.75i) lw(2.75i) lw(2.75i) lw(2.75i) POSIXSolaris -thr_yield() -thr_suspend() -thr_continue()
pthread_setconcurrency()thr_setconcurrency() pthread_getconcurrency()thr_getconcurrency()
pthread_setschedparam()thr_setprio() pthread_setschedprio()thr_setprio() pthread_getschedparam()thr_get<hy>
prio()
tab(); lw(2.75i) lw(2.75i) lw(2.75i) lw(2.75i) POSIXSolaris pthread_cancel()- pthread_setcancelstate()-
pthread_setcanceltype()- pthread_testcancel()- pthread_cleanup_pop()- pthread_cleanup_push()-
tab(); lw(3.85i) lw(1.65i) lw(3.85i) lw(1.65i) POSIXSolaris pthread_mutex_init()mutex_init() pthread_mutexat<hy>
tr_init()- pthread_mutexattr_setpshared()- pthread_mutexattr_getpshared()- pthread_mutexattr_setproto<hy>
col()- pthread_mutexattr_getprotocol()- pthread_mutexattr_setprioceiling()- pthread_mutexattr_getprioceil<hy>
ing()- pthread_mutexattr_settype()- pthread_mutexattr_gettype()- pthread_mutexattr_setrobust()-
pthread_mutexattr_getrobust()- pthread_mutexattr_destroy()- pthread_mutex_setprioceiling()- pthread_mu<hy>
tex_getprioceiling()- pthread_mutex_lock()mutex_lock() pthread_mutex_trylock()mutex_trylock()
pthread_mutex_unlock()mutex_unlock() pthread_mutex_destroy()mutex_destroy()
tab(); lw(2.75i) lw(2.75i) lw(2.75i) lw(2.75i) POSIXSolaris pthread_cond_init()cond_init() pthread_condat<hy>
tr_init()- pthread_condattr_setpshared()- pthread_condattr_getpshared()- pthread_condattr_destroy()-
pthread_cond_wait()cond_wait() pthread_cond_timedwait()cond_timedwait() pthread_cond_sig<hy>
nal()cond_signal() pthread_cond_broadcast()cond_broadcast() pthread_cond_destroy()cond_destroy()
tab(); lw(2.75i) lw(2.75i) lw(2.75i) lw(2.75i) POSIXSolaris pthread_rwlock_init()rwlock_init()
pthread_rwlock_rdlock()rw_rdlock() pthread_rwlock_tryrdlock()rw_tryrdlock() pthread_rwlock_wr<hy>
lock()rw_wrlock() pthread_rwlock_trywrlock()rw_trywrlock() pthread_rwlock_unlock()rw_unlock()
pthread_rwlock_destroy()rwlock_destroy() pthread_rwlockattr_init()- pthread_rwlockattr_destroy()-
pthread_rwlockattr_getpshared()- pthread_rwlockattr_setpshared()-
tab(); lw(2.75i) lw(2.75i) lw(2.75i) lw(2.75i) POSIXSolaris sem_init()sema_init() sem_open()- sem_close()-
sem_wait()sema_wait() sem_trywait()sema_trywait() sem_post()sema_post() sem_getvalue()- sem_unlink()-
sem_destroy()sema_destroy()
tab(); lw(2.75i) lw(2.75i) lw(2.75i) lw(2.75i) POSIXSolaris pthread_atfork()-
tab(); lw(2.75i) lw(2.75i) lw(2.75i) lw(2.75i) POSIXSolaris pthread_once()-
tab(); lw(2.75i) lw(2.75i) lw(2.75i) lw(2.75i) POSIXSolaris -thr_stksegment()
Multithreaded behavior is asynchronous, and therefore, optimized for concurrent and parallel processing. As
threads, always from within the same process and sometimes from multiple processes, share global data with each
other, they are not guaranteed exclusive access to the shared data at any point in time. Securing mutually exclusive
<beginning of page>
access to shared data requires synchronization among the threads. Both POSIX and Solaris implement four synchro<hy>
nization mechanisms: mutexes, condition variables, reader/writer locking (optimized frequent-read occasional-write
mutex), and semaphores.
Synchronizing multiple threads diminishes their concurrency. The coarser the grain of synchronization, that is, the
larger the block of code that is locked, the lesser the concurrency.
If a threads program calls fork(2), it implicitly calls fork1(2), which replicates only the calling thread. Should there
be any outstanding mutexes throughout the process, the application should call pthread_atfork(3C) to wait for and
acquire those mutexes prior to calling fork().
Solaris supports the following three POSIX scheduling policies:
SCHED_OTHER Traditional Timesharing scheduling policy. It is based on the timesharing (TS) scheduling class.
SCHED_FIFO First-In-First-Out scheduling policy. Threads scheduled to this policy, if not preempted by a higher
priority, will proceed until completion. Such threads are in real-time (RT) scheduling class. The calling process must
have a effective user ID of 0.
SCHED_RR Round-Robin scheduling policy. Threads scheduled to this policy, if not preempted by a higher priori<hy>
ty, will execute for a time period determined by the system. Such threads are in real-time (RT) scheduling class and
the calling process must have a effective user ID of 0.
In addition to the POSIX-specified scheduling policies above, Solaris also supports these scheduling policies:
SCHED_IA Threads are scheduled according to the Inter-Active Class (IA) policy as described in priocntl(2).
SCHED_FSS Threads are scheduled according to the Fair-Share Class (FSS) policy as described in priocntl(2).
SCHED_FX Threads are scheduled according to the Fixed-Priority Class (FX) policy as described in priocntl(2).
Only scheduling policy supported is SCHED_OTHER, which is timesharing, based on the TS scheduling class.
In a multithreaded application, EINTR can be returned from blocking system calls when another thread calls
forkall(2).
The -mt compiler option compiles and links for multithreaded code. It compiles source files with <mi>D_REEN<hy>
TRANT and augments the set of support libraries properly.
See attributes(5) for descriptions of the following attributes:
tab() box; cw(2.75i) |cw(2.75i) lw(2.75i) |lw(2.75i) ATTRIBUTE TYPEATTRIBUTE VALUE _ MT-LevelMT-Safe,
Fork 1-Safe
crle(1), fork(2), priocntl(2), libpthread(3LIB), librt(3LIB), libthread(3LIB), pthread_atfork(3C), pthread_cre<hy>
ate(3C), attributes(5), standards(5)
Linker and Libraries Guide
