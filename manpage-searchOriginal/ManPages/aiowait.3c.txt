<beginning of page>
aiowait <-> wait for completion of asynchronous I/O operation
#include <sys/asynch.h>
#include <sys/time.h>
aio_result_t *aiowait(const struct timeval *timeout);
The aiowait() function suspends the calling process until one of its outstanding asynchronous I/O operations com<hy>
pletes, providing a synchronous method of notification.
If timeout is a non-zero pointer, it specifies a maximum interval to wait for the completion of an asynchronous I/O
operation. If timeout is a zero pointer, aiowait() blocks indefinitely. To effect a poll, the timeout parameter should be
non-zero, pointing to a zero-valued timeval structure.
The timeval structure is defined in <sys/time.h> and contains the following members:
 long tv_sec; /* seconds */
 long tv_usec; /* and microseconds */
Upon successful completion, aiowait() returns a pointer to the result structure used when the completed asynchro<hy>
nous I/O operation was requested. Upon failure, aiowait() returns <mi>1 and sets errno to indicate the error. aiowait()
returns 0 if the time limit expires.
The aiowait() function will fail if:
EFAULT The timeout argument points to an address outside the address space of the requesting process. See
NOTES.
EINTR The execution of aiowait() was interrupted by a signal.
EINVAL There are no outstanding asynchronous I/O requests.
EINVAL The tv_secs member of the timeval structure pointed to by timeout is less than 0 or the tv_usecs member
is greater than the number of seconds in a microsecond.
See attributes(5) for descriptions of the following attributes:
tab() box; cw(2.75i) |cw(2.75i) lw(2.75i) |lw(2.75i) ATTRIBUTE TYPEATTRIBUTE VALUE _ MT-LevelSafe
aiocancel(3C), aioread(3C), attributes(5)
The aiowait() function is the only way to dequeue an asynchronous notification. It can be used either inside a SI<hy>
GIO signal handler or in the main program. One SIGIO signal can represent several queued events.
Passing an illegal address as timeout will result in setting errno to EFAULT only if detected by the application
process.
