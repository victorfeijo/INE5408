<beginning of page>
mlib_VolumeFindMaxCMask_U8, mlib_VolumeFindMaxCMask_S16 <-> maximum intensity searching
cc [ flag... ] file... -lmlib [ library... ]
#include <mlib.h>
mlib_status mlib_VolumeFindMaxCMask_U8(mlib_u8 *max,
 const mlib_rays *rays, const mlib_u8 *cmask, mlib_s32 thresh);
mlib_status mlib_VolumeFindMaxCMask_S16(mlib_s16 *max,
 const mlib_rays *rays, const mlib_u8 *cmask, mlib_s32 thresh);
Each function performs maximum intensity searching.
It uses the following equation:
 max[i] = MAX{ rays->results[j][i]
  j = 0, 1, ..., rays->nsteps[i]; cmask[j] > thresh }
where i = 0, 1, ..., rays->nrays - 1.
The function takes the following arguments:
max Pointer to an array of rays->nrays maximum values of the samples in each ray.
rays Pointer to an mlib_rays structure. The data rays->results are organized with ray number (rather than ray step)
varying fastest. Ray number and ray step are the output of the ray casting functions. The data might have values be<hy>
yond the maximum step on a ray. For example, rays->results[rays->nsteps[i]][i] on ray i might not equal 0.
cmask Pointer to an unsigned 8-bit mask array. If cmask[j] > thresh, then data in step j, rays->results[j], are con<hy>
sidered.
thresh Threshold.
The function returns MLIB_SUCCESS if successful. Otherwise it returns MLIB_FAILURE.
See attributes(5) for descriptions of the following attributes:
tab() box; cw(2.75i) |cw(2.75i) lw(2.75i) |lw(2.75i) ATTRIBUTE TYPEATTRIBUTE VALUE _ Interface Stability<hy>
Committed _ MT-LevelMT-Safe
mlib_VolumeFindMax_U8(3MLIB), mlib_VolumeFindMaxBMask_U8(3MLIB), attributes(5)
