<beginning of page>
termios.h, termios <-> define values for termios
#include <termios.h>
The <termios.h> header contains the definitions used by the terminal I/O interfaces. See termios(3C) and
termio(7I) for an overview of the terminal interface.
The following data types are defined through typedef:
cc_t used for terminal special characters
speed_t used for terminal baud rates
tcflag_t used for terminal modes
The above types are all unsigned integer types.
The implementation supports one or more programming environments in which the widths of cc_t, speed_t, and
tcflag_t are no greater than the width of type long. The names of these programming environments can be obtained
using the confstr(3C) function or the getconf(1) utility.
The termios structure is defined and includes the following members:
 tcflag_t c_iflag /* input modes */
 tcflag_t c_oflag /* output modes */
 tcflag_t c_cflag /* control modes */
 tcflag_t c_lflag /* local modes */
 cc_t c_cc[NCCS] /* control characters */
A definition is provided for:
NCCS size of the array c_cc for control characters
The following subscript names for the array c_cc are defined:
tab(); cw(1.47i) cw(1.87i) cw(2.15i) lw(1.47i) lw(1.87i) lw(2.15i) Subscript UsageCanonical ModeSubscript Us<hy>
ageNon-Canonical ModeDescription _ VEOFEOF character VEOLEOL character VERASEERASE character
VINTRVINTRINTR character VKILLKILL character VMINMIN value VQUITVQUITQUIT character VS<hy>
TARTVSTARTSTART character VSTOPVSTOPSTOP character VSUSPVSUSPSUSP character VTIMETIME
value
The subscript values are unique, except that the VMIN and VTIME subscripts can have the same values as the VE<hy>
OF and VEOL subscripts, respectively.
The header file provides the flags described below.
The c_iflag field describes the basic terminal input control:
BRKINT Signal interrupt on break.
ICRNL Map CR to NL on input.
IGNBRK Ignore break condition.
<beginning of page>
IGNCR Ignore CR.
IGNPAR Ignore characters with parity errors.
INLCR Map NL to CR on input.
INPCK Enable input parity check.
ISTRIP Strip character.
IXANY Enable any character to restart output.
IXOFF Enable start/stop input control.
IXON Enable start/stop output control.
PARMRK Mark parity errors.
The c_oflag field specifies the system treatment of output:
OPOST Post-process output.
ONLCR Map NL to CR-NL on output.
OCRNL Map CR to NL on output.
ONOCR No CR output at column 0.
ONLRET NL performs CR function.
OFILL Use fill characters for delay.
NLDLY Select newline delays:
NL0 newline type 0
NL1 newline type 1
CRDLY Select carriage-return delays:
CR0 carriage-return delay type 0
CR1 carriage-return delay type 1
CR2 carriage-return delay type 2
<beginning of page>
CR3 carriage-return delay type 3
TABDLY Select horizontal-tab delays:
TAB0 horizontal-tab delay type 0
TAB1 horizontal-tab delay type 1
TAB2 horizontal-tab delay type 2
TAB3 expand tabs to spaces
BSDLY Select backspace delays:
BS0 backspace-delay type 0
BS1 backspace-delay type 1
VTDLY Select vertical-tab delays:
VT0 vertical-tab delay type 0
VT1 vertical-tab delay type 1
FFDLY Select form-feed delays:
FF0 form-feed delay type 0
FF1 form-feed delay type 1
The input and output baud rates are stored in the termios structure. These are the valid values for objects of type
speed_ t. The following values are defined, but not all baud rates need be supported by the underlying hardware.
B0 Hang up
B50 50 baud
B75 75 baud
B110 110 baud
B134 134.5 baud
<beginning of page>
B150 150 baud
B200 200 baud
B300 300 baud
B600 600 baud
B1200 1 200 baud
B1800 1 800 baud
B2400 2 400 baud
B4800 4 800 baud
B9600 9 600 baud
B19200 19 200 baud
B38400 38 400 baud
The c_cflag field describes the hardware control of the terminal; not all values specified are required to be supported
by the underlying hardware:
CSIZE Character size:
CS5 5 bits
CS6 6 bits
CS7 7 bits
CS8 8 bits
CSTOPB Send two stop bits, else one.
CREAD Enable receiver.
PARENB Parity enable.
PARODD Odd parity, else even.
HUPCL Hang up on last close.
<beginning of page>
CLOCAL Ignore modem status lines.
The implementation supports the functionality associated with the symbols CS7, CS8, CSTOPB, PARODD, and
PARENB.
The c_lflag field of the argument structure is used to control various terminal functions:
ECHO Enable echo.
ECHOE Echo erase character as error-correcting backspace.
ECHOK Echo KILL.
ECHONL Echo NL.
ICANON Canonical input (erase and kill processing).
IEXTEN Enable extended input character processing.
ISIG Enable signals.
NOFLSH Disable flush after interrupt or quit.
TOSTOP Send SIGTTOU for background output.
The following symbolic constants for use with tcsetattr() are defined:
TCSANOW Change attributes immediately.
TCSADRAIN Change attributes when output has drained.
TCSAFLUSH Change attributes when output has drained; also flush pending input.
The following symbolic constants for use with tcflush() are defined:
TCIFLUSH Flush pending input.
TCIOFLUSH Flush both pending input and untransmitted output.
TCOFLUSH Flush untransmitted output.
The following symbolic constants for use with tcflow() are defined:
TCIOFF Transmit a STOP character, intended to suspend input data.
TCION Transmit a START character, intended to restart input data.
<beginning of page>
TCOOFF Suspend output.
TCOON Restart output.
See attributes(5) for descriptions of the following attributes:
tab() box; cw(2.75i) |cw(2.75i) lw(2.75i) |lw(2.75i) ATTRIBUTE TYPEATTRIBUTE VALUE _ Interface Stability<hy>
Standard
getconf(1), cfgetispeed(3C), cfsetispeed(3C), confstr(3C), tcdrain(3C), tcflow(3C), tcflush(3C), tcgetattr(3C),
tcgetsid(3C), tcsendbreak(3C), tcsetattr(3C), attributes(5), standards(5)
