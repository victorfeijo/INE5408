<beginning of page>
setbuffer, setlinebuf <-> assign buffering to a stream
#include <stdio.h>
void setbuffer(FILE *iop, char *abuf, size_t asize);
int setlinebuf(FILE *iop);
The setbuffer() and setlinebuf() functions assign buffering to a stream. The three types of buffering available are
unbuffered, block buffered, and line buffered. When an output stream is unbuffered, information appears on the des<hy>
tination file or terminal as soon as written; when it is block buffered, many characters are saved and written as a
block; when it is line buffered, characters are saved until either a NEWLINE is encountered or input is read from
stdin. The fflush(3C) function may be used to force the block out early. Normally all files are block buffered. A buf<hy>
fer is obtained from malloc(3C) upon the first getc(3C) or putc(3C) performed on the file. If the standard stream
stdout refers to a terminal, it is line buffered. The standard stream stderr is unbuffered by default.
The setbuffer() function can be used after a stream iop has been opened but before it is read or written. It uses the
character array abuf whose size is determined by the asize argument instead of an automatically allocated buffer. If
abuf is the null pointer, input/output will be completely unbuffered. A manifest constant BUFSIZ, defined in the
<stdio.h> header, tells how large an array is needed:
char buf[BUFSIZ];
The setlinebuf() function is used to change the buffering on a stream from block buffered or unbuffered to line
buffered. Unlike setbuffer(), it can be used at any time that the stream iop is active.
A stream can be changed from unbuffered or line buffered to block buffered by using freopen(3C). A stream can be
changed from block buffered or line buffered to unbuffered by using freopen(3C) followed by setbuf(3C) with a
buffer argument of NULL.
The setlinebuf() function returns no useful value.
malloc(3C), fclose(3C), fopen(3C), fread(3C), getc(3C), printf(3C), putc(3C), puts(3C), setbuf(3C), setvbuf(3C)
A common source of error is allocating buffer space as an "automatic" variable in a code block, and then failing to
close the stream in the same block.
