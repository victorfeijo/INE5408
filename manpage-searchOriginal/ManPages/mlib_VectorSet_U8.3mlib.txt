<beginning of page>
mlib_VectorSet_U8, mlib_VectorSet_U8C, mlib_VectorSet_S8, mlib_VectorSet_S8C, mlib_VectorSet_S16,
mlib_VectorSet_S16C, mlib_VectorSet_S32, mlib_VectorSet_S32C <-> set vector to specified value
cc [ flag... ] file... -lmlib [ library... ]
#include <mlib.h>
mlib_status mlib_VectorSet_U8(mlib_u8 *z, const mlib_u8 *c,
 mlib_s32 n);
mlib_status mlib_VectorSet_U8C(mlib_u8 *z, const mlib_u8 *c,
 mlib_s32 n);
mlib_status mlib_VectorSet_S8(mlib_s8 *z, const mlib_s8 *c,
 mlib_s32 n);
mlib_status mlib_VectorSet_S8C(mlib_s8 *z, const mlib_s8 *c,
 mlib_s32 n);
mlib_status mlib_VectorSet_S16(mlib_s16 *z, const mlib_s16 *c,
 mlib_s32 n);
mlib_status mlib_VectorSet_S16C(mlib_s16 *z, const mlib_s16 *c,
 mlib_s32 n);
mlib_status mlib_VectorSet_S32(mlib_s32 *z, const mlib_s32 *c,
 mlib_s32 n);
mlib_status mlib_VectorSet_S32C(mlib_s32 *z, const mlib_s32 *c,
 mlib_s32 n);
Each of these functions sets a vector to a specified value.
For real data, the following equation is used:
 z[i] = c[0]
where i = 0, 1, ..., (n - 1).
For complex data, the following equation is used:
 z[2*i] = c[0]
 z[2*i + 1] = c[1]
where i = 0, 1, ..., (n - 1).
Each of the functions takes the following arguments:
z Pointer to the first element of the destination vector.
c Pointer to the source scalar. When the function is used with complex data types, c[0] contains the scaling factor for
the real part, and c[1] contains the scaling factor for the imaginary part.
n Number of elements in the vector.
Each of the functions returns MLIB_SUCCESS if successful. Otherwise it returns MLIB_FAILURE.
See attributes(5) for descriptions of the following attributes:
tab() box; cw(2.75i) |cw(2.75i) lw(2.75i) |lw(2.75i) ATTRIBUTE TYPEATTRIBUTE VALUE _ Interface Stability<hy>
<beginning of page>
Committed _ MT-LevelMT-Safe
attributes(5)
