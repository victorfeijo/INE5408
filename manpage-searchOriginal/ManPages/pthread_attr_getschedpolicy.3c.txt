<beginning of page>
pthread_attr_getschedpolicy, pthread_attr_setschedpolicy <-> get or set schedpolicy attribute
cc -mt [ flag... ] file... -lpthread [ library... ]
#include <pthread.h>
int pthread_attr_getschedpolicy(const pthread_attr_t *restrict attr,
 int *restrict policy);
int pthread_attr_setschedpolicy(pthread_attr_t *attr, int policy);
The functions pthread_attr_setschedpolicy() and pthread_attr_getschedpolicy(), respectively, set and get the
schedpolicy attribute in the attr argument.
Supported values of policy include SCHED_FIFO, SCHED_RR and SCHED_OTHER, which are defined by the
header <sched.h>. When threads executing with the scheduling policy SCHED_FIFO or SCHED_RR are waiting
on a mutex, they acquire the mutex in priority order when the mutex is unlocked.
See sched.h(3HEAD) for a description of all defined policy values. Valid policy values can also be obtained from
pthread_getschedparam(3C) and sched_getscheduler(3C).
If successful, the pthread_attr_setschedpolicy() and pthread_attr_getschedpolicy() functions return 0. Other<hy>
wise, an error number is returned to indicate the error.
The pthread_attr_setschedpolicy() or pthread_attr_getschedpolicy() function may fail if:
EINVAL attr or policy is invalid.
After these attributes have been set, a thread can be created with the specified attributes using pthread_create(). Us<hy>
ing these routines does not affect the current running thread.
See attributes(5) for descriptions of the following attributes:
tab() box; cw(2.75i) |cw(2.75i) lw(2.75i) |lw(2.75i) ATTRIBUTE TYPEATTRIBUTE VALUE _ Interface Stability<hy>
Committed _ MT-LevelMT-Safe _ StandardSee standards(5).
pthread_attr_init(3C), pthread_attr_setscope(3C), pthread_attr_setinheritsched(3C), pthread_attr_setsched<hy>
param(3C), pthread_create(3C), pthread_getschedparam(3C), sched.h(3HEAD), sched_getscheduler(3C), at<hy>
tributes(5), standards(5)
