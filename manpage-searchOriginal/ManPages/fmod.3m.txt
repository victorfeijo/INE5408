<beginning of page>
fmod, fmodf, fmodl <-> floating-point remainder value function
c99 [ flag... ] file... -lm [ library... ]
#include <math.h>
double fmod(double x, double y);
float fmodf(float x, float y);
long double fmodl(long double x, long double y);
These functions return the floating-point remainder of the division of x by y.
These functions return the value x <mi> i * y, for some integer i such that, if y is non-zero, the result has the same sign
as x and magnitude less than the magnitude of y.
If x or y is NaN, a NaN is returned.
If y is 0, a domain error occurs and a NaN is returned.
If x is infinite, a domain error occurs and a NaN is returned.
If x is <+->0 and y is not 0, <+->0 is returned.
If x is not infinite and y is <+->Inf, x is returned.
These functions will fail if:
Domain Error The x argument is infinite or y is 0.
If the integer expression (math_errhandling & MATH_ERREXCEPT) is non-zero, the invalid floating-point ex<hy>
ception is raised.
An application wanting to check for exceptions should call feclearexcept(FE_ALL_EXCEPT) before calling these
functions. On return, if fetestexcept(FE_INVALID | FE_DIVBYZERO | FE_OVERFLOW | FE_UNDER<hy>
FLOW) is non-zero, an exception has been raised. An application should either examine the return value or check
the floating point exception flags to detect exceptions.
See attributes(5) for descriptions of the following attributes:
tab() box; cw(2.75i) |cw(2.75i) lw(2.75i) |lw(2.75i) ATTRIBUTE TYPEATTRIBUTE VALUE _ Interface Stability<hy>
Standard _ MT-LevelMT-Safe
feclearexcept(3M), fetestexcept(3M), isnan(3M), math.h(3HEAD), attributes(5), standards(5)
